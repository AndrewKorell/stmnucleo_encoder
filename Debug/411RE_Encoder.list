
411RE_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ace4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800ae88  0800ae88  0000be88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b348  0800b348  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b348  0800b348  0000c348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b350  0800b350  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b350  0800b350  0000c350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b354  0800b354  0000c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b358  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c20  200001d8  0800b530  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004df8  0800b530  0000ddf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001721e  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033f8  00000000  00000000  00024426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00027820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001002  00000000  00000000  00028cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000460a  00000000  00000000  00029cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016963  00000000  00000000  0002e2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b598  00000000  00000000  00044c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e01c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bdc  00000000  00000000  000e020c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e6de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae6c 	.word	0x0800ae6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800ae6c 	.word	0x0800ae6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff8:	f000 fcc6 	bl	8001988 <HAL_Init>
  /* USER CODE BEGIN Init */
  //enc_init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffc:	f000 f822 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001000:	f000 f944 	bl	800128c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001004:	f000 f918 	bl	8001238 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8001008:	f000 f8da 	bl	80011c0 <MX_TIM9_Init>
  MX_TIM2_Init();
 800100c:	f000 f884 	bl	8001118 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001010:	213c      	movs	r1, #60	@ 0x3c
 8001012:	4808      	ldr	r0, [pc, #32]	@ (8001034 <main+0x40>)
 8001014:	f001 fdc0 	bl	8002b98 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001018:	f002 fe3a 	bl	8003c90 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800101c:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <main+0x44>)
 800101e:	2100      	movs	r1, #0
 8001020:	4806      	ldr	r0, [pc, #24]	@ (800103c <main+0x48>)
 8001022:	f002 fe7f 	bl	8003d24 <osThreadNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <main+0x4c>)
 800102a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800102c:	f002 fe54 	bl	8003cd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <main+0x3c>
 8001034:	200001f4 	.word	0x200001f4
 8001038:	0800aee0 	.word	0x0800aee0
 800103c:	080013a5 	.word	0x080013a5
 8001040:	200002cc 	.word	0x200002cc

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	@ 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2230      	movs	r2, #48	@ 0x30
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f006 fb31 	bl	80076ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <SystemClock_Config+0xcc>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	4a27      	ldr	r2, [pc, #156]	@ (8001110 <SystemClock_Config+0xcc>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	@ 0x40
 8001078:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <SystemClock_Config+0xcc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <SystemClock_Config+0xd0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <SystemClock_Config+0xd0>)
 800108e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <SystemClock_Config+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a8:	2310      	movs	r3, #16
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2302      	movs	r3, #2
 80010ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010b4:	2310      	movs	r3, #16
 80010b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010be:	2304      	movs	r3, #4
 80010c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c2:	2304      	movs	r3, #4
 80010c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 ff42 	bl	8001f54 <HAL_RCC_OscConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010d6:	f000 f9c3 	bl	8001460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010da:	230f      	movs	r3, #15
 80010dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010de:	2302      	movs	r3, #2
 80010e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2102      	movs	r1, #2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 f9a4 	bl	8002444 <HAL_RCC_ClockConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001102:	f000 f9ad 	bl	8001460 <Error_Handler>
  }
}
 8001106:	bf00      	nop
 8001108:	3750      	adds	r7, #80	@ 0x50
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40007000 	.word	0x40007000

08001118 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	@ 0x30
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2224      	movs	r2, #36	@ 0x24
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f006 fac7 	bl	80076ba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001134:	4b21      	ldr	r3, [pc, #132]	@ (80011bc <MX_TIM2_Init+0xa4>)
 8001136:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800113a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800113c:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <MX_TIM2_Init+0xa4>)
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b1e      	ldr	r3, [pc, #120]	@ (80011bc <MX_TIM2_Init+0xa4>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001148:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <MX_TIM2_Init+0xa4>)
 800114a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800114e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_TIM2_Init+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001156:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <MX_TIM2_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800115c:	2303      	movs	r3, #3
 800115e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001160:	2302      	movs	r3, #2
 8001162:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001164:	2301      	movs	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001170:	2302      	movs	r3, #2
 8001172:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001174:	2301      	movs	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4619      	mov	r1, r3
 8001186:	480d      	ldr	r0, [pc, #52]	@ (80011bc <MX_TIM2_Init+0xa4>)
 8001188:	f001 fc60 	bl	8002a4c <HAL_TIM_Encoder_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001192:	f000 f965 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001196:	2320      	movs	r3, #32
 8001198:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	@ (80011bc <MX_TIM2_Init+0xa4>)
 80011a4:	f002 f8a2 	bl	80032ec <HAL_TIMEx_MasterConfigSynchronization>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011ae:	f000 f957 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3730      	adds	r7, #48	@ 0x30
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001f4 	.word	0x200001f4

080011c0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <MX_TIM9_Init+0x74>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80011e6:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ec:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80011fa:	480d      	ldr	r0, [pc, #52]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011fc:	f001 fb74 	bl	80028e8 <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001206:	f000 f92b 	bl	8001460 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	@ (8001230 <MX_TIM9_Init+0x70>)
 8001218:	f001 fe3c 	bl	8002e94 <HAL_TIM_SlaveConfigSynchro>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM9_Init+0x66>
  {
    Error_Handler();
 8001222:	f000 f91d 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000023c 	.word	0x2000023c
 8001234:	40014000 	.word	0x40014000

08001238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <MX_USART2_UART_Init+0x50>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001270:	f002 f8be 	bl	80033f0 <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800127a:	f000 f8f1 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000284 	.word	0x20000284
 8001288:	40004400 	.word	0x40004400

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b39      	ldr	r3, [pc, #228]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b35      	ldr	r3, [pc, #212]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a34      	ldr	r2, [pc, #208]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b32      	ldr	r3, [pc, #200]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b2e      	ldr	r3, [pc, #184]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a26      	ldr	r2, [pc, #152]	@ (8001398 <MX_GPIO_Init+0x10c>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <MX_GPIO_Init+0x10c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2120      	movs	r1, #32
 8001316:	4821      	ldr	r0, [pc, #132]	@ (800139c <MX_GPIO_Init+0x110>)
 8001318:	f000 fdde 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800131c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001322:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	481b      	ldr	r0, [pc, #108]	@ (80013a0 <MX_GPIO_Init+0x114>)
 8001334:	f000 fc4c 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001338:	2320      	movs	r3, #32
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4813      	ldr	r0, [pc, #76]	@ (800139c <MX_GPIO_Init+0x110>)
 8001350:	f000 fc3e 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_Z_Pin */
  GPIO_InitStruct.Pin = ENC_Z_Pin;
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001358:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_Z_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <MX_GPIO_Init+0x114>)
 800136a:	f000 fc31 	bl	8001bd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2106      	movs	r1, #6
 8001372:	2017      	movs	r0, #23
 8001374:	f000 fc02 	bl	8001b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001378:	2017      	movs	r0, #23
 800137a:	f000 fc1b 	bl	8001bb4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2106      	movs	r1, #6
 8001382:	2028      	movs	r0, #40	@ 0x28
 8001384:	f000 fbfa 	bl	8001b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001388:	2028      	movs	r0, #40	@ 0x28
 800138a:	f000 fc13 	bl	8001bb4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	@ 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020800 	.word	0x40020800

080013a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint32_t raw_cnt = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
	uint32_t prv_cnt = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
	int32_t delta = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
	//uint32_t tracking[10];
	int32_t full_cnt = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
	uint8_t p_cnt = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	74fb      	strb	r3, [r7, #19]

  for(;;)
  {

	  raw_cnt = TIM2->CNT;
 80013c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	60fb      	str	r3, [r7, #12]

	  delta = (int32_t)(raw_cnt - prv_cnt);
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	61bb      	str	r3, [r7, #24]
	  //we should be able to assume that 1500 counts in 10ms can
	  //only happen if there is a zero crossing.
	  if(delta < -1500) delta += 2000;
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	4a16      	ldr	r2, [pc, #88]	@ (800142c <StartDefaultTask+0x88>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	da03      	bge.n	80013e0 <StartDefaultTask+0x3c>
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80013de:	61bb      	str	r3, [r7, #24]
	  if(delta > 1500) delta -= 2000;
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80013e6:	4293      	cmp	r3, r2
 80013e8:	dd03      	ble.n	80013f2 <StartDefaultTask+0x4e>
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80013f0:	61bb      	str	r3, [r7, #24]

	  full_cnt += delta;
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	4413      	add	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]

	  if(p_cnt++ > 10)
 80013fa:	7cfb      	ldrb	r3, [r7, #19]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	74fa      	strb	r2, [r7, #19]
 8001400:	2b0a      	cmp	r3, #10
 8001402:	d90d      	bls.n	8001420 <StartDefaultTask+0x7c>
	  {
	      sprintf((char *) MSG, "Encoder Raw Counts = %lu, Encoder Tracking = %ld\r\n", (long) raw_cnt, (long) full_cnt);
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	4909      	ldr	r1, [pc, #36]	@ (8001430 <StartDefaultTask+0x8c>)
 800140a:	480a      	ldr	r0, [pc, #40]	@ (8001434 <StartDefaultTask+0x90>)
 800140c:	f006 f8f2 	bl	80075f4 <siprintf>
	      HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8001410:	2364      	movs	r3, #100	@ 0x64
 8001412:	223c      	movs	r2, #60	@ 0x3c
 8001414:	4907      	ldr	r1, [pc, #28]	@ (8001434 <StartDefaultTask+0x90>)
 8001416:	4808      	ldr	r0, [pc, #32]	@ (8001438 <StartDefaultTask+0x94>)
 8001418:	f002 f83a 	bl	8003490 <HAL_UART_Transmit>
	      p_cnt = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	74fb      	strb	r3, [r7, #19]
	  }
	  prv_cnt = raw_cnt;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	61fb      	str	r3, [r7, #28]
      osDelay(10);
 8001424:	200a      	movs	r0, #10
 8001426:	f002 fd0f 	bl	8003e48 <osDelay>
	  raw_cnt = TIM2->CNT;
 800142a:	e7c9      	b.n	80013c0 <StartDefaultTask+0x1c>
 800142c:	fffffa24 	.word	0xfffffa24
 8001430:	0800ae94 	.word	0x0800ae94
 8001434:	200002d0 	.word	0x200002d0
 8001438:	20000284 	.word	0x20000284

0800143c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a04      	ldr	r2, [pc, #16]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800144e:	f000 fabd 	bl	80019cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40000c00 	.word	0x40000c00

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <Error_Handler+0x8>

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_MspInit+0x54>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	4a11      	ldr	r2, [pc, #68]	@ (80014c0 <HAL_MspInit+0x54>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001480:	6453      	str	r3, [r2, #68]	@ 0x44
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <HAL_MspInit+0x54>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <HAL_MspInit+0x54>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <HAL_MspInit+0x54>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	@ 0x40
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_MspInit+0x54>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	210f      	movs	r1, #15
 80014ae:	f06f 0001 	mvn.w	r0, #1
 80014b2:	f000 fb63 	bl	8001b7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800

080014c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e4:	d12b      	bne.n	800153e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <HAL_TIM_Encoder_MspInit+0x84>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	4a16      	ldr	r2, [pc, #88]	@ (8001548 <HAL_TIM_Encoder_MspInit+0x84>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_TIM_Encoder_MspInit+0x84>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <HAL_TIM_Encoder_MspInit+0x84>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a0f      	ldr	r2, [pc, #60]	@ (8001548 <HAL_TIM_Encoder_MspInit+0x84>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_TIM_Encoder_MspInit+0x84>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 800151e:	2303      	movs	r3, #3
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001526:	2302      	movs	r3, #2
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800152e:	2301      	movs	r3, #1
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4804      	ldr	r0, [pc, #16]	@ (800154c <HAL_TIM_Encoder_MspInit+0x88>)
 800153a:	f000 fb49 	bl	8001bd0 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	@ 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000

08001550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0b      	ldr	r2, [pc, #44]	@ (800158c <HAL_TIM_Base_MspInit+0x3c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d10d      	bne.n	800157e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_TIM_Base_MspInit+0x40>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <HAL_TIM_Base_MspInit+0x40>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001570:	6453      	str	r3, [r2, #68]	@ 0x44
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <HAL_TIM_Base_MspInit+0x40>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40014000 	.word	0x40014000
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	@ 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a19      	ldr	r2, [pc, #100]	@ (8001618 <HAL_UART_MspInit+0x84>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12b      	bne.n	800160e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b18      	ldr	r3, [pc, #96]	@ (800161c <HAL_UART_MspInit+0x88>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	4a17      	ldr	r2, [pc, #92]	@ (800161c <HAL_UART_MspInit+0x88>)
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_UART_MspInit+0x88>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <HAL_UART_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a10      	ldr	r2, [pc, #64]	@ (800161c <HAL_UART_MspInit+0x88>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <HAL_UART_MspInit+0x88>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015ee:	230c      	movs	r3, #12
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015fe:	2307      	movs	r3, #7
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <HAL_UART_MspInit+0x8c>)
 800160a:	f000 fae1 	bl	8001bd0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	@ 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40004400 	.word	0x40004400
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000

08001624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	@ 0x38
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4b33      	ldr	r3, [pc, #204]	@ (8001708 <HAL_InitTick+0xe4>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	4a32      	ldr	r2, [pc, #200]	@ (8001708 <HAL_InitTick+0xe4>)
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	6413      	str	r3, [r2, #64]	@ 0x40
 8001644:	4b30      	ldr	r3, [pc, #192]	@ (8001708 <HAL_InitTick+0xe4>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001650:	f107 0210 	add.w	r2, r7, #16
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f001 f912 	bl	8002884 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001666:	2b00      	cmp	r3, #0
 8001668:	d103      	bne.n	8001672 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800166a:	f001 f8e3 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 800166e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001670:	e004      	b.n	800167c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001672:	f001 f8df 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 8001676:	4603      	mov	r3, r0
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800167c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800167e:	4a23      	ldr	r2, [pc, #140]	@ (800170c <HAL_InitTick+0xe8>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	0c9b      	lsrs	r3, r3, #18
 8001686:	3b01      	subs	r3, #1
 8001688:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800168a:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <HAL_InitTick+0xec>)
 800168c:	4a21      	ldr	r2, [pc, #132]	@ (8001714 <HAL_InitTick+0xf0>)
 800168e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001690:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <HAL_InitTick+0xec>)
 8001692:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001696:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001698:	4a1d      	ldr	r2, [pc, #116]	@ (8001710 <HAL_InitTick+0xec>)
 800169a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800169e:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <HAL_InitTick+0xec>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <HAL_InitTick+0xec>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016aa:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <HAL_InitTick+0xec>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80016b0:	4817      	ldr	r0, [pc, #92]	@ (8001710 <HAL_InitTick+0xec>)
 80016b2:	f001 f919 	bl	80028e8 <HAL_TIM_Base_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d11b      	bne.n	80016fc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80016c4:	4812      	ldr	r0, [pc, #72]	@ (8001710 <HAL_InitTick+0xec>)
 80016c6:	f001 f95f 	bl	8002988 <HAL_TIM_Base_Start_IT>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d111      	bne.n	80016fc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80016d8:	2032      	movs	r0, #50	@ 0x32
 80016da:	f000 fa6b 	bl	8001bb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d808      	bhi.n	80016f6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	2032      	movs	r0, #50	@ 0x32
 80016ea:	f000 fa47 	bl	8001b7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <HAL_InitTick+0xf4>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e002      	b.n	80016fc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001700:	4618      	mov	r0, r3
 8001702:	3738      	adds	r7, #56	@ 0x38
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	431bde83 	.word	0x431bde83
 8001710:	2000030c 	.word	0x2000030c
 8001714:	40000c00 	.word	0x40000c00
 8001718:	20000004 	.word	0x20000004

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <NMI_Handler+0x4>

08001724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <MemManage_Handler+0x4>

08001734 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <UsageFault_Handler+0x4>

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_Z_Pin);
 8001756:	2080      	movs	r0, #128	@ 0x80
 8001758:	f000 fbd8 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001764:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001768:	f000 fbd0 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <TIM5_IRQHandler+0x10>)
 8001776:	f001 fa9d 	bl	8002cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000030c 	.word	0x2000030c

08001784 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return 1;
 8001788:	2301      	movs	r3, #1
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_kill>:

int _kill(int pid, int sig)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800179e:	f005 ffdf 	bl	8007760 <__errno>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2216      	movs	r2, #22
 80017a6:	601a      	str	r2, [r3, #0]
  return -1;
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_exit>:

void _exit (int status)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ffe7 	bl	8001794 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017c6:	bf00      	nop
 80017c8:	e7fd      	b.n	80017c6 <_exit+0x12>

080017ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e00a      	b.n	80017f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017dc:	f3af 8000 	nop.w
 80017e0:	4601      	mov	r1, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	60ba      	str	r2, [r7, #8]
 80017e8:	b2ca      	uxtb	r2, r1
 80017ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	dbf0      	blt.n	80017dc <_read+0x12>
  }

  return len;
 80017fa:	687b      	ldr	r3, [r7, #4]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e009      	b.n	800182a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	60ba      	str	r2, [r7, #8]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	429a      	cmp	r2, r3
 8001830:	dbf1      	blt.n	8001816 <_write+0x12>
  }
  return len;
 8001832:	687b      	ldr	r3, [r7, #4]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_close>:

int _close(int file)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001864:	605a      	str	r2, [r3, #4]
  return 0;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_isatty>:

int _isatty(int file)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800187c:	2301      	movs	r3, #1
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800188a:	b480      	push	{r7}
 800188c:	b085      	sub	sp, #20
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ac:	4a14      	ldr	r2, [pc, #80]	@ (8001900 <_sbrk+0x5c>)
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <_sbrk+0x60>)
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c0:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <_sbrk+0x64>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	@ (800190c <_sbrk+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d207      	bcs.n	80018e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d4:	f005 ff44 	bl	8007760 <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	220c      	movs	r2, #12
 80018dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	e009      	b.n	80018f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e4:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ea:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <_sbrk+0x64>)
 80018f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20020000 	.word	0x20020000
 8001904:	00000400 	.word	0x00000400
 8001908:	20000354 	.word	0x20000354
 800190c:	20004df8 	.word	0x20004df8

08001910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <SystemInit+0x20>)
 8001916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800191a:	4a05      	ldr	r2, [pc, #20]	@ (8001930 <SystemInit+0x20>)
 800191c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800196c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001938:	f7ff ffea 	bl	8001910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800193c:	480c      	ldr	r0, [pc, #48]	@ (8001970 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800193e:	490d      	ldr	r1, [pc, #52]	@ (8001974 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001940:	4a0d      	ldr	r2, [pc, #52]	@ (8001978 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001944:	e002      	b.n	800194c <LoopCopyDataInit>

08001946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194a:	3304      	adds	r3, #4

0800194c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800194c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001950:	d3f9      	bcc.n	8001946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001952:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001954:	4c0a      	ldr	r4, [pc, #40]	@ (8001980 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001958:	e001      	b.n	800195e <LoopFillZerobss>

0800195a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800195c:	3204      	adds	r2, #4

0800195e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001960:	d3fb      	bcc.n	800195a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001962:	f005 ff03 	bl	800776c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001966:	f7ff fb45 	bl	8000ff4 <main>
  bx  lr    
 800196a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800196c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001978:	0800b358 	.word	0x0800b358
  ldr r2, =_sbss
 800197c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001980:	20004df8 	.word	0x20004df8

08001984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC_IRQHandler>
	...

08001988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800198c:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0d      	ldr	r2, [pc, #52]	@ (80019c8 <HAL_Init+0x40>)
 8001992:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001998:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <HAL_Init+0x40>)
 800199e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a4:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a07      	ldr	r2, [pc, #28]	@ (80019c8 <HAL_Init+0x40>)
 80019aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 f8d8 	bl	8001b66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b6:	200f      	movs	r0, #15
 80019b8:	f7ff fe34 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019bc:	f7ff fd56 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023c00 	.word	0x40023c00

080019cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x20>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_IncTick+0x24>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <HAL_IncTick+0x24>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000358 	.word	0x20000358

080019f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_GetTick+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000358 	.word	0x20000358

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0b      	blt.n	8001a9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4907      	ldr	r1, [pc, #28]	@ (8001aa8 <__NVIC_EnableIRQ+0x38>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100

08001aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db0a      	blt.n	8001ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	490c      	ldr	r1, [pc, #48]	@ (8001af8 <__NVIC_SetPriority+0x4c>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad4:	e00a      	b.n	8001aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4908      	ldr	r1, [pc, #32]	@ (8001afc <__NVIC_SetPriority+0x50>)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	3b04      	subs	r3, #4
 8001ae4:	0112      	lsls	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	761a      	strb	r2, [r3, #24]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	@ 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f1c3 0307 	rsb	r3, r3, #7
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	bf28      	it	cs
 8001b1e:	2304      	movcs	r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3304      	adds	r3, #4
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d902      	bls.n	8001b30 <NVIC_EncodePriority+0x30>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3b03      	subs	r3, #3
 8001b2e:	e000      	b.n	8001b32 <NVIC_EncodePriority+0x32>
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43d9      	mvns	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	4313      	orrs	r3, r2
         );
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	@ 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ff4c 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8e:	f7ff ff61 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001b92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	68b9      	ldr	r1, [r7, #8]
 8001b98:	6978      	ldr	r0, [r7, #20]
 8001b9a:	f7ff ffb1 	bl	8001b00 <NVIC_EncodePriority>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff80 	bl	8001aac <__NVIC_SetPriority>
}
 8001bac:	bf00      	nop
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff54 	bl	8001a70 <__NVIC_EnableIRQ>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	@ 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	e159      	b.n	8001ea0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bec:	2201      	movs	r2, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	f040 8148 	bne.w	8001e9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d005      	beq.n	8001c22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d130      	bne.n	8001c84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c58:	2201      	movs	r2, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 0201 	and.w	r2, r3, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d017      	beq.n	8001cc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d123      	bne.n	8001d14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	08da      	lsrs	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3208      	adds	r2, #8
 8001cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	08da      	lsrs	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3208      	adds	r2, #8
 8001d0e:	69b9      	ldr	r1, [r7, #24]
 8001d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0203 	and.w	r2, r3, #3
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80a2 	beq.w	8001e9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b57      	ldr	r3, [pc, #348]	@ (8001eb8 <HAL_GPIO_Init+0x2e8>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	4a56      	ldr	r2, [pc, #344]	@ (8001eb8 <HAL_GPIO_Init+0x2e8>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d66:	4b54      	ldr	r3, [pc, #336]	@ (8001eb8 <HAL_GPIO_Init+0x2e8>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d72:	4a52      	ldr	r2, [pc, #328]	@ (8001ebc <HAL_GPIO_Init+0x2ec>)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a49      	ldr	r2, [pc, #292]	@ (8001ec0 <HAL_GPIO_Init+0x2f0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d019      	beq.n	8001dd2 <HAL_GPIO_Init+0x202>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a48      	ldr	r2, [pc, #288]	@ (8001ec4 <HAL_GPIO_Init+0x2f4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_GPIO_Init+0x1fe>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a47      	ldr	r2, [pc, #284]	@ (8001ec8 <HAL_GPIO_Init+0x2f8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00d      	beq.n	8001dca <HAL_GPIO_Init+0x1fa>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a46      	ldr	r2, [pc, #280]	@ (8001ecc <HAL_GPIO_Init+0x2fc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d007      	beq.n	8001dc6 <HAL_GPIO_Init+0x1f6>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a45      	ldr	r2, [pc, #276]	@ (8001ed0 <HAL_GPIO_Init+0x300>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d101      	bne.n	8001dc2 <HAL_GPIO_Init+0x1f2>
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	e008      	b.n	8001dd4 <HAL_GPIO_Init+0x204>
 8001dc2:	2307      	movs	r3, #7
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x204>
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e004      	b.n	8001dd4 <HAL_GPIO_Init+0x204>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_Init+0x204>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_Init+0x204>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	f002 0203 	and.w	r2, r2, #3
 8001dda:	0092      	lsls	r2, r2, #2
 8001ddc:	4093      	lsls	r3, r2
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de4:	4935      	ldr	r1, [pc, #212]	@ (8001ebc <HAL_GPIO_Init+0x2ec>)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df2:	4b38      	ldr	r3, [pc, #224]	@ (8001ed4 <HAL_GPIO_Init+0x304>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e16:	4a2f      	ldr	r2, [pc, #188]	@ (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e40:	4a24      	ldr	r2, [pc, #144]	@ (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e46:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e70:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e94:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2b0f      	cmp	r3, #15
 8001ea4:	f67f aea2 	bls.w	8001bec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3724      	adds	r7, #36	@ 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40013800 	.word	0x40013800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020c00 	.word	0x40020c00
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40013c00 	.word	0x40013c00

08001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee8:	787b      	ldrb	r3, [r7, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef4:	e003      	b.n	8001efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	041a      	lsls	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	619a      	str	r2, [r3, #24]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f16:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f22:	4a05      	ldr	r2, [pc, #20]	@ (8001f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f806 	bl	8001f3c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40013c00 	.word	0x40013c00

08001f3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e267      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d075      	beq.n	800205e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f72:	4b88      	ldr	r3, [pc, #544]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d00c      	beq.n	8001f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7e:	4b85      	ldr	r3, [pc, #532]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d112      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8a:	4b82      	ldr	r3, [pc, #520]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f96:	d10b      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	4b7e      	ldr	r3, [pc, #504]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d05b      	beq.n	800205c <HAL_RCC_OscConfig+0x108>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d157      	bne.n	800205c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e242      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb8:	d106      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x74>
 8001fba:	4b76      	ldr	r3, [pc, #472]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a75      	ldr	r2, [pc, #468]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e01d      	b.n	8002004 <HAL_RCC_OscConfig+0xb0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x98>
 8001fd2:	4b70      	ldr	r3, [pc, #448]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a6f      	ldr	r2, [pc, #444]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b6d      	ldr	r3, [pc, #436]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6c      	ldr	r2, [pc, #432]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0xb0>
 8001fec:	4b69      	ldr	r3, [pc, #420]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a68      	ldr	r2, [pc, #416]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b66      	ldr	r3, [pc, #408]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a65      	ldr	r2, [pc, #404]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff fcf2 	bl	80019f4 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff fcee 	bl	80019f4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	@ 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e207      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b5b      	ldr	r3, [pc, #364]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0xc0>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fcde 	bl	80019f4 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff fcda 	bl	80019f4 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	@ 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1f3      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	4b51      	ldr	r3, [pc, #324]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0xe8>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d063      	beq.n	8002132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800206a:	4b4a      	ldr	r3, [pc, #296]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002076:	4b47      	ldr	r3, [pc, #284]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800207e:	2b08      	cmp	r3, #8
 8002080:	d11c      	bne.n	80020bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002082:	4b44      	ldr	r3, [pc, #272]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d116      	bne.n	80020bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	4b41      	ldr	r3, [pc, #260]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x152>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e1c7      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4937      	ldr	r1, [pc, #220]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	e03a      	b.n	8002132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c4:	4b34      	ldr	r3, [pc, #208]	@ (8002198 <HAL_RCC_OscConfig+0x244>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7ff fc93 	bl	80019f4 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d2:	f7ff fc8f 	bl	80019f4 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e1a8      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4925      	ldr	r1, [pc, #148]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002106:	4b24      	ldr	r3, [pc, #144]	@ (8002198 <HAL_RCC_OscConfig+0x244>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7ff fc72 	bl	80019f4 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002114:	f7ff fc6e 	bl	80019f4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e187      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d036      	beq.n	80021ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d016      	beq.n	8002174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002146:	4b15      	ldr	r3, [pc, #84]	@ (800219c <HAL_RCC_OscConfig+0x248>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7ff fc52 	bl	80019f4 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002154:	f7ff fc4e 	bl	80019f4 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e167      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x200>
 8002172:	e01b      	b.n	80021ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002174:	4b09      	ldr	r3, [pc, #36]	@ (800219c <HAL_RCC_OscConfig+0x248>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7ff fc3b 	bl	80019f4 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002180:	e00e      	b.n	80021a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002182:	f7ff fc37 	bl	80019f4 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d907      	bls.n	80021a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e150      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
 8002194:	40023800 	.word	0x40023800
 8002198:	42470000 	.word	0x42470000
 800219c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	4b88      	ldr	r3, [pc, #544]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ea      	bne.n	8002182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8097 	beq.w	80022e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021be:	4b81      	ldr	r3, [pc, #516]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10f      	bne.n	80021ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	4b7d      	ldr	r3, [pc, #500]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	4a7c      	ldr	r2, [pc, #496]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021da:	4b7a      	ldr	r3, [pc, #488]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e6:	2301      	movs	r3, #1
 80021e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	4b77      	ldr	r3, [pc, #476]	@ (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f6:	4b74      	ldr	r3, [pc, #464]	@ (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a73      	ldr	r2, [pc, #460]	@ (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002202:	f7ff fbf7 	bl	80019f4 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220a:	f7ff fbf3 	bl	80019f4 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e10c      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	4b6a      	ldr	r3, [pc, #424]	@ (80023c8 <HAL_RCC_OscConfig+0x474>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x2ea>
 8002230:	4b64      	ldr	r3, [pc, #400]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002234:	4a63      	ldr	r2, [pc, #396]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6713      	str	r3, [r2, #112]	@ 0x70
 800223c:	e01c      	b.n	8002278 <HAL_RCC_OscConfig+0x324>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b05      	cmp	r3, #5
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x30c>
 8002246:	4b5f      	ldr	r3, [pc, #380]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224a:	4a5e      	ldr	r2, [pc, #376]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	6713      	str	r3, [r2, #112]	@ 0x70
 8002252:	4b5c      	ldr	r3, [pc, #368]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002256:	4a5b      	ldr	r2, [pc, #364]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6713      	str	r3, [r2, #112]	@ 0x70
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0x324>
 8002260:	4b58      	ldr	r3, [pc, #352]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002264:	4a57      	ldr	r2, [pc, #348]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	@ 0x70
 800226c:	4b55      	ldr	r3, [pc, #340]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002270:	4a54      	ldr	r2, [pc, #336]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002272:	f023 0304 	bic.w	r3, r3, #4
 8002276:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7ff fbb8 	bl	80019f4 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	e00a      	b.n	800229e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7ff fbb4 	bl	80019f4 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e0cb      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229e:	4b49      	ldr	r3, [pc, #292]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0ee      	beq.n	8002288 <HAL_RCC_OscConfig+0x334>
 80022aa:	e014      	b.n	80022d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7ff fba2 	bl	80019f4 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b2:	e00a      	b.n	80022ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7ff fb9e 	bl	80019f4 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0b5      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ca:	4b3e      	ldr	r3, [pc, #248]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ee      	bne.n	80022b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d6:	7dfb      	ldrb	r3, [r7, #23]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022dc:	4b39      	ldr	r3, [pc, #228]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	4a38      	ldr	r2, [pc, #224]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a1 	beq.w	8002434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022f2:	4b34      	ldr	r3, [pc, #208]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d05c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d141      	bne.n	800238a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b31      	ldr	r3, [pc, #196]	@ (80023cc <HAL_RCC_OscConfig+0x478>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff fb72 	bl	80019f4 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002314:	f7ff fb6e 	bl	80019f4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e087      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	4b27      	ldr	r3, [pc, #156]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	019b      	lsls	r3, r3, #6
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	3b01      	subs	r3, #1
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	061b      	lsls	r3, r3, #24
 8002356:	491b      	ldr	r1, [pc, #108]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235c:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <HAL_RCC_OscConfig+0x478>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7ff fb47 	bl	80019f4 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236a:	f7ff fb43 	bl	80019f4 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e05c      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237c:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x416>
 8002388:	e054      	b.n	8002434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <HAL_RCC_OscConfig+0x478>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fb30 	bl	80019f4 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002398:	f7ff fb2c 	bl	80019f4 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e045      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x444>
 80023b6:	e03d      	b.n	8002434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e038      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40007000 	.word	0x40007000
 80023cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_RCC_OscConfig+0x4ec>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d028      	beq.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d121      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d11a      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002408:	4293      	cmp	r3, r2
 800240a:	d111      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	085b      	lsrs	r3, r3, #1
 8002418:	3b01      	subs	r3, #1
 800241a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d107      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0cc      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002458:	4b68      	ldr	r3, [pc, #416]	@ (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d90c      	bls.n	8002480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b65      	ldr	r3, [pc, #404]	@ (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b63      	ldr	r3, [pc, #396]	@ (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0b8      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d020      	beq.n	80024ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002498:	4b59      	ldr	r3, [pc, #356]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a58      	ldr	r2, [pc, #352]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b0:	4b53      	ldr	r3, [pc, #332]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a52      	ldr	r2, [pc, #328]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024bc:	4b50      	ldr	r3, [pc, #320]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	494d      	ldr	r1, [pc, #308]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d044      	beq.n	8002564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b47      	ldr	r3, [pc, #284]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d119      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e07f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	4b3f      	ldr	r3, [pc, #252]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e06f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002512:	4b3b      	ldr	r3, [pc, #236]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e067      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002522:	4b37      	ldr	r3, [pc, #220]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f023 0203 	bic.w	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4934      	ldr	r1, [pc, #208]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002534:	f7ff fa5e 	bl	80019f4 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	e00a      	b.n	8002552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253c:	f7ff fa5a 	bl	80019f4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e04f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	4b2b      	ldr	r3, [pc, #172]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 020c 	and.w	r2, r3, #12
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	429a      	cmp	r2, r3
 8002562:	d1eb      	bne.n	800253c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002564:	4b25      	ldr	r3, [pc, #148]	@ (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d20c      	bcs.n	800258c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b22      	ldr	r3, [pc, #136]	@ (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b20      	ldr	r3, [pc, #128]	@ (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e032      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002598:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4916      	ldr	r1, [pc, #88]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b6:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	490e      	ldr	r1, [pc, #56]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ca:	f000 f821 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	490a      	ldr	r1, [pc, #40]	@ (8002604 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	5ccb      	ldrb	r3, [r1, r3]
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	4a09      	ldr	r2, [pc, #36]	@ (8002608 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f81a 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023c00 	.word	0x40023c00
 8002600:	40023800 	.word	0x40023800
 8002604:	0800af04 	.word	0x0800af04
 8002608:	20000000 	.word	0x20000000
 800260c:	20000004 	.word	0x20000004

08002610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002614:	b094      	sub	sp, #80	@ 0x50
 8002616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	647b      	str	r3, [r7, #68]	@ 0x44
 800261c:	2300      	movs	r3, #0
 800261e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002620:	2300      	movs	r3, #0
 8002622:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002628:	4b79      	ldr	r3, [pc, #484]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b08      	cmp	r3, #8
 8002632:	d00d      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x40>
 8002634:	2b08      	cmp	r3, #8
 8002636:	f200 80e1 	bhi.w	80027fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x34>
 800263e:	2b04      	cmp	r3, #4
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x3a>
 8002642:	e0db      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b73      	ldr	r3, [pc, #460]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x204>)
 8002646:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002648:	e0db      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800264a:	4b73      	ldr	r3, [pc, #460]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x208>)
 800264c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800264e:	e0d8      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002650:	4b6f      	ldr	r3, [pc, #444]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002658:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800265a:	4b6d      	ldr	r3, [pc, #436]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d063      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002666:	4b6a      	ldr	r3, [pc, #424]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	099b      	lsrs	r3, r3, #6
 800266c:	2200      	movs	r2, #0
 800266e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002670:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002678:	633b      	str	r3, [r7, #48]	@ 0x30
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	@ 0x34
 800267e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002682:	4622      	mov	r2, r4
 8002684:	462b      	mov	r3, r5
 8002686:	f04f 0000 	mov.w	r0, #0
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	0159      	lsls	r1, r3, #5
 8002690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002694:	0150      	lsls	r0, r2, #5
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4621      	mov	r1, r4
 800269c:	1a51      	subs	r1, r2, r1
 800269e:	6139      	str	r1, [r7, #16]
 80026a0:	4629      	mov	r1, r5
 80026a2:	eb63 0301 	sbc.w	r3, r3, r1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b4:	4659      	mov	r1, fp
 80026b6:	018b      	lsls	r3, r1, #6
 80026b8:	4651      	mov	r1, sl
 80026ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026be:	4651      	mov	r1, sl
 80026c0:	018a      	lsls	r2, r1, #6
 80026c2:	4651      	mov	r1, sl
 80026c4:	ebb2 0801 	subs.w	r8, r2, r1
 80026c8:	4659      	mov	r1, fp
 80026ca:	eb63 0901 	sbc.w	r9, r3, r1
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e2:	4690      	mov	r8, r2
 80026e4:	4699      	mov	r9, r3
 80026e6:	4623      	mov	r3, r4
 80026e8:	eb18 0303 	adds.w	r3, r8, r3
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	462b      	mov	r3, r5
 80026f0:	eb49 0303 	adc.w	r3, r9, r3
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002702:	4629      	mov	r1, r5
 8002704:	024b      	lsls	r3, r1, #9
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800270c:	4621      	mov	r1, r4
 800270e:	024a      	lsls	r2, r1, #9
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002716:	2200      	movs	r2, #0
 8002718:	62bb      	str	r3, [r7, #40]	@ 0x28
 800271a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800271c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002720:	f7fe faba 	bl	8000c98 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4613      	mov	r3, r2
 800272a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800272c:	e058      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272e:	4b38      	ldr	r3, [pc, #224]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	099b      	lsrs	r3, r3, #6
 8002734:	2200      	movs	r2, #0
 8002736:	4618      	mov	r0, r3
 8002738:	4611      	mov	r1, r2
 800273a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
 8002744:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002748:	4642      	mov	r2, r8
 800274a:	464b      	mov	r3, r9
 800274c:	f04f 0000 	mov.w	r0, #0
 8002750:	f04f 0100 	mov.w	r1, #0
 8002754:	0159      	lsls	r1, r3, #5
 8002756:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275a:	0150      	lsls	r0, r2, #5
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4641      	mov	r1, r8
 8002762:	ebb2 0a01 	subs.w	sl, r2, r1
 8002766:	4649      	mov	r1, r9
 8002768:	eb63 0b01 	sbc.w	fp, r3, r1
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002778:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800277c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002780:	ebb2 040a 	subs.w	r4, r2, sl
 8002784:	eb63 050b 	sbc.w	r5, r3, fp
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	00eb      	lsls	r3, r5, #3
 8002792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002796:	00e2      	lsls	r2, r4, #3
 8002798:	4614      	mov	r4, r2
 800279a:	461d      	mov	r5, r3
 800279c:	4643      	mov	r3, r8
 800279e:	18e3      	adds	r3, r4, r3
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	464b      	mov	r3, r9
 80027a4:	eb45 0303 	adc.w	r3, r5, r3
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027b6:	4629      	mov	r1, r5
 80027b8:	028b      	lsls	r3, r1, #10
 80027ba:	4621      	mov	r1, r4
 80027bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027c0:	4621      	mov	r1, r4
 80027c2:	028a      	lsls	r2, r1, #10
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ca:	2200      	movs	r2, #0
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	61fa      	str	r2, [r7, #28]
 80027d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d4:	f7fe fa60 	bl	8000c98 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4613      	mov	r3, r2
 80027de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	3301      	adds	r3, #1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80027f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027fa:	e002      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x204>)
 80027fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002804:	4618      	mov	r0, r3
 8002806:	3750      	adds	r7, #80	@ 0x50
 8002808:	46bd      	mov	sp, r7
 800280a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	00f42400 	.word	0x00f42400
 8002818:	007a1200 	.word	0x007a1200

0800281c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002820:	4b03      	ldr	r3, [pc, #12]	@ (8002830 <HAL_RCC_GetHCLKFreq+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000000 	.word	0x20000000

08002834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002838:	f7ff fff0 	bl	800281c <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0a9b      	lsrs	r3, r3, #10
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	@ (8002858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	0800af14 	.word	0x0800af14

0800285c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002860:	f7ff ffdc 	bl	800281c <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	@ (800287c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	0b5b      	lsrs	r3, r3, #13
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4903      	ldr	r1, [pc, #12]	@ (8002880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	0800af14 	.word	0x0800af14

08002884 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	220f      	movs	r2, #15
 8002892:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002894:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0203 	and.w	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028a0:	4b0f      	ldr	r3, [pc, #60]	@ (80028e0 <HAL_RCC_GetClockConfig+0x5c>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028ac:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <HAL_RCC_GetClockConfig+0x5c>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028b8:	4b09      	ldr	r3, [pc, #36]	@ (80028e0 <HAL_RCC_GetClockConfig+0x5c>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	08db      	lsrs	r3, r3, #3
 80028be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028c6:	4b07      	ldr	r3, [pc, #28]	@ (80028e4 <HAL_RCC_GetClockConfig+0x60>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0207 	and.w	r2, r3, #7
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	601a      	str	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40023c00 	.word	0x40023c00

080028e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e041      	b.n	800297e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe fe1e 	bl	8001550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	f000 fb1e 	bl	8002f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d001      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e044      	b.n	8002a2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a38 <HAL_TIM_Base_Start_IT+0xb0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d018      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ca:	d013      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a3c <HAL_TIM_Base_Start_IT+0xb4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00e      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a19      	ldr	r2, [pc, #100]	@ (8002a40 <HAL_TIM_Base_Start_IT+0xb8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d009      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a17      	ldr	r2, [pc, #92]	@ (8002a44 <HAL_TIM_Base_Start_IT+0xbc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a16      	ldr	r2, [pc, #88]	@ (8002a48 <HAL_TIM_Base_Start_IT+0xc0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d111      	bne.n	8002a18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b06      	cmp	r3, #6
 8002a04:	d010      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a16:	e007      	b.n	8002a28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40000800 	.word	0x40000800
 8002a44:	40000c00 	.word	0x40000c00
 8002a48:	40014000 	.word	0x40014000

08002a4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e097      	b.n	8002b90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7fe fd25 	bl	80014c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a90:	f023 0307 	bic.w	r3, r3, #7
 8002a94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f000 fa61 	bl	8002f68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002aec:	f023 030c 	bic.w	r3, r3, #12
 8002af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002af8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	011a      	lsls	r2, r3, #4
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	031b      	lsls	r3, r3, #12
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002b2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002b32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ba8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002bc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d110      	bne.n	8002bea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d102      	bne.n	8002bd4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bce:	7b7b      	ldrb	r3, [r7, #13]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d001      	beq.n	8002bd8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e069      	b.n	8002cac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002be8:	e031      	b.n	8002c4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d110      	bne.n	8002c12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bf0:	7bbb      	ldrb	r3, [r7, #14]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bf6:	7b3b      	ldrb	r3, [r7, #12]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d001      	beq.n	8002c00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e055      	b.n	8002cac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c10:	e01d      	b.n	8002c4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d108      	bne.n	8002c2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c18:	7bbb      	ldrb	r3, [r7, #14]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d105      	bne.n	8002c2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c1e:	7b7b      	ldrb	r3, [r7, #13]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d102      	bne.n	8002c2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c24:	7b3b      	ldrb	r3, [r7, #12]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d001      	beq.n	8002c2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e03e      	b.n	8002cac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_TIM_Encoder_Start+0xc4>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d008      	beq.n	8002c6c <HAL_TIM_Encoder_Start+0xd4>
 8002c5a:	e00f      	b.n	8002c7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2201      	movs	r2, #1
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fb1b 	bl	80032a0 <TIM_CCxChannelCmd>
      break;
 8002c6a:	e016      	b.n	8002c9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2201      	movs	r2, #1
 8002c72:	2104      	movs	r1, #4
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fb13 	bl	80032a0 <TIM_CCxChannelCmd>
      break;
 8002c7a:	e00e      	b.n	8002c9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2201      	movs	r2, #1
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fb0b 	bl	80032a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	2104      	movs	r1, #4
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fb04 	bl	80032a0 <TIM_CCxChannelCmd>
      break;
 8002c98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d020      	beq.n	8002d18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01b      	beq.n	8002d18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0202 	mvn.w	r2, #2
 8002ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f914 	bl	8002f2c <HAL_TIM_IC_CaptureCallback>
 8002d04:	e005      	b.n	8002d12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f906 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f917 	bl	8002f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d020      	beq.n	8002d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01b      	beq.n	8002d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0204 	mvn.w	r2, #4
 8002d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8ee 	bl	8002f2c <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8e0 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f8f1 	bl	8002f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d020      	beq.n	8002db0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01b      	beq.n	8002db0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0208 	mvn.w	r2, #8
 8002d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2204      	movs	r2, #4
 8002d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f8c8 	bl	8002f2c <HAL_TIM_IC_CaptureCallback>
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f8ba 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f8cb 	bl	8002f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d020      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01b      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0210 	mvn.w	r2, #16
 8002dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8a2 	bl	8002f2c <HAL_TIM_IC_CaptureCallback>
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f894 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f8a5 	bl	8002f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0201 	mvn.w	r2, #1
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe fb0e 	bl	800143c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00c      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 facc 	bl	80033dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00c      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f876 	bl	8002f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00c      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0220 	mvn.w	r2, #32
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fa9e 	bl	80033c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_TIM_SlaveConfigSynchro+0x18>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e031      	b.n	8002f10 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002ebc:	6839      	ldr	r1, [r7, #0]
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f8de 	bl	8003080 <TIM_SlaveTimer_SetConfig>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e018      	b.n	8002f10 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eec:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002efc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a3a      	ldr	r2, [pc, #232]	@ (8003064 <TIM_Base_SetConfig+0xfc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00f      	beq.n	8002fa0 <TIM_Base_SetConfig+0x38>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f86:	d00b      	beq.n	8002fa0 <TIM_Base_SetConfig+0x38>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a37      	ldr	r2, [pc, #220]	@ (8003068 <TIM_Base_SetConfig+0x100>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d007      	beq.n	8002fa0 <TIM_Base_SetConfig+0x38>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a36      	ldr	r2, [pc, #216]	@ (800306c <TIM_Base_SetConfig+0x104>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <TIM_Base_SetConfig+0x38>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a35      	ldr	r2, [pc, #212]	@ (8003070 <TIM_Base_SetConfig+0x108>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d108      	bne.n	8002fb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8003064 <TIM_Base_SetConfig+0xfc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01b      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc0:	d017      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a28      	ldr	r2, [pc, #160]	@ (8003068 <TIM_Base_SetConfig+0x100>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a27      	ldr	r2, [pc, #156]	@ (800306c <TIM_Base_SetConfig+0x104>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00f      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a26      	ldr	r2, [pc, #152]	@ (8003070 <TIM_Base_SetConfig+0x108>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00b      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a25      	ldr	r2, [pc, #148]	@ (8003074 <TIM_Base_SetConfig+0x10c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a24      	ldr	r2, [pc, #144]	@ (8003078 <TIM_Base_SetConfig+0x110>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <TIM_Base_SetConfig+0x8a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a23      	ldr	r2, [pc, #140]	@ (800307c <TIM_Base_SetConfig+0x114>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d108      	bne.n	8003004 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a0e      	ldr	r2, [pc, #56]	@ (8003064 <TIM_Base_SetConfig+0xfc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d103      	bne.n	8003038 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f023 0201 	bic.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	611a      	str	r2, [r3, #16]
  }
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40010000 	.word	0x40010000
 8003068:	40000400 	.word	0x40000400
 800306c:	40000800 	.word	0x40000800
 8003070:	40000c00 	.word	0x40000c00
 8003074:	40014000 	.word	0x40014000
 8003078:	40014400 	.word	0x40014400
 800307c:	40014800 	.word	0x40014800

08003080 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800309c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f023 0307 	bic.w	r3, r3, #7
 80030ae:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b70      	cmp	r3, #112	@ 0x70
 80030c8:	d01a      	beq.n	8003100 <TIM_SlaveTimer_SetConfig+0x80>
 80030ca:	2b70      	cmp	r3, #112	@ 0x70
 80030cc:	d860      	bhi.n	8003190 <TIM_SlaveTimer_SetConfig+0x110>
 80030ce:	2b60      	cmp	r3, #96	@ 0x60
 80030d0:	d054      	beq.n	800317c <TIM_SlaveTimer_SetConfig+0xfc>
 80030d2:	2b60      	cmp	r3, #96	@ 0x60
 80030d4:	d85c      	bhi.n	8003190 <TIM_SlaveTimer_SetConfig+0x110>
 80030d6:	2b50      	cmp	r3, #80	@ 0x50
 80030d8:	d046      	beq.n	8003168 <TIM_SlaveTimer_SetConfig+0xe8>
 80030da:	2b50      	cmp	r3, #80	@ 0x50
 80030dc:	d858      	bhi.n	8003190 <TIM_SlaveTimer_SetConfig+0x110>
 80030de:	2b40      	cmp	r3, #64	@ 0x40
 80030e0:	d019      	beq.n	8003116 <TIM_SlaveTimer_SetConfig+0x96>
 80030e2:	2b40      	cmp	r3, #64	@ 0x40
 80030e4:	d854      	bhi.n	8003190 <TIM_SlaveTimer_SetConfig+0x110>
 80030e6:	2b30      	cmp	r3, #48	@ 0x30
 80030e8:	d055      	beq.n	8003196 <TIM_SlaveTimer_SetConfig+0x116>
 80030ea:	2b30      	cmp	r3, #48	@ 0x30
 80030ec:	d850      	bhi.n	8003190 <TIM_SlaveTimer_SetConfig+0x110>
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d051      	beq.n	8003196 <TIM_SlaveTimer_SetConfig+0x116>
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d84c      	bhi.n	8003190 <TIM_SlaveTimer_SetConfig+0x110>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d04d      	beq.n	8003196 <TIM_SlaveTimer_SetConfig+0x116>
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d04b      	beq.n	8003196 <TIM_SlaveTimer_SetConfig+0x116>
 80030fe:	e047      	b.n	8003190 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003110:	f000 f8a6 	bl	8003260 <TIM_ETR_SetConfig>
      break;
 8003114:	e040      	b.n	8003198 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b05      	cmp	r3, #5
 800311c:	d101      	bne.n	8003122 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e03b      	b.n	800319a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6a1a      	ldr	r2, [r3, #32]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003148:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	4313      	orrs	r3, r2
 8003154:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	621a      	str	r2, [r3, #32]
      break;
 8003166:	e017      	b.n	8003198 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003174:	461a      	mov	r2, r3
 8003176:	f000 f814 	bl	80031a2 <TIM_TI1_ConfigInputStage>
      break;
 800317a:	e00d      	b.n	8003198 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003188:	461a      	mov	r2, r3
 800318a:	f000 f839 	bl	8003200 <TIM_TI2_ConfigInputStage>
      break;
 800318e:	e003      	b.n	8003198 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
      break;
 8003194:	e000      	b.n	8003198 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003196:	bf00      	nop
  }

  return status;
 8003198:	7dfb      	ldrb	r3, [r7, #23]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b087      	sub	sp, #28
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f023 0201 	bic.w	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f023 030a 	bic.w	r3, r3, #10
 80031de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	621a      	str	r2, [r3, #32]
}
 80031f4:	bf00      	nop
 80031f6:	371c      	adds	r7, #28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f023 0210 	bic.w	r2, r3, #16
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800322a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	031b      	lsls	r3, r3, #12
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800323c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	621a      	str	r2, [r3, #32]
}
 8003254:	bf00      	nop
 8003256:	371c      	adds	r7, #28
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800327a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	021a      	lsls	r2, r3, #8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	431a      	orrs	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	609a      	str	r2, [r3, #8]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	2201      	movs	r2, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a1a      	ldr	r2, [r3, #32]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	401a      	ands	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a1a      	ldr	r2, [r3, #32]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	431a      	orrs	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	621a      	str	r2, [r3, #32]
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003300:	2302      	movs	r3, #2
 8003302:	e050      	b.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1c      	ldr	r2, [pc, #112]	@ (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d018      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003350:	d013      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a18      	ldr	r2, [pc, #96]	@ (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00e      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a16      	ldr	r2, [pc, #88]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a15      	ldr	r2, [pc, #84]	@ (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d004      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a13      	ldr	r2, [pc, #76]	@ (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d10c      	bne.n	8003394 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	4313      	orrs	r3, r2
 800338a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40010000 	.word	0x40010000
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800
 80033c0:	40000c00 	.word	0x40000c00
 80033c4:	40014000 	.word	0x40014000

080033c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e042      	b.n	8003488 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe f8bc 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2224      	movs	r2, #36	@ 0x24
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f973 	bl	8003720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695a      	ldr	r2, [r3, #20]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	@ 0x28
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d175      	bne.n	800359c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_UART_Transmit+0x2c>
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e06e      	b.n	800359e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2221      	movs	r2, #33	@ 0x21
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ce:	f7fe fa91 	bl	80019f4 <HAL_GetTick>
 80034d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	88fa      	ldrh	r2, [r7, #6]
 80034d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	88fa      	ldrh	r2, [r7, #6]
 80034de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e8:	d108      	bne.n	80034fc <HAL_UART_Transmit+0x6c>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d104      	bne.n	80034fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	e003      	b.n	8003504 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003500:	2300      	movs	r3, #0
 8003502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003504:	e02e      	b.n	8003564 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2200      	movs	r2, #0
 800350e:	2180      	movs	r1, #128	@ 0x80
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f848 	bl	80035a6 <UART_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e03a      	b.n	800359e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10b      	bne.n	8003546 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800353c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	3302      	adds	r3, #2
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	e007      	b.n	8003556 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	3301      	adds	r3, #1
 8003554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1cb      	bne.n	8003506 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	2140      	movs	r1, #64	@ 0x40
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f814 	bl	80035a6 <UART_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e006      	b.n	800359e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	e000      	b.n	800359e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800359c:	2302      	movs	r3, #2
  }
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b6:	e03b      	b.n	8003630 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d037      	beq.n	8003630 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c0:	f7fe fa18 	bl	80019f4 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	6a3a      	ldr	r2, [r7, #32]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e03a      	b.n	8003650 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d023      	beq.n	8003630 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b80      	cmp	r3, #128	@ 0x80
 80035ec:	d020      	beq.n	8003630 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b40      	cmp	r3, #64	@ 0x40
 80035f2:	d01d      	beq.n	8003630 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d116      	bne.n	8003630 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f81d 	bl	8003658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2208      	movs	r2, #8
 8003622:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e00f      	b.n	8003650 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	429a      	cmp	r2, r3
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	429a      	cmp	r2, r3
 800364c:	d0b4      	beq.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003658:	b480      	push	{r7}
 800365a:	b095      	sub	sp, #84	@ 0x54
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	330c      	adds	r3, #12
 8003666:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003672:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	330c      	adds	r3, #12
 800367e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003680:	643a      	str	r2, [r7, #64]	@ 0x40
 8003682:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003686:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800368e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e5      	bne.n	8003660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3314      	adds	r3, #20
 800369a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	e853 3f00 	ldrex	r3, [r3]
 80036a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3314      	adds	r3, #20
 80036b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036bc:	e841 2300 	strex	r3, r2, [r1]
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e5      	bne.n	8003694 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d119      	bne.n	8003704 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	330c      	adds	r3, #12
 80036d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	60bb      	str	r3, [r7, #8]
   return(result);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f023 0310 	bic.w	r3, r3, #16
 80036e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036f0:	61ba      	str	r2, [r7, #24]
 80036f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	6979      	ldr	r1, [r7, #20]
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	613b      	str	r3, [r7, #16]
   return(result);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e5      	bne.n	80036d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003712:	bf00      	nop
 8003714:	3754      	adds	r7, #84	@ 0x54
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003724:	b0c0      	sub	sp, #256	@ 0x100
 8003726:	af00      	add	r7, sp, #0
 8003728:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373c:	68d9      	ldr	r1, [r3, #12]
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	ea40 0301 	orr.w	r3, r0, r1
 8003748:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800374a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	431a      	orrs	r2, r3
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	431a      	orrs	r2, r3
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003778:	f021 010c 	bic.w	r1, r1, #12
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003786:	430b      	orrs	r3, r1
 8003788:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379a:	6999      	ldr	r1, [r3, #24]
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	ea40 0301 	orr.w	r3, r0, r1
 80037a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b8f      	ldr	r3, [pc, #572]	@ (80039ec <UART_SetConfig+0x2cc>)
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d005      	beq.n	80037c0 <UART_SetConfig+0xa0>
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4b8d      	ldr	r3, [pc, #564]	@ (80039f0 <UART_SetConfig+0x2d0>)
 80037bc:	429a      	cmp	r2, r3
 80037be:	d104      	bne.n	80037ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037c0:	f7ff f84c 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 80037c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037c8:	e003      	b.n	80037d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037ca:	f7ff f833 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 80037ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037dc:	f040 810c 	bne.w	80039f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80037ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80037f2:	4622      	mov	r2, r4
 80037f4:	462b      	mov	r3, r5
 80037f6:	1891      	adds	r1, r2, r2
 80037f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037fa:	415b      	adcs	r3, r3
 80037fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003802:	4621      	mov	r1, r4
 8003804:	eb12 0801 	adds.w	r8, r2, r1
 8003808:	4629      	mov	r1, r5
 800380a:	eb43 0901 	adc.w	r9, r3, r1
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800381a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003822:	4690      	mov	r8, r2
 8003824:	4699      	mov	r9, r3
 8003826:	4623      	mov	r3, r4
 8003828:	eb18 0303 	adds.w	r3, r8, r3
 800382c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003830:	462b      	mov	r3, r5
 8003832:	eb49 0303 	adc.w	r3, r9, r3
 8003836:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800383a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003846:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800384a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800384e:	460b      	mov	r3, r1
 8003850:	18db      	adds	r3, r3, r3
 8003852:	653b      	str	r3, [r7, #80]	@ 0x50
 8003854:	4613      	mov	r3, r2
 8003856:	eb42 0303 	adc.w	r3, r2, r3
 800385a:	657b      	str	r3, [r7, #84]	@ 0x54
 800385c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003860:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003864:	f7fd fa18 	bl	8000c98 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4b61      	ldr	r3, [pc, #388]	@ (80039f4 <UART_SetConfig+0x2d4>)
 800386e:	fba3 2302 	umull	r2, r3, r3, r2
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	011c      	lsls	r4, r3, #4
 8003876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800387a:	2200      	movs	r2, #0
 800387c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003880:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003884:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003888:	4642      	mov	r2, r8
 800388a:	464b      	mov	r3, r9
 800388c:	1891      	adds	r1, r2, r2
 800388e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003890:	415b      	adcs	r3, r3
 8003892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003894:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003898:	4641      	mov	r1, r8
 800389a:	eb12 0a01 	adds.w	sl, r2, r1
 800389e:	4649      	mov	r1, r9
 80038a0:	eb43 0b01 	adc.w	fp, r3, r1
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b8:	4692      	mov	sl, r2
 80038ba:	469b      	mov	fp, r3
 80038bc:	4643      	mov	r3, r8
 80038be:	eb1a 0303 	adds.w	r3, sl, r3
 80038c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038c6:	464b      	mov	r3, r9
 80038c8:	eb4b 0303 	adc.w	r3, fp, r3
 80038cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038e4:	460b      	mov	r3, r1
 80038e6:	18db      	adds	r3, r3, r3
 80038e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038ea:	4613      	mov	r3, r2
 80038ec:	eb42 0303 	adc.w	r3, r2, r3
 80038f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80038fa:	f7fd f9cd 	bl	8000c98 <__aeabi_uldivmod>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4611      	mov	r1, r2
 8003904:	4b3b      	ldr	r3, [pc, #236]	@ (80039f4 <UART_SetConfig+0x2d4>)
 8003906:	fba3 2301 	umull	r2, r3, r3, r1
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	2264      	movs	r2, #100	@ 0x64
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	1acb      	subs	r3, r1, r3
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800391a:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <UART_SetConfig+0x2d4>)
 800391c:	fba3 2302 	umull	r2, r3, r3, r2
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003928:	441c      	add	r4, r3
 800392a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800392e:	2200      	movs	r2, #0
 8003930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003934:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003938:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	1891      	adds	r1, r2, r2
 8003942:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003944:	415b      	adcs	r3, r3
 8003946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800394c:	4641      	mov	r1, r8
 800394e:	1851      	adds	r1, r2, r1
 8003950:	6339      	str	r1, [r7, #48]	@ 0x30
 8003952:	4649      	mov	r1, r9
 8003954:	414b      	adcs	r3, r1
 8003956:	637b      	str	r3, [r7, #52]	@ 0x34
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003964:	4659      	mov	r1, fp
 8003966:	00cb      	lsls	r3, r1, #3
 8003968:	4651      	mov	r1, sl
 800396a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396e:	4651      	mov	r1, sl
 8003970:	00ca      	lsls	r2, r1, #3
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	4603      	mov	r3, r0
 8003978:	4642      	mov	r2, r8
 800397a:	189b      	adds	r3, r3, r2
 800397c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003980:	464b      	mov	r3, r9
 8003982:	460a      	mov	r2, r1
 8003984:	eb42 0303 	adc.w	r3, r2, r3
 8003988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003998:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800399c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039a0:	460b      	mov	r3, r1
 80039a2:	18db      	adds	r3, r3, r3
 80039a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039a6:	4613      	mov	r3, r2
 80039a8:	eb42 0303 	adc.w	r3, r2, r3
 80039ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039b6:	f7fd f96f 	bl	8000c98 <__aeabi_uldivmod>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4b0d      	ldr	r3, [pc, #52]	@ (80039f4 <UART_SetConfig+0x2d4>)
 80039c0:	fba3 1302 	umull	r1, r3, r3, r2
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	2164      	movs	r1, #100	@ 0x64
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	3332      	adds	r3, #50	@ 0x32
 80039d2:	4a08      	ldr	r2, [pc, #32]	@ (80039f4 <UART_SetConfig+0x2d4>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	f003 0207 	and.w	r2, r3, #7
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4422      	add	r2, r4
 80039e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039e8:	e106      	b.n	8003bf8 <UART_SetConfig+0x4d8>
 80039ea:	bf00      	nop
 80039ec:	40011000 	.word	0x40011000
 80039f0:	40011400 	.word	0x40011400
 80039f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a0a:	4642      	mov	r2, r8
 8003a0c:	464b      	mov	r3, r9
 8003a0e:	1891      	adds	r1, r2, r2
 8003a10:	6239      	str	r1, [r7, #32]
 8003a12:	415b      	adcs	r3, r3
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	1854      	adds	r4, r2, r1
 8003a1e:	4649      	mov	r1, r9
 8003a20:	eb43 0501 	adc.w	r5, r3, r1
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	00eb      	lsls	r3, r5, #3
 8003a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a32:	00e2      	lsls	r2, r4, #3
 8003a34:	4614      	mov	r4, r2
 8003a36:	461d      	mov	r5, r3
 8003a38:	4643      	mov	r3, r8
 8003a3a:	18e3      	adds	r3, r4, r3
 8003a3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a40:	464b      	mov	r3, r9
 8003a42:	eb45 0303 	adc.w	r3, r5, r3
 8003a46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a66:	4629      	mov	r1, r5
 8003a68:	008b      	lsls	r3, r1, #2
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a70:	4621      	mov	r1, r4
 8003a72:	008a      	lsls	r2, r1, #2
 8003a74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a78:	f7fd f90e 	bl	8000c98 <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4b60      	ldr	r3, [pc, #384]	@ (8003c04 <UART_SetConfig+0x4e4>)
 8003a82:	fba3 2302 	umull	r2, r3, r3, r2
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	011c      	lsls	r4, r3, #4
 8003a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	1891      	adds	r1, r2, r2
 8003aa2:	61b9      	str	r1, [r7, #24]
 8003aa4:	415b      	adcs	r3, r3
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aac:	4641      	mov	r1, r8
 8003aae:	1851      	adds	r1, r2, r1
 8003ab0:	6139      	str	r1, [r7, #16]
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	414b      	adcs	r3, r1
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	00cb      	lsls	r3, r1, #3
 8003ac8:	4651      	mov	r1, sl
 8003aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ace:	4651      	mov	r1, sl
 8003ad0:	00ca      	lsls	r2, r1, #3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4642      	mov	r2, r8
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ae0:	464b      	mov	r3, r9
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	eb42 0303 	adc.w	r3, r2, r3
 8003ae8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003af6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b04:	4649      	mov	r1, r9
 8003b06:	008b      	lsls	r3, r1, #2
 8003b08:	4641      	mov	r1, r8
 8003b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0e:	4641      	mov	r1, r8
 8003b10:	008a      	lsls	r2, r1, #2
 8003b12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b16:	f7fd f8bf 	bl	8000c98 <__aeabi_uldivmod>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4b38      	ldr	r3, [pc, #224]	@ (8003c04 <UART_SetConfig+0x4e4>)
 8003b22:	fba3 2301 	umull	r2, r3, r3, r1
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	2264      	movs	r2, #100	@ 0x64
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	1acb      	subs	r3, r1, r3
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	3332      	adds	r3, #50	@ 0x32
 8003b34:	4a33      	ldr	r2, [pc, #204]	@ (8003c04 <UART_SetConfig+0x4e4>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b40:	441c      	add	r4, r3
 8003b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b46:	2200      	movs	r2, #0
 8003b48:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b50:	4642      	mov	r2, r8
 8003b52:	464b      	mov	r3, r9
 8003b54:	1891      	adds	r1, r2, r2
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	415b      	adcs	r3, r3
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b60:	4641      	mov	r1, r8
 8003b62:	1851      	adds	r1, r2, r1
 8003b64:	6039      	str	r1, [r7, #0]
 8003b66:	4649      	mov	r1, r9
 8003b68:	414b      	adcs	r3, r1
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b78:	4659      	mov	r1, fp
 8003b7a:	00cb      	lsls	r3, r1, #3
 8003b7c:	4651      	mov	r1, sl
 8003b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b82:	4651      	mov	r1, sl
 8003b84:	00ca      	lsls	r2, r1, #3
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b92:	464b      	mov	r3, r9
 8003b94:	460a      	mov	r2, r1
 8003b96:	eb42 0303 	adc.w	r3, r2, r3
 8003b9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ba6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bb4:	4649      	mov	r1, r9
 8003bb6:	008b      	lsls	r3, r1, #2
 8003bb8:	4641      	mov	r1, r8
 8003bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bbe:	4641      	mov	r1, r8
 8003bc0:	008a      	lsls	r2, r1, #2
 8003bc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bc6:	f7fd f867 	bl	8000c98 <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4b0d      	ldr	r3, [pc, #52]	@ (8003c04 <UART_SetConfig+0x4e4>)
 8003bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	2164      	movs	r1, #100	@ 0x64
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	3332      	adds	r3, #50	@ 0x32
 8003be2:	4a08      	ldr	r2, [pc, #32]	@ (8003c04 <UART_SetConfig+0x4e4>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	f003 020f 	and.w	r2, r3, #15
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4422      	add	r2, r4
 8003bf6:	609a      	str	r2, [r3, #8]
}
 8003bf8:	bf00      	nop
 8003bfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c04:	51eb851f 	.word	0x51eb851f

08003c08 <__NVIC_SetPriority>:
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	6039      	str	r1, [r7, #0]
 8003c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	db0a      	blt.n	8003c32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	490c      	ldr	r1, [pc, #48]	@ (8003c54 <__NVIC_SetPriority+0x4c>)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	0112      	lsls	r2, r2, #4
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c30:	e00a      	b.n	8003c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	4908      	ldr	r1, [pc, #32]	@ (8003c58 <__NVIC_SetPriority+0x50>)
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	3b04      	subs	r3, #4
 8003c40:	0112      	lsls	r2, r2, #4
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	440b      	add	r3, r1
 8003c46:	761a      	strb	r2, [r3, #24]
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	e000e100 	.word	0xe000e100
 8003c58:	e000ed00 	.word	0xe000ed00

08003c5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003c60:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <SysTick_Handler+0x1c>)
 8003c62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003c64:	f001 fd18 	bl	8005698 <xTaskGetSchedulerState>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d001      	beq.n	8003c72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003c6e:	f002 fb13 	bl	8006298 <xPortSysTickHandler>
  }
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	e000e010 	.word	0xe000e010

08003c7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c80:	2100      	movs	r1, #0
 8003c82:	f06f 0004 	mvn.w	r0, #4
 8003c86:	f7ff ffbf 	bl	8003c08 <__NVIC_SetPriority>
#endif
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c96:	f3ef 8305 	mrs	r3, IPSR
 8003c9a:	603b      	str	r3, [r7, #0]
  return(result);
 8003c9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003ca2:	f06f 0305 	mvn.w	r3, #5
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	e00c      	b.n	8003cc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003caa:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <osKernelInitialize+0x44>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003cb2:	4b08      	ldr	r3, [pc, #32]	@ (8003cd4 <osKernelInitialize+0x44>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	607b      	str	r3, [r7, #4]
 8003cbc:	e002      	b.n	8003cc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003cc4:	687b      	ldr	r3, [r7, #4]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	2000035c 	.word	0x2000035c

08003cd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cde:	f3ef 8305 	mrs	r3, IPSR
 8003ce2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ce4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003cea:	f06f 0305 	mvn.w	r3, #5
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	e010      	b.n	8003d14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <osKernelStart+0x48>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d109      	bne.n	8003d0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003cfa:	f7ff ffbf 	bl	8003c7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003cfe:	4b08      	ldr	r3, [pc, #32]	@ (8003d20 <osKernelStart+0x48>)
 8003d00:	2202      	movs	r2, #2
 8003d02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d04:	f001 f87a 	bl	8004dfc <vTaskStartScheduler>
      stat = osOK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	e002      	b.n	8003d14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d14:	687b      	ldr	r3, [r7, #4]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	2000035c 	.word	0x2000035c

08003d24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08e      	sub	sp, #56	@ 0x38
 8003d28:	af04      	add	r7, sp, #16
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d34:	f3ef 8305 	mrs	r3, IPSR
 8003d38:	617b      	str	r3, [r7, #20]
  return(result);
 8003d3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d17e      	bne.n	8003e3e <osThreadNew+0x11a>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d07b      	beq.n	8003e3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003d46:	2380      	movs	r3, #128	@ 0x80
 8003d48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003d4a:	2318      	movs	r3, #24
 8003d4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
 8003d56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d045      	beq.n	8003dea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <osThreadNew+0x48>
        name = attr->name;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <osThreadNew+0x6e>
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b38      	cmp	r3, #56	@ 0x38
 8003d84:	d805      	bhi.n	8003d92 <osThreadNew+0x6e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <osThreadNew+0x72>
        return (NULL);
 8003d92:	2300      	movs	r3, #0
 8003d94:	e054      	b.n	8003e40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00e      	beq.n	8003dcc <osThreadNew+0xa8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	2b5b      	cmp	r3, #91	@ 0x5b
 8003db4:	d90a      	bls.n	8003dcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <osThreadNew+0xa8>
        mem = 1;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	e010      	b.n	8003dee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10c      	bne.n	8003dee <osThreadNew+0xca>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d108      	bne.n	8003dee <osThreadNew+0xca>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d104      	bne.n	8003dee <osThreadNew+0xca>
          mem = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	e001      	b.n	8003dee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d110      	bne.n	8003e16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dfc:	9202      	str	r2, [sp, #8]
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6a3a      	ldr	r2, [r7, #32]
 8003e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fe1a 	bl	8004a44 <xTaskCreateStatic>
 8003e10:	4603      	mov	r3, r0
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	e013      	b.n	8003e3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d110      	bne.n	8003e3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	f107 0310 	add.w	r3, r7, #16
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fe68 	bl	8004b04 <xTaskCreate>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d001      	beq.n	8003e3e <osThreadNew+0x11a>
            hTask = NULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e3e:	693b      	ldr	r3, [r7, #16]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3728      	adds	r7, #40	@ 0x28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e50:	f3ef 8305 	mrs	r3, IPSR
 8003e54:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <osDelay+0x1c>
    stat = osErrorISR;
 8003e5c:	f06f 0305 	mvn.w	r3, #5
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	e007      	b.n	8003e74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 ff8e 	bl	8004d90 <vTaskDelay>
    }
  }

  return (stat);
 8003e74:	68fb      	ldr	r3, [r7, #12]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4a07      	ldr	r2, [pc, #28]	@ (8003eac <vApplicationGetIdleTaskMemory+0x2c>)
 8003e90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4a06      	ldr	r2, [pc, #24]	@ (8003eb0 <vApplicationGetIdleTaskMemory+0x30>)
 8003e96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2280      	movs	r2, #128	@ 0x80
 8003e9c:	601a      	str	r2, [r3, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000360 	.word	0x20000360
 8003eb0:	200003bc 	.word	0x200003bc

08003eb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a07      	ldr	r2, [pc, #28]	@ (8003ee0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ec4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4a06      	ldr	r2, [pc, #24]	@ (8003ee4 <vApplicationGetTimerTaskMemory+0x30>)
 8003eca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ed2:	601a      	str	r2, [r3, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	200005bc 	.word	0x200005bc
 8003ee4:	20000618 	.word	0x20000618

08003ee8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f103 0208 	add.w	r2, r3, #8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295
 8003f00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f103 0208 	add.w	r2, r3, #8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f103 0208 	add.w	r2, r3, #8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	601a      	str	r2, [r3, #0]
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b085      	sub	sp, #20
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d103      	bne.n	8003faa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e00c      	b.n	8003fc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3308      	adds	r3, #8
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	e002      	b.n	8003fb8 <vListInsert+0x2e>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d2f6      	bcs.n	8003fb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	601a      	str	r2, [r3, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6892      	ldr	r2, [r2, #8]
 8004012:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6852      	ldr	r2, [r2, #4]
 800401c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	d103      	bne.n	8004030 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	1e5a      	subs	r2, r3, #1
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10b      	bne.n	800407c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004076:	bf00      	nop
 8004078:	bf00      	nop
 800407a:	e7fd      	b.n	8004078 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800407c:	f002 f87c 	bl	8006178 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	68f9      	ldr	r1, [r7, #12]
 800408a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	441a      	add	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ac:	3b01      	subs	r3, #1
 80040ae:	68f9      	ldr	r1, [r7, #12]
 80040b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	441a      	add	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	22ff      	movs	r2, #255	@ 0xff
 80040c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	22ff      	movs	r2, #255	@ 0xff
 80040c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d114      	bne.n	80040fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d01a      	beq.n	8004110 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3310      	adds	r3, #16
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 f91a 	bl	8005318 <xTaskRemoveFromEventList>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d012      	beq.n	8004110 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004120 <xQueueGenericReset+0xd0>)
 80040ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	e009      	b.n	8004110 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3310      	adds	r3, #16
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff fef1 	bl	8003ee8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3324      	adds	r3, #36	@ 0x24
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff feec 	bl	8003ee8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004110:	f002 f864 	bl	80061dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004114:	2301      	movs	r3, #1
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	e000ed04 	.word	0xe000ed04

08004124 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08e      	sub	sp, #56	@ 0x38
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10b      	bne.n	8004150 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800414a:	bf00      	nop
 800414c:	bf00      	nop
 800414e:	e7fd      	b.n	800414c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	e7fd      	b.n	800416a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <xQueueGenericCreateStatic+0x56>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <xQueueGenericCreateStatic+0x5a>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <xQueueGenericCreateStatic+0x5c>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10b      	bne.n	800419c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	623b      	str	r3, [r7, #32]
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d102      	bne.n	80041a8 <xQueueGenericCreateStatic+0x84>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <xQueueGenericCreateStatic+0x88>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <xQueueGenericCreateStatic+0x8a>
 80041ac:	2300      	movs	r3, #0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10b      	bne.n	80041ca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	61fb      	str	r3, [r7, #28]
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	e7fd      	b.n	80041c6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041ca:	2350      	movs	r3, #80	@ 0x50
 80041cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b50      	cmp	r3, #80	@ 0x50
 80041d2:	d00b      	beq.n	80041ec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	61bb      	str	r3, [r7, #24]
}
 80041e6:	bf00      	nop
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80041ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80041f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004200:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f805 	bl	800421e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004216:	4618      	mov	r0, r3
 8004218:	3730      	adds	r7, #48	@ 0x30
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
 800422a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e002      	b.n	8004240 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800424c:	2101      	movs	r1, #1
 800424e:	69b8      	ldr	r0, [r7, #24]
 8004250:	f7ff fefe 	bl	8004050 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08e      	sub	sp, #56	@ 0x38
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004272:	2300      	movs	r3, #0
 8004274:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10b      	bne.n	8004298 <xQueueGenericSend+0x34>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <xQueueGenericSend+0x42>
 800429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <xQueueGenericSend+0x46>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <xQueueGenericSend+0x48>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <xQueueGenericSend+0x64>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	e7fd      	b.n	80042c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d103      	bne.n	80042d6 <xQueueGenericSend+0x72>
 80042ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <xQueueGenericSend+0x76>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <xQueueGenericSend+0x78>
 80042da:	2300      	movs	r3, #0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <xQueueGenericSend+0x94>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	623b      	str	r3, [r7, #32]
}
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042f8:	f001 f9ce 	bl	8005698 <xTaskGetSchedulerState>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <xQueueGenericSend+0xa4>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <xQueueGenericSend+0xa8>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <xQueueGenericSend+0xaa>
 800430c:	2300      	movs	r3, #0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10b      	bne.n	800432a <xQueueGenericSend+0xc6>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	61fb      	str	r3, [r7, #28]
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	e7fd      	b.n	8004326 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800432a:	f001 ff25 	bl	8006178 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004336:	429a      	cmp	r2, r3
 8004338:	d302      	bcc.n	8004340 <xQueueGenericSend+0xdc>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d129      	bne.n	8004394 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004346:	f000 fa0f 	bl	8004768 <prvCopyDataToQueue>
 800434a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800434c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	2b00      	cmp	r3, #0
 8004352:	d010      	beq.n	8004376 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004356:	3324      	adds	r3, #36	@ 0x24
 8004358:	4618      	mov	r0, r3
 800435a:	f000 ffdd 	bl	8005318 <xTaskRemoveFromEventList>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d013      	beq.n	800438c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004364:	4b3f      	ldr	r3, [pc, #252]	@ (8004464 <xQueueGenericSend+0x200>)
 8004366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	e00a      	b.n	800438c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800437c:	4b39      	ldr	r3, [pc, #228]	@ (8004464 <xQueueGenericSend+0x200>)
 800437e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800438c:	f001 ff26 	bl	80061dc <vPortExitCritical>
				return pdPASS;
 8004390:	2301      	movs	r3, #1
 8004392:	e063      	b.n	800445c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800439a:	f001 ff1f 	bl	80061dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	e05c      	b.n	800445c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043a8:	f107 0314 	add.w	r3, r7, #20
 80043ac:	4618      	mov	r0, r3
 80043ae:	f001 f817 	bl	80053e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043b2:	2301      	movs	r3, #1
 80043b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043b6:	f001 ff11 	bl	80061dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043ba:	f000 fd87 	bl	8004ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043be:	f001 fedb 	bl	8006178 <vPortEnterCritical>
 80043c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043c8:	b25b      	sxtb	r3, r3
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ce:	d103      	bne.n	80043d8 <xQueueGenericSend+0x174>
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043de:	b25b      	sxtb	r3, r3
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d103      	bne.n	80043ee <xQueueGenericSend+0x18a>
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043ee:	f001 fef5 	bl	80061dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043f2:	1d3a      	adds	r2, r7, #4
 80043f4:	f107 0314 	add.w	r3, r7, #20
 80043f8:	4611      	mov	r1, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f001 f806 	bl	800540c <xTaskCheckForTimeOut>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d124      	bne.n	8004450 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004406:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004408:	f000 faa6 	bl	8004958 <prvIsQueueFull>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d018      	beq.n	8004444 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	3310      	adds	r3, #16
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	4611      	mov	r1, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f000 ff2a 	bl	8005274 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004420:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004422:	f000 fa31 	bl	8004888 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004426:	f000 fd5f 	bl	8004ee8 <xTaskResumeAll>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	f47f af7c 	bne.w	800432a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004432:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <xQueueGenericSend+0x200>)
 8004434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	e772      	b.n	800432a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004444:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004446:	f000 fa1f 	bl	8004888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800444a:	f000 fd4d 	bl	8004ee8 <xTaskResumeAll>
 800444e:	e76c      	b.n	800432a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004452:	f000 fa19 	bl	8004888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004456:	f000 fd47 	bl	8004ee8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800445a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800445c:	4618      	mov	r0, r3
 800445e:	3738      	adds	r7, #56	@ 0x38
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	e000ed04 	.word	0xe000ed04

08004468 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b090      	sub	sp, #64	@ 0x40
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10b      	bne.n	8004498 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004492:	bf00      	nop
 8004494:	bf00      	nop
 8004496:	e7fd      	b.n	8004494 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <xQueueGenericSendFromISR+0x3e>
 800449e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <xQueueGenericSendFromISR+0x42>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <xQueueGenericSendFromISR+0x44>
 80044aa:	2300      	movs	r3, #0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10b      	bne.n	80044c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
 80044c6:	e7fd      	b.n	80044c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d103      	bne.n	80044d6 <xQueueGenericSendFromISR+0x6e>
 80044ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <xQueueGenericSendFromISR+0x72>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <xQueueGenericSendFromISR+0x74>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	623b      	str	r3, [r7, #32]
}
 80044f2:	bf00      	nop
 80044f4:	bf00      	nop
 80044f6:	e7fd      	b.n	80044f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044f8:	f001 ff1e 	bl	8006338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044fc:	f3ef 8211 	mrs	r2, BASEPRI
 8004500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	61fa      	str	r2, [r7, #28]
 8004512:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004514:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004516:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800451c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004520:	429a      	cmp	r2, r3
 8004522:	d302      	bcc.n	800452a <xQueueGenericSendFromISR+0xc2>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d12f      	bne.n	800458a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800452a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004530:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004538:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004540:	f000 f912 	bl	8004768 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004544:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d112      	bne.n	8004574 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800454e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d016      	beq.n	8004584 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004558:	3324      	adds	r3, #36	@ 0x24
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fedc 	bl	8005318 <xTaskRemoveFromEventList>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00e      	beq.n	8004584 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	e007      	b.n	8004584 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004574:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004578:	3301      	adds	r3, #1
 800457a:	b2db      	uxtb	r3, r3
 800457c:	b25a      	sxtb	r2, r3
 800457e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004584:	2301      	movs	r3, #1
 8004586:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004588:	e001      	b.n	800458e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800458a:	2300      	movs	r3, #0
 800458c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800458e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004590:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004598:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800459a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800459c:	4618      	mov	r0, r3
 800459e:	3740      	adds	r7, #64	@ 0x40
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08c      	sub	sp, #48	@ 0x30
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <xQueueReceive+0x32>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	623b      	str	r3, [r7, #32]
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <xQueueReceive+0x40>
 80045dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <xQueueReceive+0x44>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <xQueueReceive+0x46>
 80045e8:	2300      	movs	r3, #0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10b      	bne.n	8004606 <xQueueReceive+0x62>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	61fb      	str	r3, [r7, #28]
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	e7fd      	b.n	8004602 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004606:	f001 f847 	bl	8005698 <xTaskGetSchedulerState>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d102      	bne.n	8004616 <xQueueReceive+0x72>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <xQueueReceive+0x76>
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <xQueueReceive+0x78>
 800461a:	2300      	movs	r3, #0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10b      	bne.n	8004638 <xQueueReceive+0x94>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	61bb      	str	r3, [r7, #24]
}
 8004632:	bf00      	nop
 8004634:	bf00      	nop
 8004636:	e7fd      	b.n	8004634 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004638:	f001 fd9e 	bl	8006178 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800463c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01f      	beq.n	8004688 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800464c:	f000 f8f6 	bl	800483c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	1e5a      	subs	r2, r3, #1
 8004654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004656:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00f      	beq.n	8004680 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004662:	3310      	adds	r3, #16
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fe57 	bl	8005318 <xTaskRemoveFromEventList>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004670:	4b3c      	ldr	r3, [pc, #240]	@ (8004764 <xQueueReceive+0x1c0>)
 8004672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004680:	f001 fdac 	bl	80061dc <vPortExitCritical>
				return pdPASS;
 8004684:	2301      	movs	r3, #1
 8004686:	e069      	b.n	800475c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d103      	bne.n	8004696 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800468e:	f001 fda5 	bl	80061dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004692:	2300      	movs	r3, #0
 8004694:	e062      	b.n	800475c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004698:	2b00      	cmp	r3, #0
 800469a:	d106      	bne.n	80046aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800469c:	f107 0310 	add.w	r3, r7, #16
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fe9d 	bl	80053e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046a6:	2301      	movs	r3, #1
 80046a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046aa:	f001 fd97 	bl	80061dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046ae:	f000 fc0d 	bl	8004ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046b2:	f001 fd61 	bl	8006178 <vPortEnterCritical>
 80046b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046bc:	b25b      	sxtb	r3, r3
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d103      	bne.n	80046cc <xQueueReceive+0x128>
 80046c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046d2:	b25b      	sxtb	r3, r3
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d8:	d103      	bne.n	80046e2 <xQueueReceive+0x13e>
 80046da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046e2:	f001 fd7b 	bl	80061dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046e6:	1d3a      	adds	r2, r7, #4
 80046e8:	f107 0310 	add.w	r3, r7, #16
 80046ec:	4611      	mov	r1, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fe8c 	bl	800540c <xTaskCheckForTimeOut>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d123      	bne.n	8004742 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046fc:	f000 f916 	bl	800492c <prvIsQueueEmpty>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d017      	beq.n	8004736 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	3324      	adds	r3, #36	@ 0x24
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	4611      	mov	r1, r2
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fdb0 	bl	8005274 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004716:	f000 f8b7 	bl	8004888 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800471a:	f000 fbe5 	bl	8004ee8 <xTaskResumeAll>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d189      	bne.n	8004638 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004724:	4b0f      	ldr	r3, [pc, #60]	@ (8004764 <xQueueReceive+0x1c0>)
 8004726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	e780      	b.n	8004638 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004738:	f000 f8a6 	bl	8004888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800473c:	f000 fbd4 	bl	8004ee8 <xTaskResumeAll>
 8004740:	e77a      	b.n	8004638 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004744:	f000 f8a0 	bl	8004888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004748:	f000 fbce 	bl	8004ee8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800474c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800474e:	f000 f8ed 	bl	800492c <prvIsQueueEmpty>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	f43f af6f 	beq.w	8004638 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800475a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800475c:	4618      	mov	r0, r3
 800475e:	3730      	adds	r7, #48	@ 0x30
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10d      	bne.n	80047a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d14d      	bne.n	800482a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 ff9e 	bl	80056d4 <xTaskPriorityDisinherit>
 8004798:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	e043      	b.n	800482a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d119      	bne.n	80047dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6858      	ldr	r0, [r3, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b0:	461a      	mov	r2, r3
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	f003 f801 	bl	80077ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c0:	441a      	add	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d32b      	bcc.n	800482a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	e026      	b.n	800482a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68d8      	ldr	r0, [r3, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e4:	461a      	mov	r2, r3
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	f002 ffe7 	bl	80077ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	425b      	negs	r3, r3
 80047f6:	441a      	add	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d207      	bcs.n	8004818 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004810:	425b      	negs	r3, r3
 8004812:	441a      	add	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d105      	bne.n	800482a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	3b01      	subs	r3, #1
 8004828:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004832:	697b      	ldr	r3, [r7, #20]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d018      	beq.n	8004880 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	441a      	add	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	429a      	cmp	r2, r3
 8004866:	d303      	bcc.n	8004870 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68d9      	ldr	r1, [r3, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	461a      	mov	r2, r3
 800487a:	6838      	ldr	r0, [r7, #0]
 800487c:	f002 ff9d 	bl	80077ba <memcpy>
	}
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004890:	f001 fc72 	bl	8006178 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800489a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800489c:	e011      	b.n	80048c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d012      	beq.n	80048cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3324      	adds	r3, #36	@ 0x24
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fd34 	bl	8005318 <xTaskRemoveFromEventList>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048b6:	f000 fe0d 	bl	80054d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	3b01      	subs	r3, #1
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	dce9      	bgt.n	800489e <prvUnlockQueue+0x16>
 80048ca:	e000      	b.n	80048ce <prvUnlockQueue+0x46>
					break;
 80048cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	22ff      	movs	r2, #255	@ 0xff
 80048d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80048d6:	f001 fc81 	bl	80061dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048da:	f001 fc4d 	bl	8006178 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048e6:	e011      	b.n	800490c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d012      	beq.n	8004916 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3310      	adds	r3, #16
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fd0f 	bl	8005318 <xTaskRemoveFromEventList>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004900:	f000 fde8 	bl	80054d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004904:	7bbb      	ldrb	r3, [r7, #14]
 8004906:	3b01      	subs	r3, #1
 8004908:	b2db      	uxtb	r3, r3
 800490a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800490c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004910:	2b00      	cmp	r3, #0
 8004912:	dce9      	bgt.n	80048e8 <prvUnlockQueue+0x60>
 8004914:	e000      	b.n	8004918 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004916:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	22ff      	movs	r2, #255	@ 0xff
 800491c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004920:	f001 fc5c 	bl	80061dc <vPortExitCritical>
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004934:	f001 fc20 	bl	8006178 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004940:	2301      	movs	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	e001      	b.n	800494a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800494a:	f001 fc47 	bl	80061dc <vPortExitCritical>

	return xReturn;
 800494e:	68fb      	ldr	r3, [r7, #12]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004960:	f001 fc0a 	bl	8006178 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496c:	429a      	cmp	r2, r3
 800496e:	d102      	bne.n	8004976 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	e001      	b.n	800497a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800497a:	f001 fc2f 	bl	80061dc <vPortExitCritical>

	return xReturn;
 800497e:	68fb      	ldr	r3, [r7, #12]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e014      	b.n	80049c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004998:	4a0f      	ldr	r2, [pc, #60]	@ (80049d8 <vQueueAddToRegistry+0x50>)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10b      	bne.n	80049bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049a4:	490c      	ldr	r1, [pc, #48]	@ (80049d8 <vQueueAddToRegistry+0x50>)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049ae:	4a0a      	ldr	r2, [pc, #40]	@ (80049d8 <vQueueAddToRegistry+0x50>)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4413      	add	r3, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049ba:	e006      	b.n	80049ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3301      	adds	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b07      	cmp	r3, #7
 80049c6:	d9e7      	bls.n	8004998 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20000a18 	.word	0x20000a18

080049dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049ec:	f001 fbc4 	bl	8006178 <vPortEnterCritical>
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049f6:	b25b      	sxtb	r3, r3
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fc:	d103      	bne.n	8004a06 <vQueueWaitForMessageRestricted+0x2a>
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a0c:	b25b      	sxtb	r3, r3
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a12:	d103      	bne.n	8004a1c <vQueueWaitForMessageRestricted+0x40>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a1c:	f001 fbde 	bl	80061dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d106      	bne.n	8004a36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	3324      	adds	r3, #36	@ 0x24
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fc45 	bl	80052c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a36:	6978      	ldr	r0, [r7, #20]
 8004a38:	f7ff ff26 	bl	8004888 <prvUnlockQueue>
	}
 8004a3c:	bf00      	nop
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08e      	sub	sp, #56	@ 0x38
 8004a48:	af04      	add	r7, sp, #16
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10b      	bne.n	8004a70 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	623b      	str	r3, [r7, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	e7fd      	b.n	8004a6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10b      	bne.n	8004a8e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	61fb      	str	r3, [r7, #28]
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	e7fd      	b.n	8004a8a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a8e:	235c      	movs	r3, #92	@ 0x5c
 8004a90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b5c      	cmp	r3, #92	@ 0x5c
 8004a96:	d00b      	beq.n	8004ab0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	61bb      	str	r3, [r7, #24]
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	e7fd      	b.n	8004aac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ab0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01e      	beq.n	8004af6 <xTaskCreateStatic+0xb2>
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01b      	beq.n	8004af6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ac6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	9303      	str	r3, [sp, #12]
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad6:	9302      	str	r3, [sp, #8]
 8004ad8:	f107 0314 	add.w	r3, r7, #20
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f850 	bl	8004b8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004af0:	f000 f8de 	bl	8004cb0 <prvAddNewTaskToReadyList>
 8004af4:	e001      	b.n	8004afa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004afa:	697b      	ldr	r3, [r7, #20]
	}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3728      	adds	r7, #40	@ 0x28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08c      	sub	sp, #48	@ 0x30
 8004b08:	af04      	add	r7, sp, #16
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	4613      	mov	r3, r2
 8004b12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b14:	88fb      	ldrh	r3, [r7, #6]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 fc4f 	bl	80063bc <pvPortMalloc>
 8004b1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00e      	beq.n	8004b44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b26:	205c      	movs	r0, #92	@ 0x5c
 8004b28:	f001 fc48 	bl	80063bc <pvPortMalloc>
 8004b2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b3a:	e005      	b.n	8004b48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b3c:	6978      	ldr	r0, [r7, #20]
 8004b3e:	f001 fd0b 	bl	8006558 <vPortFree>
 8004b42:	e001      	b.n	8004b48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d017      	beq.n	8004b7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9303      	str	r3, [sp, #12]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	9302      	str	r3, [sp, #8]
 8004b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b62:	9301      	str	r3, [sp, #4]
 8004b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f80e 	bl	8004b8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b72:	69f8      	ldr	r0, [r7, #28]
 8004b74:	f000 f89c 	bl	8004cb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	e002      	b.n	8004b84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b84:	69bb      	ldr	r3, [r7, #24]
	}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b088      	sub	sp, #32
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	21a5      	movs	r1, #165	@ 0xa5
 8004ba8:	f002 fd87 	bl	80076ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f023 0307 	bic.w	r3, r3, #7
 8004bc4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00b      	beq.n	8004be8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	617b      	str	r3, [r7, #20]
}
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
 8004be6:	e7fd      	b.n	8004be4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01f      	beq.n	8004c2e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
 8004bf2:	e012      	b.n	8004c1a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	7819      	ldrb	r1, [r3, #0]
 8004bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	4413      	add	r3, r2
 8004c02:	3334      	adds	r3, #52	@ 0x34
 8004c04:	460a      	mov	r2, r1
 8004c06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d006      	beq.n	8004c22 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	3301      	adds	r3, #1
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	2b0f      	cmp	r3, #15
 8004c1e:	d9e9      	bls.n	8004bf4 <prvInitialiseNewTask+0x66>
 8004c20:	e000      	b.n	8004c24 <prvInitialiseNewTask+0x96>
			{
				break;
 8004c22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c2c:	e003      	b.n	8004c36 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	2b37      	cmp	r3, #55	@ 0x37
 8004c3a:	d901      	bls.n	8004c40 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c3c:	2337      	movs	r3, #55	@ 0x37
 8004c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c44:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c4a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	2200      	movs	r2, #0
 8004c50:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c54:	3304      	adds	r3, #4
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff f966 	bl	8003f28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5e:	3318      	adds	r3, #24
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff f961 	bl	8003f28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c7a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	2200      	movs	r2, #0
 8004c80:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	68f9      	ldr	r1, [r7, #12]
 8004c8e:	69b8      	ldr	r0, [r7, #24]
 8004c90:	f001 f93e 	bl	8005f10 <pxPortInitialiseStack>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ca6:	bf00      	nop
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cb8:	f001 fa5e 	bl	8006178 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8004d74 <prvAddNewTaskToReadyList+0xc4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d74 <prvAddNewTaskToReadyList+0xc4>)
 8004cc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8004d78 <prvAddNewTaskToReadyList+0xc8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cce:	4a2a      	ldr	r2, [pc, #168]	@ (8004d78 <prvAddNewTaskToReadyList+0xc8>)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cd4:	4b27      	ldr	r3, [pc, #156]	@ (8004d74 <prvAddNewTaskToReadyList+0xc4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d110      	bne.n	8004cfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cdc:	f000 fc1e 	bl	800551c <prvInitialiseTaskLists>
 8004ce0:	e00d      	b.n	8004cfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ce2:	4b26      	ldr	r3, [pc, #152]	@ (8004d7c <prvAddNewTaskToReadyList+0xcc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cea:	4b23      	ldr	r3, [pc, #140]	@ (8004d78 <prvAddNewTaskToReadyList+0xc8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d802      	bhi.n	8004cfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d78 <prvAddNewTaskToReadyList+0xc8>)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cfe:	4b20      	ldr	r3, [pc, #128]	@ (8004d80 <prvAddNewTaskToReadyList+0xd0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	4a1e      	ldr	r2, [pc, #120]	@ (8004d80 <prvAddNewTaskToReadyList+0xd0>)
 8004d06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d08:	4b1d      	ldr	r3, [pc, #116]	@ (8004d80 <prvAddNewTaskToReadyList+0xd0>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d14:	4b1b      	ldr	r3, [pc, #108]	@ (8004d84 <prvAddNewTaskToReadyList+0xd4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d903      	bls.n	8004d24 <prvAddNewTaskToReadyList+0x74>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	4a18      	ldr	r2, [pc, #96]	@ (8004d84 <prvAddNewTaskToReadyList+0xd4>)
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4a15      	ldr	r2, [pc, #84]	@ (8004d88 <prvAddNewTaskToReadyList+0xd8>)
 8004d32:	441a      	add	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f7ff f901 	bl	8003f42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d40:	f001 fa4c 	bl	80061dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d44:	4b0d      	ldr	r3, [pc, #52]	@ (8004d7c <prvAddNewTaskToReadyList+0xcc>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00e      	beq.n	8004d6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d78 <prvAddNewTaskToReadyList+0xc8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d207      	bcs.n	8004d6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d8c <prvAddNewTaskToReadyList+0xdc>)
 8004d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20000f2c 	.word	0x20000f2c
 8004d78:	20000a58 	.word	0x20000a58
 8004d7c:	20000f38 	.word	0x20000f38
 8004d80:	20000f48 	.word	0x20000f48
 8004d84:	20000f34 	.word	0x20000f34
 8004d88:	20000a5c 	.word	0x20000a5c
 8004d8c:	e000ed04 	.word	0xe000ed04

08004d90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d018      	beq.n	8004dd4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004da2:	4b14      	ldr	r3, [pc, #80]	@ (8004df4 <vTaskDelay+0x64>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <vTaskDelay+0x32>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	60bb      	str	r3, [r7, #8]
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	e7fd      	b.n	8004dbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004dc2:	f000 f883 	bl	8004ecc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fcf3 	bl	80057b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004dce:	f000 f88b 	bl	8004ee8 <xTaskResumeAll>
 8004dd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d107      	bne.n	8004dea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004dda:	4b07      	ldr	r3, [pc, #28]	@ (8004df8 <vTaskDelay+0x68>)
 8004ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000f54 	.word	0x20000f54
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	@ 0x28
 8004e00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e0a:	463a      	mov	r2, r7
 8004e0c:	1d39      	adds	r1, r7, #4
 8004e0e:	f107 0308 	add.w	r3, r7, #8
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff f834 	bl	8003e80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	9202      	str	r2, [sp, #8]
 8004e20:	9301      	str	r3, [sp, #4]
 8004e22:	2300      	movs	r3, #0
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	2300      	movs	r3, #0
 8004e28:	460a      	mov	r2, r1
 8004e2a:	4922      	ldr	r1, [pc, #136]	@ (8004eb4 <vTaskStartScheduler+0xb8>)
 8004e2c:	4822      	ldr	r0, [pc, #136]	@ (8004eb8 <vTaskStartScheduler+0xbc>)
 8004e2e:	f7ff fe09 	bl	8004a44 <xTaskCreateStatic>
 8004e32:	4603      	mov	r3, r0
 8004e34:	4a21      	ldr	r2, [pc, #132]	@ (8004ebc <vTaskStartScheduler+0xc0>)
 8004e36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e38:	4b20      	ldr	r3, [pc, #128]	@ (8004ebc <vTaskStartScheduler+0xc0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e40:	2301      	movs	r3, #1
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e001      	b.n	8004e4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d102      	bne.n	8004e56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e50:	f000 fd04 	bl	800585c <xTimerCreateTimerTask>
 8004e54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d116      	bne.n	8004e8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	613b      	str	r3, [r7, #16]
}
 8004e6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e70:	4b13      	ldr	r3, [pc, #76]	@ (8004ec0 <vTaskStartScheduler+0xc4>)
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295
 8004e76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e78:	4b12      	ldr	r3, [pc, #72]	@ (8004ec4 <vTaskStartScheduler+0xc8>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e7e:	4b12      	ldr	r3, [pc, #72]	@ (8004ec8 <vTaskStartScheduler+0xcc>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e84:	f001 f8d4 	bl	8006030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e88:	e00f      	b.n	8004eaa <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d10b      	bne.n	8004eaa <vTaskStartScheduler+0xae>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	60fb      	str	r3, [r7, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	e7fd      	b.n	8004ea6 <vTaskStartScheduler+0xaa>
}
 8004eaa:	bf00      	nop
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	0800aec8 	.word	0x0800aec8
 8004eb8:	080054ed 	.word	0x080054ed
 8004ebc:	20000f50 	.word	0x20000f50
 8004ec0:	20000f4c 	.word	0x20000f4c
 8004ec4:	20000f38 	.word	0x20000f38
 8004ec8:	20000f30 	.word	0x20000f30

08004ecc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ed0:	4b04      	ldr	r3, [pc, #16]	@ (8004ee4 <vTaskSuspendAll+0x18>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	4a03      	ldr	r2, [pc, #12]	@ (8004ee4 <vTaskSuspendAll+0x18>)
 8004ed8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004eda:	bf00      	nop
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	20000f54 	.word	0x20000f54

08004ee8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ef6:	4b42      	ldr	r3, [pc, #264]	@ (8005000 <xTaskResumeAll+0x118>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <xTaskResumeAll+0x2e>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	603b      	str	r3, [r7, #0]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f16:	f001 f92f 	bl	8006178 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f1a:	4b39      	ldr	r3, [pc, #228]	@ (8005000 <xTaskResumeAll+0x118>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	4a37      	ldr	r2, [pc, #220]	@ (8005000 <xTaskResumeAll+0x118>)
 8004f22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f24:	4b36      	ldr	r3, [pc, #216]	@ (8005000 <xTaskResumeAll+0x118>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d162      	bne.n	8004ff2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f2c:	4b35      	ldr	r3, [pc, #212]	@ (8005004 <xTaskResumeAll+0x11c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d05e      	beq.n	8004ff2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f34:	e02f      	b.n	8004f96 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f36:	4b34      	ldr	r3, [pc, #208]	@ (8005008 <xTaskResumeAll+0x120>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3318      	adds	r3, #24
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff f85a 	bl	8003ffc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff f855 	bl	8003ffc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f56:	4b2d      	ldr	r3, [pc, #180]	@ (800500c <xTaskResumeAll+0x124>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d903      	bls.n	8004f66 <xTaskResumeAll+0x7e>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f62:	4a2a      	ldr	r2, [pc, #168]	@ (800500c <xTaskResumeAll+0x124>)
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4a27      	ldr	r2, [pc, #156]	@ (8005010 <xTaskResumeAll+0x128>)
 8004f74:	441a      	add	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f7fe ffe0 	bl	8003f42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f86:	4b23      	ldr	r3, [pc, #140]	@ (8005014 <xTaskResumeAll+0x12c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004f90:	4b21      	ldr	r3, [pc, #132]	@ (8005018 <xTaskResumeAll+0x130>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f96:	4b1c      	ldr	r3, [pc, #112]	@ (8005008 <xTaskResumeAll+0x120>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1cb      	bne.n	8004f36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fa4:	f000 fb58 	bl	8005658 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800501c <xTaskResumeAll+0x134>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d010      	beq.n	8004fd6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fb4:	f000 f846 	bl	8005044 <xTaskIncrementTick>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004fbe:	4b16      	ldr	r3, [pc, #88]	@ (8005018 <xTaskResumeAll+0x130>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f1      	bne.n	8004fb4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004fd0:	4b12      	ldr	r3, [pc, #72]	@ (800501c <xTaskResumeAll+0x134>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fd6:	4b10      	ldr	r3, [pc, #64]	@ (8005018 <xTaskResumeAll+0x130>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8005020 <xTaskResumeAll+0x138>)
 8004fe4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ff2:	f001 f8f3 	bl	80061dc <vPortExitCritical>

	return xAlreadyYielded;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20000f54 	.word	0x20000f54
 8005004:	20000f2c 	.word	0x20000f2c
 8005008:	20000eec 	.word	0x20000eec
 800500c:	20000f34 	.word	0x20000f34
 8005010:	20000a5c 	.word	0x20000a5c
 8005014:	20000a58 	.word	0x20000a58
 8005018:	20000f40 	.word	0x20000f40
 800501c:	20000f3c 	.word	0x20000f3c
 8005020:	e000ed04 	.word	0xe000ed04

08005024 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800502a:	4b05      	ldr	r3, [pc, #20]	@ (8005040 <xTaskGetTickCount+0x1c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005030:	687b      	ldr	r3, [r7, #4]
}
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000f30 	.word	0x20000f30

08005044 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800504e:	4b4f      	ldr	r3, [pc, #316]	@ (800518c <xTaskIncrementTick+0x148>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	f040 8090 	bne.w	8005178 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005058:	4b4d      	ldr	r3, [pc, #308]	@ (8005190 <xTaskIncrementTick+0x14c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3301      	adds	r3, #1
 800505e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005060:	4a4b      	ldr	r2, [pc, #300]	@ (8005190 <xTaskIncrementTick+0x14c>)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d121      	bne.n	80050b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800506c:	4b49      	ldr	r3, [pc, #292]	@ (8005194 <xTaskIncrementTick+0x150>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	603b      	str	r3, [r7, #0]
}
 8005088:	bf00      	nop
 800508a:	bf00      	nop
 800508c:	e7fd      	b.n	800508a <xTaskIncrementTick+0x46>
 800508e:	4b41      	ldr	r3, [pc, #260]	@ (8005194 <xTaskIncrementTick+0x150>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	4b40      	ldr	r3, [pc, #256]	@ (8005198 <xTaskIncrementTick+0x154>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a3e      	ldr	r2, [pc, #248]	@ (8005194 <xTaskIncrementTick+0x150>)
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	4a3e      	ldr	r2, [pc, #248]	@ (8005198 <xTaskIncrementTick+0x154>)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	4b3e      	ldr	r3, [pc, #248]	@ (800519c <xTaskIncrementTick+0x158>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3301      	adds	r3, #1
 80050a8:	4a3c      	ldr	r2, [pc, #240]	@ (800519c <xTaskIncrementTick+0x158>)
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	f000 fad4 	bl	8005658 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050b0:	4b3b      	ldr	r3, [pc, #236]	@ (80051a0 <xTaskIncrementTick+0x15c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d349      	bcc.n	800514e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ba:	4b36      	ldr	r3, [pc, #216]	@ (8005194 <xTaskIncrementTick+0x150>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050c4:	4b36      	ldr	r3, [pc, #216]	@ (80051a0 <xTaskIncrementTick+0x15c>)
 80050c6:	f04f 32ff 	mov.w	r2, #4294967295
 80050ca:	601a      	str	r2, [r3, #0]
					break;
 80050cc:	e03f      	b.n	800514e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ce:	4b31      	ldr	r3, [pc, #196]	@ (8005194 <xTaskIncrementTick+0x150>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d203      	bcs.n	80050ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050e6:	4a2e      	ldr	r2, [pc, #184]	@ (80051a0 <xTaskIncrementTick+0x15c>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050ec:	e02f      	b.n	800514e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	3304      	adds	r3, #4
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe ff82 	bl	8003ffc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d004      	beq.n	800510a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	3318      	adds	r3, #24
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe ff79 	bl	8003ffc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510e:	4b25      	ldr	r3, [pc, #148]	@ (80051a4 <xTaskIncrementTick+0x160>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d903      	bls.n	800511e <xTaskIncrementTick+0xda>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511a:	4a22      	ldr	r2, [pc, #136]	@ (80051a4 <xTaskIncrementTick+0x160>)
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4a1f      	ldr	r2, [pc, #124]	@ (80051a8 <xTaskIncrementTick+0x164>)
 800512c:	441a      	add	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	3304      	adds	r3, #4
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f7fe ff04 	bl	8003f42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800513e:	4b1b      	ldr	r3, [pc, #108]	@ (80051ac <xTaskIncrementTick+0x168>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005144:	429a      	cmp	r2, r3
 8005146:	d3b8      	bcc.n	80050ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005148:	2301      	movs	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800514c:	e7b5      	b.n	80050ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800514e:	4b17      	ldr	r3, [pc, #92]	@ (80051ac <xTaskIncrementTick+0x168>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005154:	4914      	ldr	r1, [pc, #80]	@ (80051a8 <xTaskIncrementTick+0x164>)
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d901      	bls.n	800516a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005166:	2301      	movs	r3, #1
 8005168:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800516a:	4b11      	ldr	r3, [pc, #68]	@ (80051b0 <xTaskIncrementTick+0x16c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d007      	beq.n	8005182 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005172:	2301      	movs	r3, #1
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	e004      	b.n	8005182 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005178:	4b0e      	ldr	r3, [pc, #56]	@ (80051b4 <xTaskIncrementTick+0x170>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3301      	adds	r3, #1
 800517e:	4a0d      	ldr	r2, [pc, #52]	@ (80051b4 <xTaskIncrementTick+0x170>)
 8005180:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005182:	697b      	ldr	r3, [r7, #20]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000f54 	.word	0x20000f54
 8005190:	20000f30 	.word	0x20000f30
 8005194:	20000ee4 	.word	0x20000ee4
 8005198:	20000ee8 	.word	0x20000ee8
 800519c:	20000f44 	.word	0x20000f44
 80051a0:	20000f4c 	.word	0x20000f4c
 80051a4:	20000f34 	.word	0x20000f34
 80051a8:	20000a5c 	.word	0x20000a5c
 80051ac:	20000a58 	.word	0x20000a58
 80051b0:	20000f40 	.word	0x20000f40
 80051b4:	20000f3c 	.word	0x20000f3c

080051b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051be:	4b28      	ldr	r3, [pc, #160]	@ (8005260 <vTaskSwitchContext+0xa8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051c6:	4b27      	ldr	r3, [pc, #156]	@ (8005264 <vTaskSwitchContext+0xac>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051cc:	e042      	b.n	8005254 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80051ce:	4b25      	ldr	r3, [pc, #148]	@ (8005264 <vTaskSwitchContext+0xac>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d4:	4b24      	ldr	r3, [pc, #144]	@ (8005268 <vTaskSwitchContext+0xb0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e011      	b.n	8005200 <vTaskSwitchContext+0x48>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10b      	bne.n	80051fa <vTaskSwitchContext+0x42>
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	607b      	str	r3, [r7, #4]
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
 80051f8:	e7fd      	b.n	80051f6 <vTaskSwitchContext+0x3e>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	491a      	ldr	r1, [pc, #104]	@ (800526c <vTaskSwitchContext+0xb4>)
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0e3      	beq.n	80051dc <vTaskSwitchContext+0x24>
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4a13      	ldr	r2, [pc, #76]	@ (800526c <vTaskSwitchContext+0xb4>)
 8005220:	4413      	add	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	605a      	str	r2, [r3, #4]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	3308      	adds	r3, #8
 8005236:	429a      	cmp	r2, r3
 8005238:	d104      	bne.n	8005244 <vTaskSwitchContext+0x8c>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	605a      	str	r2, [r3, #4]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	4a09      	ldr	r2, [pc, #36]	@ (8005270 <vTaskSwitchContext+0xb8>)
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	4a06      	ldr	r2, [pc, #24]	@ (8005268 <vTaskSwitchContext+0xb0>)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6013      	str	r3, [r2, #0]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	20000f54 	.word	0x20000f54
 8005264:	20000f40 	.word	0x20000f40
 8005268:	20000f34 	.word	0x20000f34
 800526c:	20000a5c 	.word	0x20000a5c
 8005270:	20000a58 	.word	0x20000a58

08005274 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	60fb      	str	r3, [r7, #12]
}
 8005296:	bf00      	nop
 8005298:	bf00      	nop
 800529a:	e7fd      	b.n	8005298 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800529c:	4b07      	ldr	r3, [pc, #28]	@ (80052bc <vTaskPlaceOnEventList+0x48>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3318      	adds	r3, #24
 80052a2:	4619      	mov	r1, r3
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7fe fe70 	bl	8003f8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052aa:	2101      	movs	r1, #1
 80052ac:	6838      	ldr	r0, [r7, #0]
 80052ae:	f000 fa81 	bl	80057b4 <prvAddCurrentTaskToDelayedList>
}
 80052b2:	bf00      	nop
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000a58 	.word	0x20000a58

080052c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10b      	bne.n	80052ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	617b      	str	r3, [r7, #20]
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	e7fd      	b.n	80052e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005314 <vTaskPlaceOnEventListRestricted+0x54>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3318      	adds	r3, #24
 80052f0:	4619      	mov	r1, r3
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7fe fe25 	bl	8003f42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80052fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005302:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	68b8      	ldr	r0, [r7, #8]
 8005308:	f000 fa54 	bl	80057b4 <prvAddCurrentTaskToDelayedList>
	}
 800530c:	bf00      	nop
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20000a58 	.word	0x20000a58

08005318 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	60fb      	str	r3, [r7, #12]
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	e7fd      	b.n	8005342 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	3318      	adds	r3, #24
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fe56 	bl	8003ffc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005350:	4b1d      	ldr	r3, [pc, #116]	@ (80053c8 <xTaskRemoveFromEventList+0xb0>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d11d      	bne.n	8005394 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	3304      	adds	r3, #4
 800535c:	4618      	mov	r0, r3
 800535e:	f7fe fe4d 	bl	8003ffc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005366:	4b19      	ldr	r3, [pc, #100]	@ (80053cc <xTaskRemoveFromEventList+0xb4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d903      	bls.n	8005376 <xTaskRemoveFromEventList+0x5e>
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	4a16      	ldr	r2, [pc, #88]	@ (80053cc <xTaskRemoveFromEventList+0xb4>)
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4a13      	ldr	r2, [pc, #76]	@ (80053d0 <xTaskRemoveFromEventList+0xb8>)
 8005384:	441a      	add	r2, r3
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	3304      	adds	r3, #4
 800538a:	4619      	mov	r1, r3
 800538c:	4610      	mov	r0, r2
 800538e:	f7fe fdd8 	bl	8003f42 <vListInsertEnd>
 8005392:	e005      	b.n	80053a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	3318      	adds	r3, #24
 8005398:	4619      	mov	r1, r3
 800539a:	480e      	ldr	r0, [pc, #56]	@ (80053d4 <xTaskRemoveFromEventList+0xbc>)
 800539c:	f7fe fdd1 	bl	8003f42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a4:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <xTaskRemoveFromEventList+0xc0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d905      	bls.n	80053ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053ae:	2301      	movs	r3, #1
 80053b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053b2:	4b0a      	ldr	r3, [pc, #40]	@ (80053dc <xTaskRemoveFromEventList+0xc4>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	e001      	b.n	80053be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053be:	697b      	ldr	r3, [r7, #20]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20000f54 	.word	0x20000f54
 80053cc:	20000f34 	.word	0x20000f34
 80053d0:	20000a5c 	.word	0x20000a5c
 80053d4:	20000eec 	.word	0x20000eec
 80053d8:	20000a58 	.word	0x20000a58
 80053dc:	20000f40 	.word	0x20000f40

080053e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053e8:	4b06      	ldr	r3, [pc, #24]	@ (8005404 <vTaskInternalSetTimeOutState+0x24>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053f0:	4b05      	ldr	r3, [pc, #20]	@ (8005408 <vTaskInternalSetTimeOutState+0x28>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	605a      	str	r2, [r3, #4]
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	20000f44 	.word	0x20000f44
 8005408:	20000f30 	.word	0x20000f30

0800540c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	613b      	str	r3, [r7, #16]
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10b      	bne.n	8005452 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	60fb      	str	r3, [r7, #12]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005452:	f000 fe91 	bl	8006178 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005456:	4b1d      	ldr	r3, [pc, #116]	@ (80054cc <xTaskCheckForTimeOut+0xc0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d102      	bne.n	8005476 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005470:	2300      	movs	r3, #0
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	e023      	b.n	80054be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	4b15      	ldr	r3, [pc, #84]	@ (80054d0 <xTaskCheckForTimeOut+0xc4>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d007      	beq.n	8005492 <xTaskCheckForTimeOut+0x86>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	429a      	cmp	r2, r3
 800548a:	d302      	bcc.n	8005492 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800548c:	2301      	movs	r3, #1
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	e015      	b.n	80054be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	429a      	cmp	r2, r3
 800549a:	d20b      	bcs.n	80054b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	1ad2      	subs	r2, r2, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ff99 	bl	80053e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	e004      	b.n	80054be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054be:	f000 fe8d 	bl	80061dc <vPortExitCritical>

	return xReturn;
 80054c2:	69fb      	ldr	r3, [r7, #28]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3720      	adds	r7, #32
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000f30 	.word	0x20000f30
 80054d0:	20000f44 	.word	0x20000f44

080054d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054d8:	4b03      	ldr	r3, [pc, #12]	@ (80054e8 <vTaskMissedYield+0x14>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
}
 80054de:	bf00      	nop
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	20000f40 	.word	0x20000f40

080054ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054f4:	f000 f852 	bl	800559c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054f8:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <prvIdleTask+0x28>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d9f9      	bls.n	80054f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005500:	4b05      	ldr	r3, [pc, #20]	@ (8005518 <prvIdleTask+0x2c>)
 8005502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005510:	e7f0      	b.n	80054f4 <prvIdleTask+0x8>
 8005512:	bf00      	nop
 8005514:	20000a5c 	.word	0x20000a5c
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005522:	2300      	movs	r3, #0
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	e00c      	b.n	8005542 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4a12      	ldr	r2, [pc, #72]	@ (800557c <prvInitialiseTaskLists+0x60>)
 8005534:	4413      	add	r3, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f7fe fcd6 	bl	8003ee8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3301      	adds	r3, #1
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b37      	cmp	r3, #55	@ 0x37
 8005546:	d9ef      	bls.n	8005528 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005548:	480d      	ldr	r0, [pc, #52]	@ (8005580 <prvInitialiseTaskLists+0x64>)
 800554a:	f7fe fccd 	bl	8003ee8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800554e:	480d      	ldr	r0, [pc, #52]	@ (8005584 <prvInitialiseTaskLists+0x68>)
 8005550:	f7fe fcca 	bl	8003ee8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005554:	480c      	ldr	r0, [pc, #48]	@ (8005588 <prvInitialiseTaskLists+0x6c>)
 8005556:	f7fe fcc7 	bl	8003ee8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800555a:	480c      	ldr	r0, [pc, #48]	@ (800558c <prvInitialiseTaskLists+0x70>)
 800555c:	f7fe fcc4 	bl	8003ee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005560:	480b      	ldr	r0, [pc, #44]	@ (8005590 <prvInitialiseTaskLists+0x74>)
 8005562:	f7fe fcc1 	bl	8003ee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005566:	4b0b      	ldr	r3, [pc, #44]	@ (8005594 <prvInitialiseTaskLists+0x78>)
 8005568:	4a05      	ldr	r2, [pc, #20]	@ (8005580 <prvInitialiseTaskLists+0x64>)
 800556a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800556c:	4b0a      	ldr	r3, [pc, #40]	@ (8005598 <prvInitialiseTaskLists+0x7c>)
 800556e:	4a05      	ldr	r2, [pc, #20]	@ (8005584 <prvInitialiseTaskLists+0x68>)
 8005570:	601a      	str	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000a5c 	.word	0x20000a5c
 8005580:	20000ebc 	.word	0x20000ebc
 8005584:	20000ed0 	.word	0x20000ed0
 8005588:	20000eec 	.word	0x20000eec
 800558c:	20000f00 	.word	0x20000f00
 8005590:	20000f18 	.word	0x20000f18
 8005594:	20000ee4 	.word	0x20000ee4
 8005598:	20000ee8 	.word	0x20000ee8

0800559c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055a2:	e019      	b.n	80055d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055a4:	f000 fde8 	bl	8006178 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a8:	4b10      	ldr	r3, [pc, #64]	@ (80055ec <prvCheckTasksWaitingTermination+0x50>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe fd21 	bl	8003ffc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055ba:	4b0d      	ldr	r3, [pc, #52]	@ (80055f0 <prvCheckTasksWaitingTermination+0x54>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3b01      	subs	r3, #1
 80055c0:	4a0b      	ldr	r2, [pc, #44]	@ (80055f0 <prvCheckTasksWaitingTermination+0x54>)
 80055c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055c4:	4b0b      	ldr	r3, [pc, #44]	@ (80055f4 <prvCheckTasksWaitingTermination+0x58>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	4a0a      	ldr	r2, [pc, #40]	@ (80055f4 <prvCheckTasksWaitingTermination+0x58>)
 80055cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055ce:	f000 fe05 	bl	80061dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f810 	bl	80055f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055d8:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <prvCheckTasksWaitingTermination+0x58>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e1      	bne.n	80055a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000f00 	.word	0x20000f00
 80055f0:	20000f2c 	.word	0x20000f2c
 80055f4:	20000f14 	.word	0x20000f14

080055f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005606:	2b00      	cmp	r3, #0
 8005608:	d108      	bne.n	800561c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560e:	4618      	mov	r0, r3
 8005610:	f000 ffa2 	bl	8006558 <vPortFree>
				vPortFree( pxTCB );
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 ff9f 	bl	8006558 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800561a:	e019      	b.n	8005650 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005622:	2b01      	cmp	r3, #1
 8005624:	d103      	bne.n	800562e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 ff96 	bl	8006558 <vPortFree>
	}
 800562c:	e010      	b.n	8005650 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005634:	2b02      	cmp	r3, #2
 8005636:	d00b      	beq.n	8005650 <prvDeleteTCB+0x58>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	60fb      	str	r3, [r7, #12]
}
 800564a:	bf00      	nop
 800564c:	bf00      	nop
 800564e:	e7fd      	b.n	800564c <prvDeleteTCB+0x54>
	}
 8005650:	bf00      	nop
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800565e:	4b0c      	ldr	r3, [pc, #48]	@ (8005690 <prvResetNextTaskUnblockTime+0x38>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005668:	4b0a      	ldr	r3, [pc, #40]	@ (8005694 <prvResetNextTaskUnblockTime+0x3c>)
 800566a:	f04f 32ff 	mov.w	r2, #4294967295
 800566e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005670:	e008      	b.n	8005684 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005672:	4b07      	ldr	r3, [pc, #28]	@ (8005690 <prvResetNextTaskUnblockTime+0x38>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	4a04      	ldr	r2, [pc, #16]	@ (8005694 <prvResetNextTaskUnblockTime+0x3c>)
 8005682:	6013      	str	r3, [r2, #0]
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	20000ee4 	.word	0x20000ee4
 8005694:	20000f4c 	.word	0x20000f4c

08005698 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800569e:	4b0b      	ldr	r3, [pc, #44]	@ (80056cc <xTaskGetSchedulerState+0x34>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d102      	bne.n	80056ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056a6:	2301      	movs	r3, #1
 80056a8:	607b      	str	r3, [r7, #4]
 80056aa:	e008      	b.n	80056be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ac:	4b08      	ldr	r3, [pc, #32]	@ (80056d0 <xTaskGetSchedulerState+0x38>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d102      	bne.n	80056ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056b4:	2302      	movs	r3, #2
 80056b6:	607b      	str	r3, [r7, #4]
 80056b8:	e001      	b.n	80056be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056ba:	2300      	movs	r3, #0
 80056bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056be:	687b      	ldr	r3, [r7, #4]
	}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	20000f38 	.word	0x20000f38
 80056d0:	20000f54 	.word	0x20000f54

080056d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d058      	beq.n	800579c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056ea:	4b2f      	ldr	r3, [pc, #188]	@ (80057a8 <xTaskPriorityDisinherit+0xd4>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d00b      	beq.n	800570c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	60fb      	str	r3, [r7, #12]
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	e7fd      	b.n	8005708 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10b      	bne.n	800572c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	60bb      	str	r3, [r7, #8]
}
 8005726:	bf00      	nop
 8005728:	bf00      	nop
 800572a:	e7fd      	b.n	8005728 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005730:	1e5a      	subs	r2, r3, #1
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800573e:	429a      	cmp	r2, r3
 8005740:	d02c      	beq.n	800579c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005746:	2b00      	cmp	r3, #0
 8005748:	d128      	bne.n	800579c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	3304      	adds	r3, #4
 800574e:	4618      	mov	r0, r3
 8005750:	f7fe fc54 	bl	8003ffc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800576c:	4b0f      	ldr	r3, [pc, #60]	@ (80057ac <xTaskPriorityDisinherit+0xd8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d903      	bls.n	800577c <xTaskPriorityDisinherit+0xa8>
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005778:	4a0c      	ldr	r2, [pc, #48]	@ (80057ac <xTaskPriorityDisinherit+0xd8>)
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4a09      	ldr	r2, [pc, #36]	@ (80057b0 <xTaskPriorityDisinherit+0xdc>)
 800578a:	441a      	add	r2, r3
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	3304      	adds	r3, #4
 8005790:	4619      	mov	r1, r3
 8005792:	4610      	mov	r0, r2
 8005794:	f7fe fbd5 	bl	8003f42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005798:	2301      	movs	r3, #1
 800579a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800579c:	697b      	ldr	r3, [r7, #20]
	}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000a58 	.word	0x20000a58
 80057ac:	20000f34 	.word	0x20000f34
 80057b0:	20000a5c 	.word	0x20000a5c

080057b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057be:	4b21      	ldr	r3, [pc, #132]	@ (8005844 <prvAddCurrentTaskToDelayedList+0x90>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057c4:	4b20      	ldr	r3, [pc, #128]	@ (8005848 <prvAddCurrentTaskToDelayedList+0x94>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3304      	adds	r3, #4
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe fc16 	bl	8003ffc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d10a      	bne.n	80057ee <prvAddCurrentTaskToDelayedList+0x3a>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057de:	4b1a      	ldr	r3, [pc, #104]	@ (8005848 <prvAddCurrentTaskToDelayedList+0x94>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4619      	mov	r1, r3
 80057e6:	4819      	ldr	r0, [pc, #100]	@ (800584c <prvAddCurrentTaskToDelayedList+0x98>)
 80057e8:	f7fe fbab 	bl	8003f42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057ec:	e026      	b.n	800583c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4413      	add	r3, r2
 80057f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057f6:	4b14      	ldr	r3, [pc, #80]	@ (8005848 <prvAddCurrentTaskToDelayedList+0x94>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	429a      	cmp	r2, r3
 8005804:	d209      	bcs.n	800581a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005806:	4b12      	ldr	r3, [pc, #72]	@ (8005850 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4b0f      	ldr	r3, [pc, #60]	@ (8005848 <prvAddCurrentTaskToDelayedList+0x94>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3304      	adds	r3, #4
 8005810:	4619      	mov	r1, r3
 8005812:	4610      	mov	r0, r2
 8005814:	f7fe fbb9 	bl	8003f8a <vListInsert>
}
 8005818:	e010      	b.n	800583c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800581a:	4b0e      	ldr	r3, [pc, #56]	@ (8005854 <prvAddCurrentTaskToDelayedList+0xa0>)
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	4b0a      	ldr	r3, [pc, #40]	@ (8005848 <prvAddCurrentTaskToDelayedList+0x94>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3304      	adds	r3, #4
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	f7fe fbaf 	bl	8003f8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800582c:	4b0a      	ldr	r3, [pc, #40]	@ (8005858 <prvAddCurrentTaskToDelayedList+0xa4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	429a      	cmp	r2, r3
 8005834:	d202      	bcs.n	800583c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005836:	4a08      	ldr	r2, [pc, #32]	@ (8005858 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	6013      	str	r3, [r2, #0]
}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000f30 	.word	0x20000f30
 8005848:	20000a58 	.word	0x20000a58
 800584c:	20000f18 	.word	0x20000f18
 8005850:	20000ee8 	.word	0x20000ee8
 8005854:	20000ee4 	.word	0x20000ee4
 8005858:	20000f4c 	.word	0x20000f4c

0800585c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08a      	sub	sp, #40	@ 0x28
 8005860:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005866:	f000 fb13 	bl	8005e90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800586a:	4b1d      	ldr	r3, [pc, #116]	@ (80058e0 <xTimerCreateTimerTask+0x84>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d021      	beq.n	80058b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800587a:	1d3a      	adds	r2, r7, #4
 800587c:	f107 0108 	add.w	r1, r7, #8
 8005880:	f107 030c 	add.w	r3, r7, #12
 8005884:	4618      	mov	r0, r3
 8005886:	f7fe fb15 	bl	8003eb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	9202      	str	r2, [sp, #8]
 8005892:	9301      	str	r3, [sp, #4]
 8005894:	2302      	movs	r3, #2
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	2300      	movs	r3, #0
 800589a:	460a      	mov	r2, r1
 800589c:	4911      	ldr	r1, [pc, #68]	@ (80058e4 <xTimerCreateTimerTask+0x88>)
 800589e:	4812      	ldr	r0, [pc, #72]	@ (80058e8 <xTimerCreateTimerTask+0x8c>)
 80058a0:	f7ff f8d0 	bl	8004a44 <xTaskCreateStatic>
 80058a4:	4603      	mov	r3, r0
 80058a6:	4a11      	ldr	r2, [pc, #68]	@ (80058ec <xTimerCreateTimerTask+0x90>)
 80058a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80058aa:	4b10      	ldr	r3, [pc, #64]	@ (80058ec <xTimerCreateTimerTask+0x90>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80058b2:	2301      	movs	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10b      	bne.n	80058d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	613b      	str	r3, [r7, #16]
}
 80058ce:	bf00      	nop
 80058d0:	bf00      	nop
 80058d2:	e7fd      	b.n	80058d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80058d4:	697b      	ldr	r3, [r7, #20]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20000f88 	.word	0x20000f88
 80058e4:	0800aed0 	.word	0x0800aed0
 80058e8:	08005a29 	.word	0x08005a29
 80058ec:	20000f8c 	.word	0x20000f8c

080058f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	@ 0x28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058fe:	2300      	movs	r3, #0
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10b      	bne.n	8005920 <xTimerGenericCommand+0x30>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	623b      	str	r3, [r7, #32]
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	e7fd      	b.n	800591c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005920:	4b19      	ldr	r3, [pc, #100]	@ (8005988 <xTimerGenericCommand+0x98>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d02a      	beq.n	800597e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b05      	cmp	r3, #5
 8005938:	dc18      	bgt.n	800596c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800593a:	f7ff fead 	bl	8005698 <xTaskGetSchedulerState>
 800593e:	4603      	mov	r3, r0
 8005940:	2b02      	cmp	r3, #2
 8005942:	d109      	bne.n	8005958 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005944:	4b10      	ldr	r3, [pc, #64]	@ (8005988 <xTimerGenericCommand+0x98>)
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	f107 0110 	add.w	r1, r7, #16
 800594c:	2300      	movs	r3, #0
 800594e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005950:	f7fe fc88 	bl	8004264 <xQueueGenericSend>
 8005954:	6278      	str	r0, [r7, #36]	@ 0x24
 8005956:	e012      	b.n	800597e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005958:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <xTimerGenericCommand+0x98>)
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	f107 0110 	add.w	r1, r7, #16
 8005960:	2300      	movs	r3, #0
 8005962:	2200      	movs	r2, #0
 8005964:	f7fe fc7e 	bl	8004264 <xQueueGenericSend>
 8005968:	6278      	str	r0, [r7, #36]	@ 0x24
 800596a:	e008      	b.n	800597e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800596c:	4b06      	ldr	r3, [pc, #24]	@ (8005988 <xTimerGenericCommand+0x98>)
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	f107 0110 	add.w	r1, r7, #16
 8005974:	2300      	movs	r3, #0
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	f7fe fd76 	bl	8004468 <xQueueGenericSendFromISR>
 800597c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005980:	4618      	mov	r0, r3
 8005982:	3728      	adds	r7, #40	@ 0x28
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20000f88 	.word	0x20000f88

0800598c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af02      	add	r7, sp, #8
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005996:	4b23      	ldr	r3, [pc, #140]	@ (8005a24 <prvProcessExpiredTimer+0x98>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	3304      	adds	r3, #4
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fe fb29 	bl	8003ffc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d023      	beq.n	8005a00 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	699a      	ldr	r2, [r3, #24]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	18d1      	adds	r1, r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	6978      	ldr	r0, [r7, #20]
 80059c6:	f000 f8d5 	bl	8005b74 <prvInsertTimerInActiveList>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d020      	beq.n	8005a12 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059d0:	2300      	movs	r3, #0
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	2300      	movs	r3, #0
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	2100      	movs	r1, #0
 80059da:	6978      	ldr	r0, [r7, #20]
 80059dc:	f7ff ff88 	bl	80058f0 <xTimerGenericCommand>
 80059e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d114      	bne.n	8005a12 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	60fb      	str	r3, [r7, #12]
}
 80059fa:	bf00      	nop
 80059fc:	bf00      	nop
 80059fe:	e7fd      	b.n	80059fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a06:	f023 0301 	bic.w	r3, r3, #1
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	6978      	ldr	r0, [r7, #20]
 8005a18:	4798      	blx	r3
}
 8005a1a:	bf00      	nop
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000f80 	.word	0x20000f80

08005a28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a30:	f107 0308 	add.w	r3, r7, #8
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 f859 	bl	8005aec <prvGetNextExpireTime>
 8005a3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f805 	bl	8005a50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a46:	f000 f8d7 	bl	8005bf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a4a:	bf00      	nop
 8005a4c:	e7f0      	b.n	8005a30 <prvTimerTask+0x8>
	...

08005a50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a5a:	f7ff fa37 	bl	8004ecc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a5e:	f107 0308 	add.w	r3, r7, #8
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 f866 	bl	8005b34 <prvSampleTimeNow>
 8005a68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d130      	bne.n	8005ad2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <prvProcessTimerOrBlockTask+0x3c>
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d806      	bhi.n	8005a8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a7e:	f7ff fa33 	bl	8004ee8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a82:	68f9      	ldr	r1, [r7, #12]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff ff81 	bl	800598c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a8a:	e024      	b.n	8005ad6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a92:	4b13      	ldr	r3, [pc, #76]	@ (8005ae0 <prvProcessTimerOrBlockTask+0x90>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <prvProcessTimerOrBlockTask+0x50>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <prvProcessTimerOrBlockTask+0x52>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae4 <prvProcessTimerOrBlockTask+0x94>)
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f7fe ff93 	bl	80049dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ab6:	f7ff fa17 	bl	8004ee8 <xTaskResumeAll>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10a      	bne.n	8005ad6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ac0:	4b09      	ldr	r3, [pc, #36]	@ (8005ae8 <prvProcessTimerOrBlockTask+0x98>)
 8005ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	f3bf 8f6f 	isb	sy
}
 8005ad0:	e001      	b.n	8005ad6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ad2:	f7ff fa09 	bl	8004ee8 <xTaskResumeAll>
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000f84 	.word	0x20000f84
 8005ae4:	20000f88 	.word	0x20000f88
 8005ae8:	e000ed04 	.word	0xe000ed04

08005aec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005af4:	4b0e      	ldr	r3, [pc, #56]	@ (8005b30 <prvGetNextExpireTime+0x44>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <prvGetNextExpireTime+0x16>
 8005afe:	2201      	movs	r2, #1
 8005b00:	e000      	b.n	8005b04 <prvGetNextExpireTime+0x18>
 8005b02:	2200      	movs	r2, #0
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d105      	bne.n	8005b1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b10:	4b07      	ldr	r3, [pc, #28]	@ (8005b30 <prvGetNextExpireTime+0x44>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	e001      	b.n	8005b20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b20:	68fb      	ldr	r3, [r7, #12]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20000f80 	.word	0x20000f80

08005b34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b3c:	f7ff fa72 	bl	8005024 <xTaskGetTickCount>
 8005b40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b42:	4b0b      	ldr	r3, [pc, #44]	@ (8005b70 <prvSampleTimeNow+0x3c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d205      	bcs.n	8005b58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b4c:	f000 f93a 	bl	8005dc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	e002      	b.n	8005b5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b5e:	4a04      	ldr	r2, [pc, #16]	@ (8005b70 <prvSampleTimeNow+0x3c>)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b64:	68fb      	ldr	r3, [r7, #12]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000f90 	.word	0x20000f90

08005b74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d812      	bhi.n	8005bc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	1ad2      	subs	r2, r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d302      	bcc.n	8005bae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	e01b      	b.n	8005be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005bae:	4b10      	ldr	r3, [pc, #64]	@ (8005bf0 <prvInsertTimerInActiveList+0x7c>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4610      	mov	r0, r2
 8005bba:	f7fe f9e6 	bl	8003f8a <vListInsert>
 8005bbe:	e012      	b.n	8005be6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d206      	bcs.n	8005bd6 <prvInsertTimerInActiveList+0x62>
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d302      	bcc.n	8005bd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	e007      	b.n	8005be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bd6:	4b07      	ldr	r3, [pc, #28]	@ (8005bf4 <prvInsertTimerInActiveList+0x80>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f7fe f9d2 	bl	8003f8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005be6:	697b      	ldr	r3, [r7, #20]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20000f84 	.word	0x20000f84
 8005bf4:	20000f80 	.word	0x20000f80

08005bf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08e      	sub	sp, #56	@ 0x38
 8005bfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bfe:	e0ce      	b.n	8005d9e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	da19      	bge.n	8005c3a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c06:	1d3b      	adds	r3, r7, #4
 8005c08:	3304      	adds	r3, #4
 8005c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10b      	bne.n	8005c2a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	61fb      	str	r3, [r7, #28]
}
 8005c24:	bf00      	nop
 8005c26:	bf00      	nop
 8005c28:	e7fd      	b.n	8005c26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c30:	6850      	ldr	r0, [r2, #4]
 8005c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c34:	6892      	ldr	r2, [r2, #8]
 8005c36:	4611      	mov	r1, r2
 8005c38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f2c0 80ae 	blt.w	8005d9e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d004      	beq.n	8005c58 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c50:	3304      	adds	r3, #4
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe f9d2 	bl	8003ffc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c58:	463b      	mov	r3, r7
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff ff6a 	bl	8005b34 <prvSampleTimeNow>
 8005c60:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b09      	cmp	r3, #9
 8005c66:	f200 8097 	bhi.w	8005d98 <prvProcessReceivedCommands+0x1a0>
 8005c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c70 <prvProcessReceivedCommands+0x78>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005c99 	.word	0x08005c99
 8005c74:	08005c99 	.word	0x08005c99
 8005c78:	08005c99 	.word	0x08005c99
 8005c7c:	08005d0f 	.word	0x08005d0f
 8005c80:	08005d23 	.word	0x08005d23
 8005c84:	08005d6f 	.word	0x08005d6f
 8005c88:	08005c99 	.word	0x08005c99
 8005c8c:	08005c99 	.word	0x08005c99
 8005c90:	08005d0f 	.word	0x08005d0f
 8005c94:	08005d23 	.word	0x08005d23
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	18d1      	adds	r1, r2, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cb8:	f7ff ff5c 	bl	8005b74 <prvInsertTimerInActiveList>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d06c      	beq.n	8005d9c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d061      	beq.n	8005d9c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	441a      	add	r2, r3
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cea:	f7ff fe01 	bl	80058f0 <xTimerGenericCommand>
 8005cee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d152      	bne.n	8005d9c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	61bb      	str	r3, [r7, #24]
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	e7fd      	b.n	8005d0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005d20:	e03d      	b.n	8005d9e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d28:	f043 0301 	orr.w	r3, r3, #1
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d38:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	617b      	str	r3, [r7, #20]
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	e7fd      	b.n	8005d56 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	18d1      	adds	r1, r2, r3
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d68:	f7ff ff04 	bl	8005b74 <prvInsertTimerInActiveList>
					break;
 8005d6c:	e017      	b.n	8005d9e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d103      	bne.n	8005d84 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005d7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d7e:	f000 fbeb 	bl	8006558 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d82:	e00c      	b.n	8005d9e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d8a:	f023 0301 	bic.w	r3, r3, #1
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005d96:	e002      	b.n	8005d9e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005d98:	bf00      	nop
 8005d9a:	e000      	b.n	8005d9e <prvProcessReceivedCommands+0x1a6>
					break;
 8005d9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d9e:	4b08      	ldr	r3, [pc, #32]	@ (8005dc0 <prvProcessReceivedCommands+0x1c8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	1d39      	adds	r1, r7, #4
 8005da4:	2200      	movs	r2, #0
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fe fbfc 	bl	80045a4 <xQueueReceive>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f47f af26 	bne.w	8005c00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	3730      	adds	r7, #48	@ 0x30
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000f88 	.word	0x20000f88

08005dc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dca:	e049      	b.n	8005e60 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8005e88 <prvSwitchTimerLists+0xc4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8005e88 <prvSwitchTimerLists+0xc4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fe f909 	bl	8003ffc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d02f      	beq.n	8005e60 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4413      	add	r3, r2
 8005e08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d90e      	bls.n	8005e30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005e88 <prvSwitchTimerLists+0xc4>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f7fe f8ae 	bl	8003f8a <vListInsert>
 8005e2e:	e017      	b.n	8005e60 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e30:	2300      	movs	r3, #0
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	2300      	movs	r3, #0
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	2100      	movs	r1, #0
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff fd58 	bl	80058f0 <xTimerGenericCommand>
 8005e40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10b      	bne.n	8005e60 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	603b      	str	r3, [r7, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	bf00      	nop
 8005e5e:	e7fd      	b.n	8005e5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e60:	4b09      	ldr	r3, [pc, #36]	@ (8005e88 <prvSwitchTimerLists+0xc4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1b0      	bne.n	8005dcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e6a:	4b07      	ldr	r3, [pc, #28]	@ (8005e88 <prvSwitchTimerLists+0xc4>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e70:	4b06      	ldr	r3, [pc, #24]	@ (8005e8c <prvSwitchTimerLists+0xc8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a04      	ldr	r2, [pc, #16]	@ (8005e88 <prvSwitchTimerLists+0xc4>)
 8005e76:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e78:	4a04      	ldr	r2, [pc, #16]	@ (8005e8c <prvSwitchTimerLists+0xc8>)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	6013      	str	r3, [r2, #0]
}
 8005e7e:	bf00      	nop
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000f80 	.word	0x20000f80
 8005e8c:	20000f84 	.word	0x20000f84

08005e90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e96:	f000 f96f 	bl	8006178 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e9a:	4b15      	ldr	r3, [pc, #84]	@ (8005ef0 <prvCheckForValidListAndQueue+0x60>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d120      	bne.n	8005ee4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ea2:	4814      	ldr	r0, [pc, #80]	@ (8005ef4 <prvCheckForValidListAndQueue+0x64>)
 8005ea4:	f7fe f820 	bl	8003ee8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ea8:	4813      	ldr	r0, [pc, #76]	@ (8005ef8 <prvCheckForValidListAndQueue+0x68>)
 8005eaa:	f7fe f81d 	bl	8003ee8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005eae:	4b13      	ldr	r3, [pc, #76]	@ (8005efc <prvCheckForValidListAndQueue+0x6c>)
 8005eb0:	4a10      	ldr	r2, [pc, #64]	@ (8005ef4 <prvCheckForValidListAndQueue+0x64>)
 8005eb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005eb4:	4b12      	ldr	r3, [pc, #72]	@ (8005f00 <prvCheckForValidListAndQueue+0x70>)
 8005eb6:	4a10      	ldr	r2, [pc, #64]	@ (8005ef8 <prvCheckForValidListAndQueue+0x68>)
 8005eb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005eba:	2300      	movs	r3, #0
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	4b11      	ldr	r3, [pc, #68]	@ (8005f04 <prvCheckForValidListAndQueue+0x74>)
 8005ec0:	4a11      	ldr	r2, [pc, #68]	@ (8005f08 <prvCheckForValidListAndQueue+0x78>)
 8005ec2:	2110      	movs	r1, #16
 8005ec4:	200a      	movs	r0, #10
 8005ec6:	f7fe f92d 	bl	8004124 <xQueueGenericCreateStatic>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	4a08      	ldr	r2, [pc, #32]	@ (8005ef0 <prvCheckForValidListAndQueue+0x60>)
 8005ece:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ed0:	4b07      	ldr	r3, [pc, #28]	@ (8005ef0 <prvCheckForValidListAndQueue+0x60>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ed8:	4b05      	ldr	r3, [pc, #20]	@ (8005ef0 <prvCheckForValidListAndQueue+0x60>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	490b      	ldr	r1, [pc, #44]	@ (8005f0c <prvCheckForValidListAndQueue+0x7c>)
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe fd52 	bl	8004988 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ee4:	f000 f97a 	bl	80061dc <vPortExitCritical>
}
 8005ee8:	bf00      	nop
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000f88 	.word	0x20000f88
 8005ef4:	20000f58 	.word	0x20000f58
 8005ef8:	20000f6c 	.word	0x20000f6c
 8005efc:	20000f80 	.word	0x20000f80
 8005f00:	20000f84 	.word	0x20000f84
 8005f04:	20001034 	.word	0x20001034
 8005f08:	20000f94 	.word	0x20000f94
 8005f0c:	0800aed8 	.word	0x0800aed8

08005f10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3b04      	subs	r3, #4
 8005f20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3b04      	subs	r3, #4
 8005f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f023 0201 	bic.w	r2, r3, #1
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3b04      	subs	r3, #4
 8005f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f40:	4a0c      	ldr	r2, [pc, #48]	@ (8005f74 <pxPortInitialiseStack+0x64>)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3b14      	subs	r3, #20
 8005f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3b04      	subs	r3, #4
 8005f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f06f 0202 	mvn.w	r2, #2
 8005f5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3b20      	subs	r3, #32
 8005f64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f66:	68fb      	ldr	r3, [r7, #12]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	08005f79 	.word	0x08005f79

08005f78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f82:	4b13      	ldr	r3, [pc, #76]	@ (8005fd0 <prvTaskExitError+0x58>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8a:	d00b      	beq.n	8005fa4 <prvTaskExitError+0x2c>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	60fb      	str	r3, [r7, #12]
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	e7fd      	b.n	8005fa0 <prvTaskExitError+0x28>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	60bb      	str	r3, [r7, #8]
}
 8005fb6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fb8:	bf00      	nop
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0fc      	beq.n	8005fba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	2000000c 	.word	0x2000000c
	...

08005fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fe0:	4b07      	ldr	r3, [pc, #28]	@ (8006000 <pxCurrentTCBConst2>)
 8005fe2:	6819      	ldr	r1, [r3, #0]
 8005fe4:	6808      	ldr	r0, [r1, #0]
 8005fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fea:	f380 8809 	msr	PSP, r0
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f04f 0000 	mov.w	r0, #0
 8005ff6:	f380 8811 	msr	BASEPRI, r0
 8005ffa:	4770      	bx	lr
 8005ffc:	f3af 8000 	nop.w

08006000 <pxCurrentTCBConst2>:
 8006000:	20000a58 	.word	0x20000a58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop

08006008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006008:	4808      	ldr	r0, [pc, #32]	@ (800602c <prvPortStartFirstTask+0x24>)
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	6800      	ldr	r0, [r0, #0]
 800600e:	f380 8808 	msr	MSP, r0
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f380 8814 	msr	CONTROL, r0
 800601a:	b662      	cpsie	i
 800601c:	b661      	cpsie	f
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	df00      	svc	0
 8006028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800602a:	bf00      	nop
 800602c:	e000ed08 	.word	0xe000ed08

08006030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006036:	4b47      	ldr	r3, [pc, #284]	@ (8006154 <xPortStartScheduler+0x124>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a47      	ldr	r2, [pc, #284]	@ (8006158 <xPortStartScheduler+0x128>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d10b      	bne.n	8006058 <xPortStartScheduler+0x28>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	613b      	str	r3, [r7, #16]
}
 8006052:	bf00      	nop
 8006054:	bf00      	nop
 8006056:	e7fd      	b.n	8006054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006058:	4b3e      	ldr	r3, [pc, #248]	@ (8006154 <xPortStartScheduler+0x124>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a3f      	ldr	r2, [pc, #252]	@ (800615c <xPortStartScheduler+0x12c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d10b      	bne.n	800607a <xPortStartScheduler+0x4a>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	60fb      	str	r3, [r7, #12]
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	e7fd      	b.n	8006076 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800607a:	4b39      	ldr	r3, [pc, #228]	@ (8006160 <xPortStartScheduler+0x130>)
 800607c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	22ff      	movs	r2, #255	@ 0xff
 800608a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800609c:	b2da      	uxtb	r2, r3
 800609e:	4b31      	ldr	r3, [pc, #196]	@ (8006164 <xPortStartScheduler+0x134>)
 80060a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060a2:	4b31      	ldr	r3, [pc, #196]	@ (8006168 <xPortStartScheduler+0x138>)
 80060a4:	2207      	movs	r2, #7
 80060a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060a8:	e009      	b.n	80060be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80060aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006168 <xPortStartScheduler+0x138>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006168 <xPortStartScheduler+0x138>)
 80060b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c6:	2b80      	cmp	r3, #128	@ 0x80
 80060c8:	d0ef      	beq.n	80060aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060ca:	4b27      	ldr	r3, [pc, #156]	@ (8006168 <xPortStartScheduler+0x138>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f1c3 0307 	rsb	r3, r3, #7
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d00b      	beq.n	80060ee <xPortStartScheduler+0xbe>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	60bb      	str	r3, [r7, #8]
}
 80060e8:	bf00      	nop
 80060ea:	bf00      	nop
 80060ec:	e7fd      	b.n	80060ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006168 <xPortStartScheduler+0x138>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006168 <xPortStartScheduler+0x138>)
 80060f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006168 <xPortStartScheduler+0x138>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006100:	4a19      	ldr	r2, [pc, #100]	@ (8006168 <xPortStartScheduler+0x138>)
 8006102:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	b2da      	uxtb	r2, r3
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800610c:	4b17      	ldr	r3, [pc, #92]	@ (800616c <xPortStartScheduler+0x13c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a16      	ldr	r2, [pc, #88]	@ (800616c <xPortStartScheduler+0x13c>)
 8006112:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006116:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006118:	4b14      	ldr	r3, [pc, #80]	@ (800616c <xPortStartScheduler+0x13c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a13      	ldr	r2, [pc, #76]	@ (800616c <xPortStartScheduler+0x13c>)
 800611e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006122:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006124:	f000 f8da 	bl	80062dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006128:	4b11      	ldr	r3, [pc, #68]	@ (8006170 <xPortStartScheduler+0x140>)
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800612e:	f000 f8f9 	bl	8006324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006132:	4b10      	ldr	r3, [pc, #64]	@ (8006174 <xPortStartScheduler+0x144>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a0f      	ldr	r2, [pc, #60]	@ (8006174 <xPortStartScheduler+0x144>)
 8006138:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800613c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800613e:	f7ff ff63 	bl	8006008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006142:	f7ff f839 	bl	80051b8 <vTaskSwitchContext>
	prvTaskExitError();
 8006146:	f7ff ff17 	bl	8005f78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	e000ed00 	.word	0xe000ed00
 8006158:	410fc271 	.word	0x410fc271
 800615c:	410fc270 	.word	0x410fc270
 8006160:	e000e400 	.word	0xe000e400
 8006164:	20001084 	.word	0x20001084
 8006168:	20001088 	.word	0x20001088
 800616c:	e000ed20 	.word	0xe000ed20
 8006170:	2000000c 	.word	0x2000000c
 8006174:	e000ef34 	.word	0xe000ef34

08006178 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	607b      	str	r3, [r7, #4]
}
 8006190:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006192:	4b10      	ldr	r3, [pc, #64]	@ (80061d4 <vPortEnterCritical+0x5c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3301      	adds	r3, #1
 8006198:	4a0e      	ldr	r2, [pc, #56]	@ (80061d4 <vPortEnterCritical+0x5c>)
 800619a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800619c:	4b0d      	ldr	r3, [pc, #52]	@ (80061d4 <vPortEnterCritical+0x5c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d110      	bne.n	80061c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061a4:	4b0c      	ldr	r3, [pc, #48]	@ (80061d8 <vPortEnterCritical+0x60>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	603b      	str	r3, [r7, #0]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <vPortEnterCritical+0x4a>
	}
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	2000000c 	.word	0x2000000c
 80061d8:	e000ed04 	.word	0xe000ed04

080061dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061e2:	4b12      	ldr	r3, [pc, #72]	@ (800622c <vPortExitCritical+0x50>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10b      	bne.n	8006202 <vPortExitCritical+0x26>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	607b      	str	r3, [r7, #4]
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	e7fd      	b.n	80061fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006202:	4b0a      	ldr	r3, [pc, #40]	@ (800622c <vPortExitCritical+0x50>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3b01      	subs	r3, #1
 8006208:	4a08      	ldr	r2, [pc, #32]	@ (800622c <vPortExitCritical+0x50>)
 800620a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800620c:	4b07      	ldr	r3, [pc, #28]	@ (800622c <vPortExitCritical+0x50>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d105      	bne.n	8006220 <vPortExitCritical+0x44>
 8006214:	2300      	movs	r3, #0
 8006216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	f383 8811 	msr	BASEPRI, r3
}
 800621e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	2000000c 	.word	0x2000000c

08006230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006230:	f3ef 8009 	mrs	r0, PSP
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	4b15      	ldr	r3, [pc, #84]	@ (8006290 <pxCurrentTCBConst>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	f01e 0f10 	tst.w	lr, #16
 8006240:	bf08      	it	eq
 8006242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624a:	6010      	str	r0, [r2, #0]
 800624c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006250:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006254:	f380 8811 	msr	BASEPRI, r0
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f7fe ffaa 	bl	80051b8 <vTaskSwitchContext>
 8006264:	f04f 0000 	mov.w	r0, #0
 8006268:	f380 8811 	msr	BASEPRI, r0
 800626c:	bc09      	pop	{r0, r3}
 800626e:	6819      	ldr	r1, [r3, #0]
 8006270:	6808      	ldr	r0, [r1, #0]
 8006272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006276:	f01e 0f10 	tst.w	lr, #16
 800627a:	bf08      	it	eq
 800627c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006280:	f380 8809 	msr	PSP, r0
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst>:
 8006290:	20000a58 	.word	0x20000a58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	607b      	str	r3, [r7, #4]
}
 80062b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062b2:	f7fe fec7 	bl	8005044 <xTaskIncrementTick>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062bc:	4b06      	ldr	r3, [pc, #24]	@ (80062d8 <xPortSysTickHandler+0x40>)
 80062be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	2300      	movs	r3, #0
 80062c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f383 8811 	msr	BASEPRI, r3
}
 80062ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006310 <vPortSetupTimerInterrupt+0x34>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006314 <vPortSetupTimerInterrupt+0x38>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006318 <vPortSetupTimerInterrupt+0x3c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a0a      	ldr	r2, [pc, #40]	@ (800631c <vPortSetupTimerInterrupt+0x40>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	099b      	lsrs	r3, r3, #6
 80062f8:	4a09      	ldr	r2, [pc, #36]	@ (8006320 <vPortSetupTimerInterrupt+0x44>)
 80062fa:	3b01      	subs	r3, #1
 80062fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062fe:	4b04      	ldr	r3, [pc, #16]	@ (8006310 <vPortSetupTimerInterrupt+0x34>)
 8006300:	2207      	movs	r2, #7
 8006302:	601a      	str	r2, [r3, #0]
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	e000e010 	.word	0xe000e010
 8006314:	e000e018 	.word	0xe000e018
 8006318:	20000000 	.word	0x20000000
 800631c:	10624dd3 	.word	0x10624dd3
 8006320:	e000e014 	.word	0xe000e014

08006324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006324:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006334 <vPortEnableVFP+0x10>
 8006328:	6801      	ldr	r1, [r0, #0]
 800632a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800632e:	6001      	str	r1, [r0, #0]
 8006330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006332:	bf00      	nop
 8006334:	e000ed88 	.word	0xe000ed88

08006338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800633e:	f3ef 8305 	mrs	r3, IPSR
 8006342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b0f      	cmp	r3, #15
 8006348:	d915      	bls.n	8006376 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800634a:	4a18      	ldr	r2, [pc, #96]	@ (80063ac <vPortValidateInterruptPriority+0x74>)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006354:	4b16      	ldr	r3, [pc, #88]	@ (80063b0 <vPortValidateInterruptPriority+0x78>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	7afa      	ldrb	r2, [r7, #11]
 800635a:	429a      	cmp	r2, r3
 800635c:	d20b      	bcs.n	8006376 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	607b      	str	r3, [r7, #4]
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	e7fd      	b.n	8006372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006376:	4b0f      	ldr	r3, [pc, #60]	@ (80063b4 <vPortValidateInterruptPriority+0x7c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800637e:	4b0e      	ldr	r3, [pc, #56]	@ (80063b8 <vPortValidateInterruptPriority+0x80>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d90b      	bls.n	800639e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	603b      	str	r3, [r7, #0]
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	e7fd      	b.n	800639a <vPortValidateInterruptPriority+0x62>
	}
 800639e:	bf00      	nop
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	e000e3f0 	.word	0xe000e3f0
 80063b0:	20001084 	.word	0x20001084
 80063b4:	e000ed0c 	.word	0xe000ed0c
 80063b8:	20001088 	.word	0x20001088

080063bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	@ 0x28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063c8:	f7fe fd80 	bl	8004ecc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006540 <pvPortMalloc+0x184>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063d4:	f000 f924 	bl	8006620 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063d8:	4b5a      	ldr	r3, [pc, #360]	@ (8006544 <pvPortMalloc+0x188>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4013      	ands	r3, r2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f040 8095 	bne.w	8006510 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01e      	beq.n	800642a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80063ec:	2208      	movs	r2, #8
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4413      	add	r3, r2
 80063f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d015      	beq.n	800642a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f023 0307 	bic.w	r3, r3, #7
 8006404:	3308      	adds	r3, #8
 8006406:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00b      	beq.n	800642a <pvPortMalloc+0x6e>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	617b      	str	r3, [r7, #20]
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop
 8006428:	e7fd      	b.n	8006426 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d06f      	beq.n	8006510 <pvPortMalloc+0x154>
 8006430:	4b45      	ldr	r3, [pc, #276]	@ (8006548 <pvPortMalloc+0x18c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	429a      	cmp	r2, r3
 8006438:	d86a      	bhi.n	8006510 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800643a:	4b44      	ldr	r3, [pc, #272]	@ (800654c <pvPortMalloc+0x190>)
 800643c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800643e:	4b43      	ldr	r3, [pc, #268]	@ (800654c <pvPortMalloc+0x190>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006444:	e004      	b.n	8006450 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	429a      	cmp	r2, r3
 8006458:	d903      	bls.n	8006462 <pvPortMalloc+0xa6>
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f1      	bne.n	8006446 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006462:	4b37      	ldr	r3, [pc, #220]	@ (8006540 <pvPortMalloc+0x184>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006468:	429a      	cmp	r2, r3
 800646a:	d051      	beq.n	8006510 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2208      	movs	r2, #8
 8006472:	4413      	add	r3, r2
 8006474:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	1ad2      	subs	r2, r2, r3
 8006486:	2308      	movs	r3, #8
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	429a      	cmp	r2, r3
 800648c:	d920      	bls.n	80064d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800648e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4413      	add	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00b      	beq.n	80064b8 <pvPortMalloc+0xfc>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	613b      	str	r3, [r7, #16]
}
 80064b2:	bf00      	nop
 80064b4:	bf00      	nop
 80064b6:	e7fd      	b.n	80064b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	1ad2      	subs	r2, r2, r3
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064ca:	69b8      	ldr	r0, [r7, #24]
 80064cc:	f000 f90a 	bl	80066e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006548 <pvPortMalloc+0x18c>)
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	4a1b      	ldr	r2, [pc, #108]	@ (8006548 <pvPortMalloc+0x18c>)
 80064dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064de:	4b1a      	ldr	r3, [pc, #104]	@ (8006548 <pvPortMalloc+0x18c>)
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006550 <pvPortMalloc+0x194>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d203      	bcs.n	80064f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064ea:	4b17      	ldr	r3, [pc, #92]	@ (8006548 <pvPortMalloc+0x18c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a18      	ldr	r2, [pc, #96]	@ (8006550 <pvPortMalloc+0x194>)
 80064f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	4b13      	ldr	r3, [pc, #76]	@ (8006544 <pvPortMalloc+0x188>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006506:	4b13      	ldr	r3, [pc, #76]	@ (8006554 <pvPortMalloc+0x198>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3301      	adds	r3, #1
 800650c:	4a11      	ldr	r2, [pc, #68]	@ (8006554 <pvPortMalloc+0x198>)
 800650e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006510:	f7fe fcea 	bl	8004ee8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00b      	beq.n	8006536 <pvPortMalloc+0x17a>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	60fb      	str	r3, [r7, #12]
}
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	e7fd      	b.n	8006532 <pvPortMalloc+0x176>
	return pvReturn;
 8006536:	69fb      	ldr	r3, [r7, #28]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3728      	adds	r7, #40	@ 0x28
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20004c94 	.word	0x20004c94
 8006544:	20004ca8 	.word	0x20004ca8
 8006548:	20004c98 	.word	0x20004c98
 800654c:	20004c8c 	.word	0x20004c8c
 8006550:	20004c9c 	.word	0x20004c9c
 8006554:	20004ca0 	.word	0x20004ca0

08006558 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d04f      	beq.n	800660a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800656a:	2308      	movs	r3, #8
 800656c:	425b      	negs	r3, r3
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4413      	add	r3, r2
 8006572:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	4b25      	ldr	r3, [pc, #148]	@ (8006614 <vPortFree+0xbc>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4013      	ands	r3, r2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10b      	bne.n	800659e <vPortFree+0x46>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	60fb      	str	r3, [r7, #12]
}
 8006598:	bf00      	nop
 800659a:	bf00      	nop
 800659c:	e7fd      	b.n	800659a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00b      	beq.n	80065be <vPortFree+0x66>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	60bb      	str	r3, [r7, #8]
}
 80065b8:	bf00      	nop
 80065ba:	bf00      	nop
 80065bc:	e7fd      	b.n	80065ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	4b14      	ldr	r3, [pc, #80]	@ (8006614 <vPortFree+0xbc>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4013      	ands	r3, r2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01e      	beq.n	800660a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d11a      	bne.n	800660a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006614 <vPortFree+0xbc>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	43db      	mvns	r3, r3
 80065de:	401a      	ands	r2, r3
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065e4:	f7fe fc72 	bl	8004ecc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006618 <vPortFree+0xc0>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4413      	add	r3, r2
 80065f2:	4a09      	ldr	r2, [pc, #36]	@ (8006618 <vPortFree+0xc0>)
 80065f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065f6:	6938      	ldr	r0, [r7, #16]
 80065f8:	f000 f874 	bl	80066e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065fc:	4b07      	ldr	r3, [pc, #28]	@ (800661c <vPortFree+0xc4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	4a06      	ldr	r2, [pc, #24]	@ (800661c <vPortFree+0xc4>)
 8006604:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006606:	f7fe fc6f 	bl	8004ee8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800660a:	bf00      	nop
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20004ca8 	.word	0x20004ca8
 8006618:	20004c98 	.word	0x20004c98
 800661c:	20004ca4 	.word	0x20004ca4

08006620 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006626:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800662a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800662c:	4b27      	ldr	r3, [pc, #156]	@ (80066cc <prvHeapInit+0xac>)
 800662e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00c      	beq.n	8006654 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3307      	adds	r3, #7
 800663e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0307 	bic.w	r3, r3, #7
 8006646:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	4a1f      	ldr	r2, [pc, #124]	@ (80066cc <prvHeapInit+0xac>)
 8006650:	4413      	add	r3, r2
 8006652:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006658:	4a1d      	ldr	r2, [pc, #116]	@ (80066d0 <prvHeapInit+0xb0>)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800665e:	4b1c      	ldr	r3, [pc, #112]	@ (80066d0 <prvHeapInit+0xb0>)
 8006660:	2200      	movs	r2, #0
 8006662:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	4413      	add	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800666c:	2208      	movs	r2, #8
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	1a9b      	subs	r3, r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0307 	bic.w	r3, r3, #7
 800667a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4a15      	ldr	r2, [pc, #84]	@ (80066d4 <prvHeapInit+0xb4>)
 8006680:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006682:	4b14      	ldr	r3, [pc, #80]	@ (80066d4 <prvHeapInit+0xb4>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2200      	movs	r2, #0
 8006688:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800668a:	4b12      	ldr	r3, [pc, #72]	@ (80066d4 <prvHeapInit+0xb4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	1ad2      	subs	r2, r2, r3
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066a0:	4b0c      	ldr	r3, [pc, #48]	@ (80066d4 <prvHeapInit+0xb4>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	4a0a      	ldr	r2, [pc, #40]	@ (80066d8 <prvHeapInit+0xb8>)
 80066ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	4a09      	ldr	r2, [pc, #36]	@ (80066dc <prvHeapInit+0xbc>)
 80066b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066b8:	4b09      	ldr	r3, [pc, #36]	@ (80066e0 <prvHeapInit+0xc0>)
 80066ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80066be:	601a      	str	r2, [r3, #0]
}
 80066c0:	bf00      	nop
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	2000108c 	.word	0x2000108c
 80066d0:	20004c8c 	.word	0x20004c8c
 80066d4:	20004c94 	.word	0x20004c94
 80066d8:	20004c9c 	.word	0x20004c9c
 80066dc:	20004c98 	.word	0x20004c98
 80066e0:	20004ca8 	.word	0x20004ca8

080066e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066ec:	4b28      	ldr	r3, [pc, #160]	@ (8006790 <prvInsertBlockIntoFreeList+0xac>)
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e002      	b.n	80066f8 <prvInsertBlockIntoFreeList+0x14>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d8f7      	bhi.n	80066f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	4413      	add	r3, r2
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	429a      	cmp	r2, r3
 8006712:	d108      	bne.n	8006726 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	441a      	add	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	441a      	add	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d118      	bne.n	800676c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b15      	ldr	r3, [pc, #84]	@ (8006794 <prvInsertBlockIntoFreeList+0xb0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d00d      	beq.n	8006762 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	441a      	add	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	e008      	b.n	8006774 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006762:	4b0c      	ldr	r3, [pc, #48]	@ (8006794 <prvInsertBlockIntoFreeList+0xb0>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	601a      	str	r2, [r3, #0]
 800676a:	e003      	b.n	8006774 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d002      	beq.n	8006782 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20004c8c 	.word	0x20004c8c
 8006794:	20004c94 	.word	0x20004c94

08006798 <__cvt>:
 8006798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800679c:	ec57 6b10 	vmov	r6, r7, d0
 80067a0:	2f00      	cmp	r7, #0
 80067a2:	460c      	mov	r4, r1
 80067a4:	4619      	mov	r1, r3
 80067a6:	463b      	mov	r3, r7
 80067a8:	bfbb      	ittet	lt
 80067aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80067ae:	461f      	movlt	r7, r3
 80067b0:	2300      	movge	r3, #0
 80067b2:	232d      	movlt	r3, #45	@ 0x2d
 80067b4:	700b      	strb	r3, [r1, #0]
 80067b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80067bc:	4691      	mov	r9, r2
 80067be:	f023 0820 	bic.w	r8, r3, #32
 80067c2:	bfbc      	itt	lt
 80067c4:	4632      	movlt	r2, r6
 80067c6:	4616      	movlt	r6, r2
 80067c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067cc:	d005      	beq.n	80067da <__cvt+0x42>
 80067ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80067d2:	d100      	bne.n	80067d6 <__cvt+0x3e>
 80067d4:	3401      	adds	r4, #1
 80067d6:	2102      	movs	r1, #2
 80067d8:	e000      	b.n	80067dc <__cvt+0x44>
 80067da:	2103      	movs	r1, #3
 80067dc:	ab03      	add	r3, sp, #12
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	ab02      	add	r3, sp, #8
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	ec47 6b10 	vmov	d0, r6, r7
 80067e8:	4653      	mov	r3, sl
 80067ea:	4622      	mov	r2, r4
 80067ec:	f001 f884 	bl	80078f8 <_dtoa_r>
 80067f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80067f4:	4605      	mov	r5, r0
 80067f6:	d119      	bne.n	800682c <__cvt+0x94>
 80067f8:	f019 0f01 	tst.w	r9, #1
 80067fc:	d00e      	beq.n	800681c <__cvt+0x84>
 80067fe:	eb00 0904 	add.w	r9, r0, r4
 8006802:	2200      	movs	r2, #0
 8006804:	2300      	movs	r3, #0
 8006806:	4630      	mov	r0, r6
 8006808:	4639      	mov	r1, r7
 800680a:	f7fa f965 	bl	8000ad8 <__aeabi_dcmpeq>
 800680e:	b108      	cbz	r0, 8006814 <__cvt+0x7c>
 8006810:	f8cd 900c 	str.w	r9, [sp, #12]
 8006814:	2230      	movs	r2, #48	@ 0x30
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	454b      	cmp	r3, r9
 800681a:	d31e      	bcc.n	800685a <__cvt+0xc2>
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006820:	1b5b      	subs	r3, r3, r5
 8006822:	4628      	mov	r0, r5
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	b004      	add	sp, #16
 8006828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800682c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006830:	eb00 0904 	add.w	r9, r0, r4
 8006834:	d1e5      	bne.n	8006802 <__cvt+0x6a>
 8006836:	7803      	ldrb	r3, [r0, #0]
 8006838:	2b30      	cmp	r3, #48	@ 0x30
 800683a:	d10a      	bne.n	8006852 <__cvt+0xba>
 800683c:	2200      	movs	r2, #0
 800683e:	2300      	movs	r3, #0
 8006840:	4630      	mov	r0, r6
 8006842:	4639      	mov	r1, r7
 8006844:	f7fa f948 	bl	8000ad8 <__aeabi_dcmpeq>
 8006848:	b918      	cbnz	r0, 8006852 <__cvt+0xba>
 800684a:	f1c4 0401 	rsb	r4, r4, #1
 800684e:	f8ca 4000 	str.w	r4, [sl]
 8006852:	f8da 3000 	ldr.w	r3, [sl]
 8006856:	4499      	add	r9, r3
 8006858:	e7d3      	b.n	8006802 <__cvt+0x6a>
 800685a:	1c59      	adds	r1, r3, #1
 800685c:	9103      	str	r1, [sp, #12]
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e7d9      	b.n	8006816 <__cvt+0x7e>

08006862 <__exponent>:
 8006862:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006864:	2900      	cmp	r1, #0
 8006866:	bfba      	itte	lt
 8006868:	4249      	neglt	r1, r1
 800686a:	232d      	movlt	r3, #45	@ 0x2d
 800686c:	232b      	movge	r3, #43	@ 0x2b
 800686e:	2909      	cmp	r1, #9
 8006870:	7002      	strb	r2, [r0, #0]
 8006872:	7043      	strb	r3, [r0, #1]
 8006874:	dd29      	ble.n	80068ca <__exponent+0x68>
 8006876:	f10d 0307 	add.w	r3, sp, #7
 800687a:	461d      	mov	r5, r3
 800687c:	270a      	movs	r7, #10
 800687e:	461a      	mov	r2, r3
 8006880:	fbb1 f6f7 	udiv	r6, r1, r7
 8006884:	fb07 1416 	mls	r4, r7, r6, r1
 8006888:	3430      	adds	r4, #48	@ 0x30
 800688a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800688e:	460c      	mov	r4, r1
 8006890:	2c63      	cmp	r4, #99	@ 0x63
 8006892:	f103 33ff 	add.w	r3, r3, #4294967295
 8006896:	4631      	mov	r1, r6
 8006898:	dcf1      	bgt.n	800687e <__exponent+0x1c>
 800689a:	3130      	adds	r1, #48	@ 0x30
 800689c:	1e94      	subs	r4, r2, #2
 800689e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068a2:	1c41      	adds	r1, r0, #1
 80068a4:	4623      	mov	r3, r4
 80068a6:	42ab      	cmp	r3, r5
 80068a8:	d30a      	bcc.n	80068c0 <__exponent+0x5e>
 80068aa:	f10d 0309 	add.w	r3, sp, #9
 80068ae:	1a9b      	subs	r3, r3, r2
 80068b0:	42ac      	cmp	r4, r5
 80068b2:	bf88      	it	hi
 80068b4:	2300      	movhi	r3, #0
 80068b6:	3302      	adds	r3, #2
 80068b8:	4403      	add	r3, r0
 80068ba:	1a18      	subs	r0, r3, r0
 80068bc:	b003      	add	sp, #12
 80068be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80068c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80068c8:	e7ed      	b.n	80068a6 <__exponent+0x44>
 80068ca:	2330      	movs	r3, #48	@ 0x30
 80068cc:	3130      	adds	r1, #48	@ 0x30
 80068ce:	7083      	strb	r3, [r0, #2]
 80068d0:	70c1      	strb	r1, [r0, #3]
 80068d2:	1d03      	adds	r3, r0, #4
 80068d4:	e7f1      	b.n	80068ba <__exponent+0x58>
	...

080068d8 <_printf_float>:
 80068d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	b08d      	sub	sp, #52	@ 0x34
 80068de:	460c      	mov	r4, r1
 80068e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80068e4:	4616      	mov	r6, r2
 80068e6:	461f      	mov	r7, r3
 80068e8:	4605      	mov	r5, r0
 80068ea:	f000 feef 	bl	80076cc <_localeconv_r>
 80068ee:	6803      	ldr	r3, [r0, #0]
 80068f0:	9304      	str	r3, [sp, #16]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7f9 fcc4 	bl	8000280 <strlen>
 80068f8:	2300      	movs	r3, #0
 80068fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80068fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006900:	9005      	str	r0, [sp, #20]
 8006902:	3307      	adds	r3, #7
 8006904:	f023 0307 	bic.w	r3, r3, #7
 8006908:	f103 0208 	add.w	r2, r3, #8
 800690c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006910:	f8d4 b000 	ldr.w	fp, [r4]
 8006914:	f8c8 2000 	str.w	r2, [r8]
 8006918:	e9d3 8900 	ldrd	r8, r9, [r3]
 800691c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006920:	9307      	str	r3, [sp, #28]
 8006922:	f8cd 8018 	str.w	r8, [sp, #24]
 8006926:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800692a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800692e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ba0 <_printf_float+0x2c8>)
 8006930:	f04f 32ff 	mov.w	r2, #4294967295
 8006934:	f7fa f902 	bl	8000b3c <__aeabi_dcmpun>
 8006938:	bb70      	cbnz	r0, 8006998 <_printf_float+0xc0>
 800693a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800693e:	4b98      	ldr	r3, [pc, #608]	@ (8006ba0 <_printf_float+0x2c8>)
 8006940:	f04f 32ff 	mov.w	r2, #4294967295
 8006944:	f7fa f8dc 	bl	8000b00 <__aeabi_dcmple>
 8006948:	bb30      	cbnz	r0, 8006998 <_printf_float+0xc0>
 800694a:	2200      	movs	r2, #0
 800694c:	2300      	movs	r3, #0
 800694e:	4640      	mov	r0, r8
 8006950:	4649      	mov	r1, r9
 8006952:	f7fa f8cb 	bl	8000aec <__aeabi_dcmplt>
 8006956:	b110      	cbz	r0, 800695e <_printf_float+0x86>
 8006958:	232d      	movs	r3, #45	@ 0x2d
 800695a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800695e:	4a91      	ldr	r2, [pc, #580]	@ (8006ba4 <_printf_float+0x2cc>)
 8006960:	4b91      	ldr	r3, [pc, #580]	@ (8006ba8 <_printf_float+0x2d0>)
 8006962:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006966:	bf94      	ite	ls
 8006968:	4690      	movls	r8, r2
 800696a:	4698      	movhi	r8, r3
 800696c:	2303      	movs	r3, #3
 800696e:	6123      	str	r3, [r4, #16]
 8006970:	f02b 0304 	bic.w	r3, fp, #4
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	f04f 0900 	mov.w	r9, #0
 800697a:	9700      	str	r7, [sp, #0]
 800697c:	4633      	mov	r3, r6
 800697e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006980:	4621      	mov	r1, r4
 8006982:	4628      	mov	r0, r5
 8006984:	f000 f9d2 	bl	8006d2c <_printf_common>
 8006988:	3001      	adds	r0, #1
 800698a:	f040 808d 	bne.w	8006aa8 <_printf_float+0x1d0>
 800698e:	f04f 30ff 	mov.w	r0, #4294967295
 8006992:	b00d      	add	sp, #52	@ 0x34
 8006994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006998:	4642      	mov	r2, r8
 800699a:	464b      	mov	r3, r9
 800699c:	4640      	mov	r0, r8
 800699e:	4649      	mov	r1, r9
 80069a0:	f7fa f8cc 	bl	8000b3c <__aeabi_dcmpun>
 80069a4:	b140      	cbz	r0, 80069b8 <_printf_float+0xe0>
 80069a6:	464b      	mov	r3, r9
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	bfbc      	itt	lt
 80069ac:	232d      	movlt	r3, #45	@ 0x2d
 80069ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80069b2:	4a7e      	ldr	r2, [pc, #504]	@ (8006bac <_printf_float+0x2d4>)
 80069b4:	4b7e      	ldr	r3, [pc, #504]	@ (8006bb0 <_printf_float+0x2d8>)
 80069b6:	e7d4      	b.n	8006962 <_printf_float+0x8a>
 80069b8:	6863      	ldr	r3, [r4, #4]
 80069ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80069be:	9206      	str	r2, [sp, #24]
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	d13b      	bne.n	8006a3c <_printf_float+0x164>
 80069c4:	2306      	movs	r3, #6
 80069c6:	6063      	str	r3, [r4, #4]
 80069c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80069cc:	2300      	movs	r3, #0
 80069ce:	6022      	str	r2, [r4, #0]
 80069d0:	9303      	str	r3, [sp, #12]
 80069d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80069d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80069d8:	ab09      	add	r3, sp, #36	@ 0x24
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	6861      	ldr	r1, [r4, #4]
 80069de:	ec49 8b10 	vmov	d0, r8, r9
 80069e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80069e6:	4628      	mov	r0, r5
 80069e8:	f7ff fed6 	bl	8006798 <__cvt>
 80069ec:	9b06      	ldr	r3, [sp, #24]
 80069ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069f0:	2b47      	cmp	r3, #71	@ 0x47
 80069f2:	4680      	mov	r8, r0
 80069f4:	d129      	bne.n	8006a4a <_printf_float+0x172>
 80069f6:	1cc8      	adds	r0, r1, #3
 80069f8:	db02      	blt.n	8006a00 <_printf_float+0x128>
 80069fa:	6863      	ldr	r3, [r4, #4]
 80069fc:	4299      	cmp	r1, r3
 80069fe:	dd41      	ble.n	8006a84 <_printf_float+0x1ac>
 8006a00:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a04:	fa5f fa8a 	uxtb.w	sl, sl
 8006a08:	3901      	subs	r1, #1
 8006a0a:	4652      	mov	r2, sl
 8006a0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a10:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a12:	f7ff ff26 	bl	8006862 <__exponent>
 8006a16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a18:	1813      	adds	r3, r2, r0
 8006a1a:	2a01      	cmp	r2, #1
 8006a1c:	4681      	mov	r9, r0
 8006a1e:	6123      	str	r3, [r4, #16]
 8006a20:	dc02      	bgt.n	8006a28 <_printf_float+0x150>
 8006a22:	6822      	ldr	r2, [r4, #0]
 8006a24:	07d2      	lsls	r2, r2, #31
 8006a26:	d501      	bpl.n	8006a2c <_printf_float+0x154>
 8006a28:	3301      	adds	r3, #1
 8006a2a:	6123      	str	r3, [r4, #16]
 8006a2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0a2      	beq.n	800697a <_printf_float+0xa2>
 8006a34:	232d      	movs	r3, #45	@ 0x2d
 8006a36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a3a:	e79e      	b.n	800697a <_printf_float+0xa2>
 8006a3c:	9a06      	ldr	r2, [sp, #24]
 8006a3e:	2a47      	cmp	r2, #71	@ 0x47
 8006a40:	d1c2      	bne.n	80069c8 <_printf_float+0xf0>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1c0      	bne.n	80069c8 <_printf_float+0xf0>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e7bd      	b.n	80069c6 <_printf_float+0xee>
 8006a4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a4e:	d9db      	bls.n	8006a08 <_printf_float+0x130>
 8006a50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a54:	d118      	bne.n	8006a88 <_printf_float+0x1b0>
 8006a56:	2900      	cmp	r1, #0
 8006a58:	6863      	ldr	r3, [r4, #4]
 8006a5a:	dd0b      	ble.n	8006a74 <_printf_float+0x19c>
 8006a5c:	6121      	str	r1, [r4, #16]
 8006a5e:	b913      	cbnz	r3, 8006a66 <_printf_float+0x18e>
 8006a60:	6822      	ldr	r2, [r4, #0]
 8006a62:	07d0      	lsls	r0, r2, #31
 8006a64:	d502      	bpl.n	8006a6c <_printf_float+0x194>
 8006a66:	3301      	adds	r3, #1
 8006a68:	440b      	add	r3, r1
 8006a6a:	6123      	str	r3, [r4, #16]
 8006a6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a6e:	f04f 0900 	mov.w	r9, #0
 8006a72:	e7db      	b.n	8006a2c <_printf_float+0x154>
 8006a74:	b913      	cbnz	r3, 8006a7c <_printf_float+0x1a4>
 8006a76:	6822      	ldr	r2, [r4, #0]
 8006a78:	07d2      	lsls	r2, r2, #31
 8006a7a:	d501      	bpl.n	8006a80 <_printf_float+0x1a8>
 8006a7c:	3302      	adds	r3, #2
 8006a7e:	e7f4      	b.n	8006a6a <_printf_float+0x192>
 8006a80:	2301      	movs	r3, #1
 8006a82:	e7f2      	b.n	8006a6a <_printf_float+0x192>
 8006a84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a8a:	4299      	cmp	r1, r3
 8006a8c:	db05      	blt.n	8006a9a <_printf_float+0x1c2>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	6121      	str	r1, [r4, #16]
 8006a92:	07d8      	lsls	r0, r3, #31
 8006a94:	d5ea      	bpl.n	8006a6c <_printf_float+0x194>
 8006a96:	1c4b      	adds	r3, r1, #1
 8006a98:	e7e7      	b.n	8006a6a <_printf_float+0x192>
 8006a9a:	2900      	cmp	r1, #0
 8006a9c:	bfd4      	ite	le
 8006a9e:	f1c1 0202 	rsble	r2, r1, #2
 8006aa2:	2201      	movgt	r2, #1
 8006aa4:	4413      	add	r3, r2
 8006aa6:	e7e0      	b.n	8006a6a <_printf_float+0x192>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	055a      	lsls	r2, r3, #21
 8006aac:	d407      	bmi.n	8006abe <_printf_float+0x1e6>
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	4642      	mov	r2, r8
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d12b      	bne.n	8006b14 <_printf_float+0x23c>
 8006abc:	e767      	b.n	800698e <_printf_float+0xb6>
 8006abe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ac2:	f240 80dd 	bls.w	8006c80 <_printf_float+0x3a8>
 8006ac6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006aca:	2200      	movs	r2, #0
 8006acc:	2300      	movs	r3, #0
 8006ace:	f7fa f803 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d033      	beq.n	8006b3e <_printf_float+0x266>
 8006ad6:	4a37      	ldr	r2, [pc, #220]	@ (8006bb4 <_printf_float+0x2dc>)
 8006ad8:	2301      	movs	r3, #1
 8006ada:	4631      	mov	r1, r6
 8006adc:	4628      	mov	r0, r5
 8006ade:	47b8      	blx	r7
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	f43f af54 	beq.w	800698e <_printf_float+0xb6>
 8006ae6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006aea:	4543      	cmp	r3, r8
 8006aec:	db02      	blt.n	8006af4 <_printf_float+0x21c>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	07d8      	lsls	r0, r3, #31
 8006af2:	d50f      	bpl.n	8006b14 <_printf_float+0x23c>
 8006af4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006af8:	4631      	mov	r1, r6
 8006afa:	4628      	mov	r0, r5
 8006afc:	47b8      	blx	r7
 8006afe:	3001      	adds	r0, #1
 8006b00:	f43f af45 	beq.w	800698e <_printf_float+0xb6>
 8006b04:	f04f 0900 	mov.w	r9, #0
 8006b08:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b0c:	f104 0a1a 	add.w	sl, r4, #26
 8006b10:	45c8      	cmp	r8, r9
 8006b12:	dc09      	bgt.n	8006b28 <_printf_float+0x250>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	079b      	lsls	r3, r3, #30
 8006b18:	f100 8103 	bmi.w	8006d22 <_printf_float+0x44a>
 8006b1c:	68e0      	ldr	r0, [r4, #12]
 8006b1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b20:	4298      	cmp	r0, r3
 8006b22:	bfb8      	it	lt
 8006b24:	4618      	movlt	r0, r3
 8006b26:	e734      	b.n	8006992 <_printf_float+0xba>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4652      	mov	r2, sl
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4628      	mov	r0, r5
 8006b30:	47b8      	blx	r7
 8006b32:	3001      	adds	r0, #1
 8006b34:	f43f af2b 	beq.w	800698e <_printf_float+0xb6>
 8006b38:	f109 0901 	add.w	r9, r9, #1
 8006b3c:	e7e8      	b.n	8006b10 <_printf_float+0x238>
 8006b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	dc39      	bgt.n	8006bb8 <_printf_float+0x2e0>
 8006b44:	4a1b      	ldr	r2, [pc, #108]	@ (8006bb4 <_printf_float+0x2dc>)
 8006b46:	2301      	movs	r3, #1
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	47b8      	blx	r7
 8006b4e:	3001      	adds	r0, #1
 8006b50:	f43f af1d 	beq.w	800698e <_printf_float+0xb6>
 8006b54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b58:	ea59 0303 	orrs.w	r3, r9, r3
 8006b5c:	d102      	bne.n	8006b64 <_printf_float+0x28c>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	07d9      	lsls	r1, r3, #31
 8006b62:	d5d7      	bpl.n	8006b14 <_printf_float+0x23c>
 8006b64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	47b8      	blx	r7
 8006b6e:	3001      	adds	r0, #1
 8006b70:	f43f af0d 	beq.w	800698e <_printf_float+0xb6>
 8006b74:	f04f 0a00 	mov.w	sl, #0
 8006b78:	f104 0b1a 	add.w	fp, r4, #26
 8006b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b7e:	425b      	negs	r3, r3
 8006b80:	4553      	cmp	r3, sl
 8006b82:	dc01      	bgt.n	8006b88 <_printf_float+0x2b0>
 8006b84:	464b      	mov	r3, r9
 8006b86:	e793      	b.n	8006ab0 <_printf_float+0x1d8>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	465a      	mov	r2, fp
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	3001      	adds	r0, #1
 8006b94:	f43f aefb 	beq.w	800698e <_printf_float+0xb6>
 8006b98:	f10a 0a01 	add.w	sl, sl, #1
 8006b9c:	e7ee      	b.n	8006b7c <_printf_float+0x2a4>
 8006b9e:	bf00      	nop
 8006ba0:	7fefffff 	.word	0x7fefffff
 8006ba4:	0800af1c 	.word	0x0800af1c
 8006ba8:	0800af20 	.word	0x0800af20
 8006bac:	0800af24 	.word	0x0800af24
 8006bb0:	0800af28 	.word	0x0800af28
 8006bb4:	0800af2c 	.word	0x0800af2c
 8006bb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bbe:	4553      	cmp	r3, sl
 8006bc0:	bfa8      	it	ge
 8006bc2:	4653      	movge	r3, sl
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	4699      	mov	r9, r3
 8006bc8:	dc36      	bgt.n	8006c38 <_printf_float+0x360>
 8006bca:	f04f 0b00 	mov.w	fp, #0
 8006bce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bd2:	f104 021a 	add.w	r2, r4, #26
 8006bd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bd8:	9306      	str	r3, [sp, #24]
 8006bda:	eba3 0309 	sub.w	r3, r3, r9
 8006bde:	455b      	cmp	r3, fp
 8006be0:	dc31      	bgt.n	8006c46 <_printf_float+0x36e>
 8006be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be4:	459a      	cmp	sl, r3
 8006be6:	dc3a      	bgt.n	8006c5e <_printf_float+0x386>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	07da      	lsls	r2, r3, #31
 8006bec:	d437      	bmi.n	8006c5e <_printf_float+0x386>
 8006bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bf0:	ebaa 0903 	sub.w	r9, sl, r3
 8006bf4:	9b06      	ldr	r3, [sp, #24]
 8006bf6:	ebaa 0303 	sub.w	r3, sl, r3
 8006bfa:	4599      	cmp	r9, r3
 8006bfc:	bfa8      	it	ge
 8006bfe:	4699      	movge	r9, r3
 8006c00:	f1b9 0f00 	cmp.w	r9, #0
 8006c04:	dc33      	bgt.n	8006c6e <_printf_float+0x396>
 8006c06:	f04f 0800 	mov.w	r8, #0
 8006c0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c0e:	f104 0b1a 	add.w	fp, r4, #26
 8006c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c14:	ebaa 0303 	sub.w	r3, sl, r3
 8006c18:	eba3 0309 	sub.w	r3, r3, r9
 8006c1c:	4543      	cmp	r3, r8
 8006c1e:	f77f af79 	ble.w	8006b14 <_printf_float+0x23c>
 8006c22:	2301      	movs	r3, #1
 8006c24:	465a      	mov	r2, fp
 8006c26:	4631      	mov	r1, r6
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b8      	blx	r7
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	f43f aeae 	beq.w	800698e <_printf_float+0xb6>
 8006c32:	f108 0801 	add.w	r8, r8, #1
 8006c36:	e7ec      	b.n	8006c12 <_printf_float+0x33a>
 8006c38:	4642      	mov	r2, r8
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	d1c2      	bne.n	8006bca <_printf_float+0x2f2>
 8006c44:	e6a3      	b.n	800698e <_printf_float+0xb6>
 8006c46:	2301      	movs	r3, #1
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	9206      	str	r2, [sp, #24]
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	f43f ae9c 	beq.w	800698e <_printf_float+0xb6>
 8006c56:	9a06      	ldr	r2, [sp, #24]
 8006c58:	f10b 0b01 	add.w	fp, fp, #1
 8006c5c:	e7bb      	b.n	8006bd6 <_printf_float+0x2fe>
 8006c5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c62:	4631      	mov	r1, r6
 8006c64:	4628      	mov	r0, r5
 8006c66:	47b8      	blx	r7
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d1c0      	bne.n	8006bee <_printf_float+0x316>
 8006c6c:	e68f      	b.n	800698e <_printf_float+0xb6>
 8006c6e:	9a06      	ldr	r2, [sp, #24]
 8006c70:	464b      	mov	r3, r9
 8006c72:	4442      	add	r2, r8
 8006c74:	4631      	mov	r1, r6
 8006c76:	4628      	mov	r0, r5
 8006c78:	47b8      	blx	r7
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d1c3      	bne.n	8006c06 <_printf_float+0x32e>
 8006c7e:	e686      	b.n	800698e <_printf_float+0xb6>
 8006c80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c84:	f1ba 0f01 	cmp.w	sl, #1
 8006c88:	dc01      	bgt.n	8006c8e <_printf_float+0x3b6>
 8006c8a:	07db      	lsls	r3, r3, #31
 8006c8c:	d536      	bpl.n	8006cfc <_printf_float+0x424>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	4642      	mov	r2, r8
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b8      	blx	r7
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f43f ae78 	beq.w	800698e <_printf_float+0xb6>
 8006c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f43f ae70 	beq.w	800698e <_printf_float+0xb6>
 8006cae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cba:	f7f9 ff0d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cbe:	b9c0      	cbnz	r0, 8006cf2 <_printf_float+0x41a>
 8006cc0:	4653      	mov	r3, sl
 8006cc2:	f108 0201 	add.w	r2, r8, #1
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d10c      	bne.n	8006cea <_printf_float+0x412>
 8006cd0:	e65d      	b.n	800698e <_printf_float+0xb6>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	465a      	mov	r2, fp
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f43f ae56 	beq.w	800698e <_printf_float+0xb6>
 8006ce2:	f108 0801 	add.w	r8, r8, #1
 8006ce6:	45d0      	cmp	r8, sl
 8006ce8:	dbf3      	blt.n	8006cd2 <_printf_float+0x3fa>
 8006cea:	464b      	mov	r3, r9
 8006cec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006cf0:	e6df      	b.n	8006ab2 <_printf_float+0x1da>
 8006cf2:	f04f 0800 	mov.w	r8, #0
 8006cf6:	f104 0b1a 	add.w	fp, r4, #26
 8006cfa:	e7f4      	b.n	8006ce6 <_printf_float+0x40e>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	4642      	mov	r2, r8
 8006d00:	e7e1      	b.n	8006cc6 <_printf_float+0x3ee>
 8006d02:	2301      	movs	r3, #1
 8006d04:	464a      	mov	r2, r9
 8006d06:	4631      	mov	r1, r6
 8006d08:	4628      	mov	r0, r5
 8006d0a:	47b8      	blx	r7
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	f43f ae3e 	beq.w	800698e <_printf_float+0xb6>
 8006d12:	f108 0801 	add.w	r8, r8, #1
 8006d16:	68e3      	ldr	r3, [r4, #12]
 8006d18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d1a:	1a5b      	subs	r3, r3, r1
 8006d1c:	4543      	cmp	r3, r8
 8006d1e:	dcf0      	bgt.n	8006d02 <_printf_float+0x42a>
 8006d20:	e6fc      	b.n	8006b1c <_printf_float+0x244>
 8006d22:	f04f 0800 	mov.w	r8, #0
 8006d26:	f104 0919 	add.w	r9, r4, #25
 8006d2a:	e7f4      	b.n	8006d16 <_printf_float+0x43e>

08006d2c <_printf_common>:
 8006d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d30:	4616      	mov	r6, r2
 8006d32:	4698      	mov	r8, r3
 8006d34:	688a      	ldr	r2, [r1, #8]
 8006d36:	690b      	ldr	r3, [r1, #16]
 8006d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	bfb8      	it	lt
 8006d40:	4613      	movlt	r3, r2
 8006d42:	6033      	str	r3, [r6, #0]
 8006d44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d48:	4607      	mov	r7, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	b10a      	cbz	r2, 8006d52 <_printf_common+0x26>
 8006d4e:	3301      	adds	r3, #1
 8006d50:	6033      	str	r3, [r6, #0]
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	0699      	lsls	r1, r3, #26
 8006d56:	bf42      	ittt	mi
 8006d58:	6833      	ldrmi	r3, [r6, #0]
 8006d5a:	3302      	addmi	r3, #2
 8006d5c:	6033      	strmi	r3, [r6, #0]
 8006d5e:	6825      	ldr	r5, [r4, #0]
 8006d60:	f015 0506 	ands.w	r5, r5, #6
 8006d64:	d106      	bne.n	8006d74 <_printf_common+0x48>
 8006d66:	f104 0a19 	add.w	sl, r4, #25
 8006d6a:	68e3      	ldr	r3, [r4, #12]
 8006d6c:	6832      	ldr	r2, [r6, #0]
 8006d6e:	1a9b      	subs	r3, r3, r2
 8006d70:	42ab      	cmp	r3, r5
 8006d72:	dc26      	bgt.n	8006dc2 <_printf_common+0x96>
 8006d74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d78:	6822      	ldr	r2, [r4, #0]
 8006d7a:	3b00      	subs	r3, #0
 8006d7c:	bf18      	it	ne
 8006d7e:	2301      	movne	r3, #1
 8006d80:	0692      	lsls	r2, r2, #26
 8006d82:	d42b      	bmi.n	8006ddc <_printf_common+0xb0>
 8006d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d88:	4641      	mov	r1, r8
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	47c8      	blx	r9
 8006d8e:	3001      	adds	r0, #1
 8006d90:	d01e      	beq.n	8006dd0 <_printf_common+0xa4>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	6922      	ldr	r2, [r4, #16]
 8006d96:	f003 0306 	and.w	r3, r3, #6
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	bf02      	ittt	eq
 8006d9e:	68e5      	ldreq	r5, [r4, #12]
 8006da0:	6833      	ldreq	r3, [r6, #0]
 8006da2:	1aed      	subeq	r5, r5, r3
 8006da4:	68a3      	ldr	r3, [r4, #8]
 8006da6:	bf0c      	ite	eq
 8006da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dac:	2500      	movne	r5, #0
 8006dae:	4293      	cmp	r3, r2
 8006db0:	bfc4      	itt	gt
 8006db2:	1a9b      	subgt	r3, r3, r2
 8006db4:	18ed      	addgt	r5, r5, r3
 8006db6:	2600      	movs	r6, #0
 8006db8:	341a      	adds	r4, #26
 8006dba:	42b5      	cmp	r5, r6
 8006dbc:	d11a      	bne.n	8006df4 <_printf_common+0xc8>
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	e008      	b.n	8006dd4 <_printf_common+0xa8>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4652      	mov	r2, sl
 8006dc6:	4641      	mov	r1, r8
 8006dc8:	4638      	mov	r0, r7
 8006dca:	47c8      	blx	r9
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d103      	bne.n	8006dd8 <_printf_common+0xac>
 8006dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd8:	3501      	adds	r5, #1
 8006dda:	e7c6      	b.n	8006d6a <_printf_common+0x3e>
 8006ddc:	18e1      	adds	r1, r4, r3
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	2030      	movs	r0, #48	@ 0x30
 8006de2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006de6:	4422      	add	r2, r4
 8006de8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006dec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006df0:	3302      	adds	r3, #2
 8006df2:	e7c7      	b.n	8006d84 <_printf_common+0x58>
 8006df4:	2301      	movs	r3, #1
 8006df6:	4622      	mov	r2, r4
 8006df8:	4641      	mov	r1, r8
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	47c8      	blx	r9
 8006dfe:	3001      	adds	r0, #1
 8006e00:	d0e6      	beq.n	8006dd0 <_printf_common+0xa4>
 8006e02:	3601      	adds	r6, #1
 8006e04:	e7d9      	b.n	8006dba <_printf_common+0x8e>
	...

08006e08 <_printf_i>:
 8006e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	7e0f      	ldrb	r7, [r1, #24]
 8006e0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e10:	2f78      	cmp	r7, #120	@ 0x78
 8006e12:	4691      	mov	r9, r2
 8006e14:	4680      	mov	r8, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	469a      	mov	sl, r3
 8006e1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e1e:	d807      	bhi.n	8006e30 <_printf_i+0x28>
 8006e20:	2f62      	cmp	r7, #98	@ 0x62
 8006e22:	d80a      	bhi.n	8006e3a <_printf_i+0x32>
 8006e24:	2f00      	cmp	r7, #0
 8006e26:	f000 80d2 	beq.w	8006fce <_printf_i+0x1c6>
 8006e2a:	2f58      	cmp	r7, #88	@ 0x58
 8006e2c:	f000 80b9 	beq.w	8006fa2 <_printf_i+0x19a>
 8006e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e38:	e03a      	b.n	8006eb0 <_printf_i+0xa8>
 8006e3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e3e:	2b15      	cmp	r3, #21
 8006e40:	d8f6      	bhi.n	8006e30 <_printf_i+0x28>
 8006e42:	a101      	add	r1, pc, #4	@ (adr r1, 8006e48 <_printf_i+0x40>)
 8006e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e48:	08006ea1 	.word	0x08006ea1
 8006e4c:	08006eb5 	.word	0x08006eb5
 8006e50:	08006e31 	.word	0x08006e31
 8006e54:	08006e31 	.word	0x08006e31
 8006e58:	08006e31 	.word	0x08006e31
 8006e5c:	08006e31 	.word	0x08006e31
 8006e60:	08006eb5 	.word	0x08006eb5
 8006e64:	08006e31 	.word	0x08006e31
 8006e68:	08006e31 	.word	0x08006e31
 8006e6c:	08006e31 	.word	0x08006e31
 8006e70:	08006e31 	.word	0x08006e31
 8006e74:	08006fb5 	.word	0x08006fb5
 8006e78:	08006edf 	.word	0x08006edf
 8006e7c:	08006f6f 	.word	0x08006f6f
 8006e80:	08006e31 	.word	0x08006e31
 8006e84:	08006e31 	.word	0x08006e31
 8006e88:	08006fd7 	.word	0x08006fd7
 8006e8c:	08006e31 	.word	0x08006e31
 8006e90:	08006edf 	.word	0x08006edf
 8006e94:	08006e31 	.word	0x08006e31
 8006e98:	08006e31 	.word	0x08006e31
 8006e9c:	08006f77 	.word	0x08006f77
 8006ea0:	6833      	ldr	r3, [r6, #0]
 8006ea2:	1d1a      	adds	r2, r3, #4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6032      	str	r2, [r6, #0]
 8006ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006eac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e09d      	b.n	8006ff0 <_printf_i+0x1e8>
 8006eb4:	6833      	ldr	r3, [r6, #0]
 8006eb6:	6820      	ldr	r0, [r4, #0]
 8006eb8:	1d19      	adds	r1, r3, #4
 8006eba:	6031      	str	r1, [r6, #0]
 8006ebc:	0606      	lsls	r6, r0, #24
 8006ebe:	d501      	bpl.n	8006ec4 <_printf_i+0xbc>
 8006ec0:	681d      	ldr	r5, [r3, #0]
 8006ec2:	e003      	b.n	8006ecc <_printf_i+0xc4>
 8006ec4:	0645      	lsls	r5, r0, #25
 8006ec6:	d5fb      	bpl.n	8006ec0 <_printf_i+0xb8>
 8006ec8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ecc:	2d00      	cmp	r5, #0
 8006ece:	da03      	bge.n	8006ed8 <_printf_i+0xd0>
 8006ed0:	232d      	movs	r3, #45	@ 0x2d
 8006ed2:	426d      	negs	r5, r5
 8006ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ed8:	4859      	ldr	r0, [pc, #356]	@ (8007040 <_printf_i+0x238>)
 8006eda:	230a      	movs	r3, #10
 8006edc:	e011      	b.n	8006f02 <_printf_i+0xfa>
 8006ede:	6821      	ldr	r1, [r4, #0]
 8006ee0:	6833      	ldr	r3, [r6, #0]
 8006ee2:	0608      	lsls	r0, r1, #24
 8006ee4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ee8:	d402      	bmi.n	8006ef0 <_printf_i+0xe8>
 8006eea:	0649      	lsls	r1, r1, #25
 8006eec:	bf48      	it	mi
 8006eee:	b2ad      	uxthmi	r5, r5
 8006ef0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ef2:	4853      	ldr	r0, [pc, #332]	@ (8007040 <_printf_i+0x238>)
 8006ef4:	6033      	str	r3, [r6, #0]
 8006ef6:	bf14      	ite	ne
 8006ef8:	230a      	movne	r3, #10
 8006efa:	2308      	moveq	r3, #8
 8006efc:	2100      	movs	r1, #0
 8006efe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f02:	6866      	ldr	r6, [r4, #4]
 8006f04:	60a6      	str	r6, [r4, #8]
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	bfa2      	ittt	ge
 8006f0a:	6821      	ldrge	r1, [r4, #0]
 8006f0c:	f021 0104 	bicge.w	r1, r1, #4
 8006f10:	6021      	strge	r1, [r4, #0]
 8006f12:	b90d      	cbnz	r5, 8006f18 <_printf_i+0x110>
 8006f14:	2e00      	cmp	r6, #0
 8006f16:	d04b      	beq.n	8006fb0 <_printf_i+0x1a8>
 8006f18:	4616      	mov	r6, r2
 8006f1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f1e:	fb03 5711 	mls	r7, r3, r1, r5
 8006f22:	5dc7      	ldrb	r7, [r0, r7]
 8006f24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f28:	462f      	mov	r7, r5
 8006f2a:	42bb      	cmp	r3, r7
 8006f2c:	460d      	mov	r5, r1
 8006f2e:	d9f4      	bls.n	8006f1a <_printf_i+0x112>
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d10b      	bne.n	8006f4c <_printf_i+0x144>
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	07df      	lsls	r7, r3, #31
 8006f38:	d508      	bpl.n	8006f4c <_printf_i+0x144>
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	6861      	ldr	r1, [r4, #4]
 8006f3e:	4299      	cmp	r1, r3
 8006f40:	bfde      	ittt	le
 8006f42:	2330      	movle	r3, #48	@ 0x30
 8006f44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f4c:	1b92      	subs	r2, r2, r6
 8006f4e:	6122      	str	r2, [r4, #16]
 8006f50:	f8cd a000 	str.w	sl, [sp]
 8006f54:	464b      	mov	r3, r9
 8006f56:	aa03      	add	r2, sp, #12
 8006f58:	4621      	mov	r1, r4
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	f7ff fee6 	bl	8006d2c <_printf_common>
 8006f60:	3001      	adds	r0, #1
 8006f62:	d14a      	bne.n	8006ffa <_printf_i+0x1f2>
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
 8006f68:	b004      	add	sp, #16
 8006f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	f043 0320 	orr.w	r3, r3, #32
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	4833      	ldr	r0, [pc, #204]	@ (8007044 <_printf_i+0x23c>)
 8006f78:	2778      	movs	r7, #120	@ 0x78
 8006f7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	6831      	ldr	r1, [r6, #0]
 8006f82:	061f      	lsls	r7, r3, #24
 8006f84:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f88:	d402      	bmi.n	8006f90 <_printf_i+0x188>
 8006f8a:	065f      	lsls	r7, r3, #25
 8006f8c:	bf48      	it	mi
 8006f8e:	b2ad      	uxthmi	r5, r5
 8006f90:	6031      	str	r1, [r6, #0]
 8006f92:	07d9      	lsls	r1, r3, #31
 8006f94:	bf44      	itt	mi
 8006f96:	f043 0320 	orrmi.w	r3, r3, #32
 8006f9a:	6023      	strmi	r3, [r4, #0]
 8006f9c:	b11d      	cbz	r5, 8006fa6 <_printf_i+0x19e>
 8006f9e:	2310      	movs	r3, #16
 8006fa0:	e7ac      	b.n	8006efc <_printf_i+0xf4>
 8006fa2:	4827      	ldr	r0, [pc, #156]	@ (8007040 <_printf_i+0x238>)
 8006fa4:	e7e9      	b.n	8006f7a <_printf_i+0x172>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	f023 0320 	bic.w	r3, r3, #32
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	e7f6      	b.n	8006f9e <_printf_i+0x196>
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	e7bd      	b.n	8006f30 <_printf_i+0x128>
 8006fb4:	6833      	ldr	r3, [r6, #0]
 8006fb6:	6825      	ldr	r5, [r4, #0]
 8006fb8:	6961      	ldr	r1, [r4, #20]
 8006fba:	1d18      	adds	r0, r3, #4
 8006fbc:	6030      	str	r0, [r6, #0]
 8006fbe:	062e      	lsls	r6, r5, #24
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	d501      	bpl.n	8006fc8 <_printf_i+0x1c0>
 8006fc4:	6019      	str	r1, [r3, #0]
 8006fc6:	e002      	b.n	8006fce <_printf_i+0x1c6>
 8006fc8:	0668      	lsls	r0, r5, #25
 8006fca:	d5fb      	bpl.n	8006fc4 <_printf_i+0x1bc>
 8006fcc:	8019      	strh	r1, [r3, #0]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	6123      	str	r3, [r4, #16]
 8006fd2:	4616      	mov	r6, r2
 8006fd4:	e7bc      	b.n	8006f50 <_printf_i+0x148>
 8006fd6:	6833      	ldr	r3, [r6, #0]
 8006fd8:	1d1a      	adds	r2, r3, #4
 8006fda:	6032      	str	r2, [r6, #0]
 8006fdc:	681e      	ldr	r6, [r3, #0]
 8006fde:	6862      	ldr	r2, [r4, #4]
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f7f9 f8fc 	bl	80001e0 <memchr>
 8006fe8:	b108      	cbz	r0, 8006fee <_printf_i+0x1e6>
 8006fea:	1b80      	subs	r0, r0, r6
 8006fec:	6060      	str	r0, [r4, #4]
 8006fee:	6863      	ldr	r3, [r4, #4]
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ff8:	e7aa      	b.n	8006f50 <_printf_i+0x148>
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	4649      	mov	r1, r9
 8007000:	4640      	mov	r0, r8
 8007002:	47d0      	blx	sl
 8007004:	3001      	adds	r0, #1
 8007006:	d0ad      	beq.n	8006f64 <_printf_i+0x15c>
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	079b      	lsls	r3, r3, #30
 800700c:	d413      	bmi.n	8007036 <_printf_i+0x22e>
 800700e:	68e0      	ldr	r0, [r4, #12]
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	4298      	cmp	r0, r3
 8007014:	bfb8      	it	lt
 8007016:	4618      	movlt	r0, r3
 8007018:	e7a6      	b.n	8006f68 <_printf_i+0x160>
 800701a:	2301      	movs	r3, #1
 800701c:	4632      	mov	r2, r6
 800701e:	4649      	mov	r1, r9
 8007020:	4640      	mov	r0, r8
 8007022:	47d0      	blx	sl
 8007024:	3001      	adds	r0, #1
 8007026:	d09d      	beq.n	8006f64 <_printf_i+0x15c>
 8007028:	3501      	adds	r5, #1
 800702a:	68e3      	ldr	r3, [r4, #12]
 800702c:	9903      	ldr	r1, [sp, #12]
 800702e:	1a5b      	subs	r3, r3, r1
 8007030:	42ab      	cmp	r3, r5
 8007032:	dcf2      	bgt.n	800701a <_printf_i+0x212>
 8007034:	e7eb      	b.n	800700e <_printf_i+0x206>
 8007036:	2500      	movs	r5, #0
 8007038:	f104 0619 	add.w	r6, r4, #25
 800703c:	e7f5      	b.n	800702a <_printf_i+0x222>
 800703e:	bf00      	nop
 8007040:	0800af2e 	.word	0x0800af2e
 8007044:	0800af3f 	.word	0x0800af3f

08007048 <_scanf_float>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	b087      	sub	sp, #28
 800704e:	4617      	mov	r7, r2
 8007050:	9303      	str	r3, [sp, #12]
 8007052:	688b      	ldr	r3, [r1, #8]
 8007054:	1e5a      	subs	r2, r3, #1
 8007056:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800705a:	bf81      	itttt	hi
 800705c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007060:	eb03 0b05 	addhi.w	fp, r3, r5
 8007064:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007068:	608b      	strhi	r3, [r1, #8]
 800706a:	680b      	ldr	r3, [r1, #0]
 800706c:	460a      	mov	r2, r1
 800706e:	f04f 0500 	mov.w	r5, #0
 8007072:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007076:	f842 3b1c 	str.w	r3, [r2], #28
 800707a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800707e:	4680      	mov	r8, r0
 8007080:	460c      	mov	r4, r1
 8007082:	bf98      	it	ls
 8007084:	f04f 0b00 	movls.w	fp, #0
 8007088:	9201      	str	r2, [sp, #4]
 800708a:	4616      	mov	r6, r2
 800708c:	46aa      	mov	sl, r5
 800708e:	46a9      	mov	r9, r5
 8007090:	9502      	str	r5, [sp, #8]
 8007092:	68a2      	ldr	r2, [r4, #8]
 8007094:	b152      	cbz	r2, 80070ac <_scanf_float+0x64>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b4e      	cmp	r3, #78	@ 0x4e
 800709c:	d864      	bhi.n	8007168 <_scanf_float+0x120>
 800709e:	2b40      	cmp	r3, #64	@ 0x40
 80070a0:	d83c      	bhi.n	800711c <_scanf_float+0xd4>
 80070a2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80070a6:	b2c8      	uxtb	r0, r1
 80070a8:	280e      	cmp	r0, #14
 80070aa:	d93a      	bls.n	8007122 <_scanf_float+0xda>
 80070ac:	f1b9 0f00 	cmp.w	r9, #0
 80070b0:	d003      	beq.n	80070ba <_scanf_float+0x72>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070be:	f1ba 0f01 	cmp.w	sl, #1
 80070c2:	f200 8117 	bhi.w	80072f4 <_scanf_float+0x2ac>
 80070c6:	9b01      	ldr	r3, [sp, #4]
 80070c8:	429e      	cmp	r6, r3
 80070ca:	f200 8108 	bhi.w	80072de <_scanf_float+0x296>
 80070ce:	2001      	movs	r0, #1
 80070d0:	b007      	add	sp, #28
 80070d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80070da:	2a0d      	cmp	r2, #13
 80070dc:	d8e6      	bhi.n	80070ac <_scanf_float+0x64>
 80070de:	a101      	add	r1, pc, #4	@ (adr r1, 80070e4 <_scanf_float+0x9c>)
 80070e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80070e4:	0800722b 	.word	0x0800722b
 80070e8:	080070ad 	.word	0x080070ad
 80070ec:	080070ad 	.word	0x080070ad
 80070f0:	080070ad 	.word	0x080070ad
 80070f4:	0800728b 	.word	0x0800728b
 80070f8:	08007263 	.word	0x08007263
 80070fc:	080070ad 	.word	0x080070ad
 8007100:	080070ad 	.word	0x080070ad
 8007104:	08007239 	.word	0x08007239
 8007108:	080070ad 	.word	0x080070ad
 800710c:	080070ad 	.word	0x080070ad
 8007110:	080070ad 	.word	0x080070ad
 8007114:	080070ad 	.word	0x080070ad
 8007118:	080071f1 	.word	0x080071f1
 800711c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007120:	e7db      	b.n	80070da <_scanf_float+0x92>
 8007122:	290e      	cmp	r1, #14
 8007124:	d8c2      	bhi.n	80070ac <_scanf_float+0x64>
 8007126:	a001      	add	r0, pc, #4	@ (adr r0, 800712c <_scanf_float+0xe4>)
 8007128:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800712c:	080071e1 	.word	0x080071e1
 8007130:	080070ad 	.word	0x080070ad
 8007134:	080071e1 	.word	0x080071e1
 8007138:	08007277 	.word	0x08007277
 800713c:	080070ad 	.word	0x080070ad
 8007140:	08007189 	.word	0x08007189
 8007144:	080071c7 	.word	0x080071c7
 8007148:	080071c7 	.word	0x080071c7
 800714c:	080071c7 	.word	0x080071c7
 8007150:	080071c7 	.word	0x080071c7
 8007154:	080071c7 	.word	0x080071c7
 8007158:	080071c7 	.word	0x080071c7
 800715c:	080071c7 	.word	0x080071c7
 8007160:	080071c7 	.word	0x080071c7
 8007164:	080071c7 	.word	0x080071c7
 8007168:	2b6e      	cmp	r3, #110	@ 0x6e
 800716a:	d809      	bhi.n	8007180 <_scanf_float+0x138>
 800716c:	2b60      	cmp	r3, #96	@ 0x60
 800716e:	d8b2      	bhi.n	80070d6 <_scanf_float+0x8e>
 8007170:	2b54      	cmp	r3, #84	@ 0x54
 8007172:	d07b      	beq.n	800726c <_scanf_float+0x224>
 8007174:	2b59      	cmp	r3, #89	@ 0x59
 8007176:	d199      	bne.n	80070ac <_scanf_float+0x64>
 8007178:	2d07      	cmp	r5, #7
 800717a:	d197      	bne.n	80070ac <_scanf_float+0x64>
 800717c:	2508      	movs	r5, #8
 800717e:	e02c      	b.n	80071da <_scanf_float+0x192>
 8007180:	2b74      	cmp	r3, #116	@ 0x74
 8007182:	d073      	beq.n	800726c <_scanf_float+0x224>
 8007184:	2b79      	cmp	r3, #121	@ 0x79
 8007186:	e7f6      	b.n	8007176 <_scanf_float+0x12e>
 8007188:	6821      	ldr	r1, [r4, #0]
 800718a:	05c8      	lsls	r0, r1, #23
 800718c:	d51b      	bpl.n	80071c6 <_scanf_float+0x17e>
 800718e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007192:	6021      	str	r1, [r4, #0]
 8007194:	f109 0901 	add.w	r9, r9, #1
 8007198:	f1bb 0f00 	cmp.w	fp, #0
 800719c:	d003      	beq.n	80071a6 <_scanf_float+0x15e>
 800719e:	3201      	adds	r2, #1
 80071a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071a4:	60a2      	str	r2, [r4, #8]
 80071a6:	68a3      	ldr	r3, [r4, #8]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	60a3      	str	r3, [r4, #8]
 80071ac:	6923      	ldr	r3, [r4, #16]
 80071ae:	3301      	adds	r3, #1
 80071b0:	6123      	str	r3, [r4, #16]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	607b      	str	r3, [r7, #4]
 80071ba:	f340 8087 	ble.w	80072cc <_scanf_float+0x284>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	3301      	adds	r3, #1
 80071c2:	603b      	str	r3, [r7, #0]
 80071c4:	e765      	b.n	8007092 <_scanf_float+0x4a>
 80071c6:	eb1a 0105 	adds.w	r1, sl, r5
 80071ca:	f47f af6f 	bne.w	80070ac <_scanf_float+0x64>
 80071ce:	6822      	ldr	r2, [r4, #0]
 80071d0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80071d4:	6022      	str	r2, [r4, #0]
 80071d6:	460d      	mov	r5, r1
 80071d8:	468a      	mov	sl, r1
 80071da:	f806 3b01 	strb.w	r3, [r6], #1
 80071de:	e7e2      	b.n	80071a6 <_scanf_float+0x15e>
 80071e0:	6822      	ldr	r2, [r4, #0]
 80071e2:	0610      	lsls	r0, r2, #24
 80071e4:	f57f af62 	bpl.w	80070ac <_scanf_float+0x64>
 80071e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071ec:	6022      	str	r2, [r4, #0]
 80071ee:	e7f4      	b.n	80071da <_scanf_float+0x192>
 80071f0:	f1ba 0f00 	cmp.w	sl, #0
 80071f4:	d10e      	bne.n	8007214 <_scanf_float+0x1cc>
 80071f6:	f1b9 0f00 	cmp.w	r9, #0
 80071fa:	d10e      	bne.n	800721a <_scanf_float+0x1d2>
 80071fc:	6822      	ldr	r2, [r4, #0]
 80071fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007202:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007206:	d108      	bne.n	800721a <_scanf_float+0x1d2>
 8007208:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800720c:	6022      	str	r2, [r4, #0]
 800720e:	f04f 0a01 	mov.w	sl, #1
 8007212:	e7e2      	b.n	80071da <_scanf_float+0x192>
 8007214:	f1ba 0f02 	cmp.w	sl, #2
 8007218:	d055      	beq.n	80072c6 <_scanf_float+0x27e>
 800721a:	2d01      	cmp	r5, #1
 800721c:	d002      	beq.n	8007224 <_scanf_float+0x1dc>
 800721e:	2d04      	cmp	r5, #4
 8007220:	f47f af44 	bne.w	80070ac <_scanf_float+0x64>
 8007224:	3501      	adds	r5, #1
 8007226:	b2ed      	uxtb	r5, r5
 8007228:	e7d7      	b.n	80071da <_scanf_float+0x192>
 800722a:	f1ba 0f01 	cmp.w	sl, #1
 800722e:	f47f af3d 	bne.w	80070ac <_scanf_float+0x64>
 8007232:	f04f 0a02 	mov.w	sl, #2
 8007236:	e7d0      	b.n	80071da <_scanf_float+0x192>
 8007238:	b97d      	cbnz	r5, 800725a <_scanf_float+0x212>
 800723a:	f1b9 0f00 	cmp.w	r9, #0
 800723e:	f47f af38 	bne.w	80070b2 <_scanf_float+0x6a>
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007248:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800724c:	f040 8108 	bne.w	8007460 <_scanf_float+0x418>
 8007250:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007254:	6022      	str	r2, [r4, #0]
 8007256:	2501      	movs	r5, #1
 8007258:	e7bf      	b.n	80071da <_scanf_float+0x192>
 800725a:	2d03      	cmp	r5, #3
 800725c:	d0e2      	beq.n	8007224 <_scanf_float+0x1dc>
 800725e:	2d05      	cmp	r5, #5
 8007260:	e7de      	b.n	8007220 <_scanf_float+0x1d8>
 8007262:	2d02      	cmp	r5, #2
 8007264:	f47f af22 	bne.w	80070ac <_scanf_float+0x64>
 8007268:	2503      	movs	r5, #3
 800726a:	e7b6      	b.n	80071da <_scanf_float+0x192>
 800726c:	2d06      	cmp	r5, #6
 800726e:	f47f af1d 	bne.w	80070ac <_scanf_float+0x64>
 8007272:	2507      	movs	r5, #7
 8007274:	e7b1      	b.n	80071da <_scanf_float+0x192>
 8007276:	6822      	ldr	r2, [r4, #0]
 8007278:	0591      	lsls	r1, r2, #22
 800727a:	f57f af17 	bpl.w	80070ac <_scanf_float+0x64>
 800727e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007282:	6022      	str	r2, [r4, #0]
 8007284:	f8cd 9008 	str.w	r9, [sp, #8]
 8007288:	e7a7      	b.n	80071da <_scanf_float+0x192>
 800728a:	6822      	ldr	r2, [r4, #0]
 800728c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007290:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007294:	d006      	beq.n	80072a4 <_scanf_float+0x25c>
 8007296:	0550      	lsls	r0, r2, #21
 8007298:	f57f af08 	bpl.w	80070ac <_scanf_float+0x64>
 800729c:	f1b9 0f00 	cmp.w	r9, #0
 80072a0:	f000 80de 	beq.w	8007460 <_scanf_float+0x418>
 80072a4:	0591      	lsls	r1, r2, #22
 80072a6:	bf58      	it	pl
 80072a8:	9902      	ldrpl	r1, [sp, #8]
 80072aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072ae:	bf58      	it	pl
 80072b0:	eba9 0101 	subpl.w	r1, r9, r1
 80072b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80072b8:	bf58      	it	pl
 80072ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80072be:	6022      	str	r2, [r4, #0]
 80072c0:	f04f 0900 	mov.w	r9, #0
 80072c4:	e789      	b.n	80071da <_scanf_float+0x192>
 80072c6:	f04f 0a03 	mov.w	sl, #3
 80072ca:	e786      	b.n	80071da <_scanf_float+0x192>
 80072cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80072d0:	4639      	mov	r1, r7
 80072d2:	4640      	mov	r0, r8
 80072d4:	4798      	blx	r3
 80072d6:	2800      	cmp	r0, #0
 80072d8:	f43f aedb 	beq.w	8007092 <_scanf_float+0x4a>
 80072dc:	e6e6      	b.n	80070ac <_scanf_float+0x64>
 80072de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072e6:	463a      	mov	r2, r7
 80072e8:	4640      	mov	r0, r8
 80072ea:	4798      	blx	r3
 80072ec:	6923      	ldr	r3, [r4, #16]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	6123      	str	r3, [r4, #16]
 80072f2:	e6e8      	b.n	80070c6 <_scanf_float+0x7e>
 80072f4:	1e6b      	subs	r3, r5, #1
 80072f6:	2b06      	cmp	r3, #6
 80072f8:	d824      	bhi.n	8007344 <_scanf_float+0x2fc>
 80072fa:	2d02      	cmp	r5, #2
 80072fc:	d836      	bhi.n	800736c <_scanf_float+0x324>
 80072fe:	9b01      	ldr	r3, [sp, #4]
 8007300:	429e      	cmp	r6, r3
 8007302:	f67f aee4 	bls.w	80070ce <_scanf_float+0x86>
 8007306:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800730a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800730e:	463a      	mov	r2, r7
 8007310:	4640      	mov	r0, r8
 8007312:	4798      	blx	r3
 8007314:	6923      	ldr	r3, [r4, #16]
 8007316:	3b01      	subs	r3, #1
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	e7f0      	b.n	80072fe <_scanf_float+0x2b6>
 800731c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007320:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007324:	463a      	mov	r2, r7
 8007326:	4640      	mov	r0, r8
 8007328:	4798      	blx	r3
 800732a:	6923      	ldr	r3, [r4, #16]
 800732c:	3b01      	subs	r3, #1
 800732e:	6123      	str	r3, [r4, #16]
 8007330:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007334:	fa5f fa8a 	uxtb.w	sl, sl
 8007338:	f1ba 0f02 	cmp.w	sl, #2
 800733c:	d1ee      	bne.n	800731c <_scanf_float+0x2d4>
 800733e:	3d03      	subs	r5, #3
 8007340:	b2ed      	uxtb	r5, r5
 8007342:	1b76      	subs	r6, r6, r5
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	05da      	lsls	r2, r3, #23
 8007348:	d530      	bpl.n	80073ac <_scanf_float+0x364>
 800734a:	055b      	lsls	r3, r3, #21
 800734c:	d511      	bpl.n	8007372 <_scanf_float+0x32a>
 800734e:	9b01      	ldr	r3, [sp, #4]
 8007350:	429e      	cmp	r6, r3
 8007352:	f67f aebc 	bls.w	80070ce <_scanf_float+0x86>
 8007356:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800735a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800735e:	463a      	mov	r2, r7
 8007360:	4640      	mov	r0, r8
 8007362:	4798      	blx	r3
 8007364:	6923      	ldr	r3, [r4, #16]
 8007366:	3b01      	subs	r3, #1
 8007368:	6123      	str	r3, [r4, #16]
 800736a:	e7f0      	b.n	800734e <_scanf_float+0x306>
 800736c:	46aa      	mov	sl, r5
 800736e:	46b3      	mov	fp, r6
 8007370:	e7de      	b.n	8007330 <_scanf_float+0x2e8>
 8007372:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	2965      	cmp	r1, #101	@ 0x65
 800737a:	f103 33ff 	add.w	r3, r3, #4294967295
 800737e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007382:	6123      	str	r3, [r4, #16]
 8007384:	d00c      	beq.n	80073a0 <_scanf_float+0x358>
 8007386:	2945      	cmp	r1, #69	@ 0x45
 8007388:	d00a      	beq.n	80073a0 <_scanf_float+0x358>
 800738a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800738e:	463a      	mov	r2, r7
 8007390:	4640      	mov	r0, r8
 8007392:	4798      	blx	r3
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800739a:	3b01      	subs	r3, #1
 800739c:	1eb5      	subs	r5, r6, #2
 800739e:	6123      	str	r3, [r4, #16]
 80073a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073a4:	463a      	mov	r2, r7
 80073a6:	4640      	mov	r0, r8
 80073a8:	4798      	blx	r3
 80073aa:	462e      	mov	r6, r5
 80073ac:	6822      	ldr	r2, [r4, #0]
 80073ae:	f012 0210 	ands.w	r2, r2, #16
 80073b2:	d001      	beq.n	80073b8 <_scanf_float+0x370>
 80073b4:	2000      	movs	r0, #0
 80073b6:	e68b      	b.n	80070d0 <_scanf_float+0x88>
 80073b8:	7032      	strb	r2, [r6, #0]
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80073c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073c4:	d11c      	bne.n	8007400 <_scanf_float+0x3b8>
 80073c6:	9b02      	ldr	r3, [sp, #8]
 80073c8:	454b      	cmp	r3, r9
 80073ca:	eba3 0209 	sub.w	r2, r3, r9
 80073ce:	d123      	bne.n	8007418 <_scanf_float+0x3d0>
 80073d0:	9901      	ldr	r1, [sp, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	4640      	mov	r0, r8
 80073d6:	f002 fc07 	bl	8009be8 <_strtod_r>
 80073da:	9b03      	ldr	r3, [sp, #12]
 80073dc:	6821      	ldr	r1, [r4, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f011 0f02 	tst.w	r1, #2
 80073e4:	ec57 6b10 	vmov	r6, r7, d0
 80073e8:	f103 0204 	add.w	r2, r3, #4
 80073ec:	d01f      	beq.n	800742e <_scanf_float+0x3e6>
 80073ee:	9903      	ldr	r1, [sp, #12]
 80073f0:	600a      	str	r2, [r1, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	e9c3 6700 	strd	r6, r7, [r3]
 80073f8:	68e3      	ldr	r3, [r4, #12]
 80073fa:	3301      	adds	r3, #1
 80073fc:	60e3      	str	r3, [r4, #12]
 80073fe:	e7d9      	b.n	80073b4 <_scanf_float+0x36c>
 8007400:	9b04      	ldr	r3, [sp, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0e4      	beq.n	80073d0 <_scanf_float+0x388>
 8007406:	9905      	ldr	r1, [sp, #20]
 8007408:	230a      	movs	r3, #10
 800740a:	3101      	adds	r1, #1
 800740c:	4640      	mov	r0, r8
 800740e:	f002 fc6b 	bl	8009ce8 <_strtol_r>
 8007412:	9b04      	ldr	r3, [sp, #16]
 8007414:	9e05      	ldr	r6, [sp, #20]
 8007416:	1ac2      	subs	r2, r0, r3
 8007418:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800741c:	429e      	cmp	r6, r3
 800741e:	bf28      	it	cs
 8007420:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007424:	4910      	ldr	r1, [pc, #64]	@ (8007468 <_scanf_float+0x420>)
 8007426:	4630      	mov	r0, r6
 8007428:	f000 f8e4 	bl	80075f4 <siprintf>
 800742c:	e7d0      	b.n	80073d0 <_scanf_float+0x388>
 800742e:	f011 0f04 	tst.w	r1, #4
 8007432:	9903      	ldr	r1, [sp, #12]
 8007434:	600a      	str	r2, [r1, #0]
 8007436:	d1dc      	bne.n	80073f2 <_scanf_float+0x3aa>
 8007438:	681d      	ldr	r5, [r3, #0]
 800743a:	4632      	mov	r2, r6
 800743c:	463b      	mov	r3, r7
 800743e:	4630      	mov	r0, r6
 8007440:	4639      	mov	r1, r7
 8007442:	f7f9 fb7b 	bl	8000b3c <__aeabi_dcmpun>
 8007446:	b128      	cbz	r0, 8007454 <_scanf_float+0x40c>
 8007448:	4808      	ldr	r0, [pc, #32]	@ (800746c <_scanf_float+0x424>)
 800744a:	f000 f9c5 	bl	80077d8 <nanf>
 800744e:	ed85 0a00 	vstr	s0, [r5]
 8007452:	e7d1      	b.n	80073f8 <_scanf_float+0x3b0>
 8007454:	4630      	mov	r0, r6
 8007456:	4639      	mov	r1, r7
 8007458:	f7f9 fbce 	bl	8000bf8 <__aeabi_d2f>
 800745c:	6028      	str	r0, [r5, #0]
 800745e:	e7cb      	b.n	80073f8 <_scanf_float+0x3b0>
 8007460:	f04f 0900 	mov.w	r9, #0
 8007464:	e629      	b.n	80070ba <_scanf_float+0x72>
 8007466:	bf00      	nop
 8007468:	0800af50 	.word	0x0800af50
 800746c:	0800b2e5 	.word	0x0800b2e5

08007470 <std>:
 8007470:	2300      	movs	r3, #0
 8007472:	b510      	push	{r4, lr}
 8007474:	4604      	mov	r4, r0
 8007476:	e9c0 3300 	strd	r3, r3, [r0]
 800747a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800747e:	6083      	str	r3, [r0, #8]
 8007480:	8181      	strh	r1, [r0, #12]
 8007482:	6643      	str	r3, [r0, #100]	@ 0x64
 8007484:	81c2      	strh	r2, [r0, #14]
 8007486:	6183      	str	r3, [r0, #24]
 8007488:	4619      	mov	r1, r3
 800748a:	2208      	movs	r2, #8
 800748c:	305c      	adds	r0, #92	@ 0x5c
 800748e:	f000 f914 	bl	80076ba <memset>
 8007492:	4b0d      	ldr	r3, [pc, #52]	@ (80074c8 <std+0x58>)
 8007494:	6263      	str	r3, [r4, #36]	@ 0x24
 8007496:	4b0d      	ldr	r3, [pc, #52]	@ (80074cc <std+0x5c>)
 8007498:	62a3      	str	r3, [r4, #40]	@ 0x28
 800749a:	4b0d      	ldr	r3, [pc, #52]	@ (80074d0 <std+0x60>)
 800749c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800749e:	4b0d      	ldr	r3, [pc, #52]	@ (80074d4 <std+0x64>)
 80074a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80074a2:	4b0d      	ldr	r3, [pc, #52]	@ (80074d8 <std+0x68>)
 80074a4:	6224      	str	r4, [r4, #32]
 80074a6:	429c      	cmp	r4, r3
 80074a8:	d006      	beq.n	80074b8 <std+0x48>
 80074aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074ae:	4294      	cmp	r4, r2
 80074b0:	d002      	beq.n	80074b8 <std+0x48>
 80074b2:	33d0      	adds	r3, #208	@ 0xd0
 80074b4:	429c      	cmp	r4, r3
 80074b6:	d105      	bne.n	80074c4 <std+0x54>
 80074b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074c0:	f000 b978 	b.w	80077b4 <__retarget_lock_init_recursive>
 80074c4:	bd10      	pop	{r4, pc}
 80074c6:	bf00      	nop
 80074c8:	08007635 	.word	0x08007635
 80074cc:	08007657 	.word	0x08007657
 80074d0:	0800768f 	.word	0x0800768f
 80074d4:	080076b3 	.word	0x080076b3
 80074d8:	20004cac 	.word	0x20004cac

080074dc <stdio_exit_handler>:
 80074dc:	4a02      	ldr	r2, [pc, #8]	@ (80074e8 <stdio_exit_handler+0xc>)
 80074de:	4903      	ldr	r1, [pc, #12]	@ (80074ec <stdio_exit_handler+0x10>)
 80074e0:	4803      	ldr	r0, [pc, #12]	@ (80074f0 <stdio_exit_handler+0x14>)
 80074e2:	f000 b869 	b.w	80075b8 <_fwalk_sglue>
 80074e6:	bf00      	nop
 80074e8:	20000010 	.word	0x20000010
 80074ec:	0800a0a5 	.word	0x0800a0a5
 80074f0:	20000020 	.word	0x20000020

080074f4 <cleanup_stdio>:
 80074f4:	6841      	ldr	r1, [r0, #4]
 80074f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007528 <cleanup_stdio+0x34>)
 80074f8:	4299      	cmp	r1, r3
 80074fa:	b510      	push	{r4, lr}
 80074fc:	4604      	mov	r4, r0
 80074fe:	d001      	beq.n	8007504 <cleanup_stdio+0x10>
 8007500:	f002 fdd0 	bl	800a0a4 <_fflush_r>
 8007504:	68a1      	ldr	r1, [r4, #8]
 8007506:	4b09      	ldr	r3, [pc, #36]	@ (800752c <cleanup_stdio+0x38>)
 8007508:	4299      	cmp	r1, r3
 800750a:	d002      	beq.n	8007512 <cleanup_stdio+0x1e>
 800750c:	4620      	mov	r0, r4
 800750e:	f002 fdc9 	bl	800a0a4 <_fflush_r>
 8007512:	68e1      	ldr	r1, [r4, #12]
 8007514:	4b06      	ldr	r3, [pc, #24]	@ (8007530 <cleanup_stdio+0x3c>)
 8007516:	4299      	cmp	r1, r3
 8007518:	d004      	beq.n	8007524 <cleanup_stdio+0x30>
 800751a:	4620      	mov	r0, r4
 800751c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007520:	f002 bdc0 	b.w	800a0a4 <_fflush_r>
 8007524:	bd10      	pop	{r4, pc}
 8007526:	bf00      	nop
 8007528:	20004cac 	.word	0x20004cac
 800752c:	20004d14 	.word	0x20004d14
 8007530:	20004d7c 	.word	0x20004d7c

08007534 <global_stdio_init.part.0>:
 8007534:	b510      	push	{r4, lr}
 8007536:	4b0b      	ldr	r3, [pc, #44]	@ (8007564 <global_stdio_init.part.0+0x30>)
 8007538:	4c0b      	ldr	r4, [pc, #44]	@ (8007568 <global_stdio_init.part.0+0x34>)
 800753a:	4a0c      	ldr	r2, [pc, #48]	@ (800756c <global_stdio_init.part.0+0x38>)
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	4620      	mov	r0, r4
 8007540:	2200      	movs	r2, #0
 8007542:	2104      	movs	r1, #4
 8007544:	f7ff ff94 	bl	8007470 <std>
 8007548:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800754c:	2201      	movs	r2, #1
 800754e:	2109      	movs	r1, #9
 8007550:	f7ff ff8e 	bl	8007470 <std>
 8007554:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007558:	2202      	movs	r2, #2
 800755a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800755e:	2112      	movs	r1, #18
 8007560:	f7ff bf86 	b.w	8007470 <std>
 8007564:	20004de4 	.word	0x20004de4
 8007568:	20004cac 	.word	0x20004cac
 800756c:	080074dd 	.word	0x080074dd

08007570 <__sfp_lock_acquire>:
 8007570:	4801      	ldr	r0, [pc, #4]	@ (8007578 <__sfp_lock_acquire+0x8>)
 8007572:	f000 b920 	b.w	80077b6 <__retarget_lock_acquire_recursive>
 8007576:	bf00      	nop
 8007578:	20004ded 	.word	0x20004ded

0800757c <__sfp_lock_release>:
 800757c:	4801      	ldr	r0, [pc, #4]	@ (8007584 <__sfp_lock_release+0x8>)
 800757e:	f000 b91b 	b.w	80077b8 <__retarget_lock_release_recursive>
 8007582:	bf00      	nop
 8007584:	20004ded 	.word	0x20004ded

08007588 <__sinit>:
 8007588:	b510      	push	{r4, lr}
 800758a:	4604      	mov	r4, r0
 800758c:	f7ff fff0 	bl	8007570 <__sfp_lock_acquire>
 8007590:	6a23      	ldr	r3, [r4, #32]
 8007592:	b11b      	cbz	r3, 800759c <__sinit+0x14>
 8007594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007598:	f7ff bff0 	b.w	800757c <__sfp_lock_release>
 800759c:	4b04      	ldr	r3, [pc, #16]	@ (80075b0 <__sinit+0x28>)
 800759e:	6223      	str	r3, [r4, #32]
 80075a0:	4b04      	ldr	r3, [pc, #16]	@ (80075b4 <__sinit+0x2c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1f5      	bne.n	8007594 <__sinit+0xc>
 80075a8:	f7ff ffc4 	bl	8007534 <global_stdio_init.part.0>
 80075ac:	e7f2      	b.n	8007594 <__sinit+0xc>
 80075ae:	bf00      	nop
 80075b0:	080074f5 	.word	0x080074f5
 80075b4:	20004de4 	.word	0x20004de4

080075b8 <_fwalk_sglue>:
 80075b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075bc:	4607      	mov	r7, r0
 80075be:	4688      	mov	r8, r1
 80075c0:	4614      	mov	r4, r2
 80075c2:	2600      	movs	r6, #0
 80075c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075c8:	f1b9 0901 	subs.w	r9, r9, #1
 80075cc:	d505      	bpl.n	80075da <_fwalk_sglue+0x22>
 80075ce:	6824      	ldr	r4, [r4, #0]
 80075d0:	2c00      	cmp	r4, #0
 80075d2:	d1f7      	bne.n	80075c4 <_fwalk_sglue+0xc>
 80075d4:	4630      	mov	r0, r6
 80075d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075da:	89ab      	ldrh	r3, [r5, #12]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d907      	bls.n	80075f0 <_fwalk_sglue+0x38>
 80075e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075e4:	3301      	adds	r3, #1
 80075e6:	d003      	beq.n	80075f0 <_fwalk_sglue+0x38>
 80075e8:	4629      	mov	r1, r5
 80075ea:	4638      	mov	r0, r7
 80075ec:	47c0      	blx	r8
 80075ee:	4306      	orrs	r6, r0
 80075f0:	3568      	adds	r5, #104	@ 0x68
 80075f2:	e7e9      	b.n	80075c8 <_fwalk_sglue+0x10>

080075f4 <siprintf>:
 80075f4:	b40e      	push	{r1, r2, r3}
 80075f6:	b500      	push	{lr}
 80075f8:	b09c      	sub	sp, #112	@ 0x70
 80075fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80075fc:	9002      	str	r0, [sp, #8]
 80075fe:	9006      	str	r0, [sp, #24]
 8007600:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007604:	4809      	ldr	r0, [pc, #36]	@ (800762c <siprintf+0x38>)
 8007606:	9107      	str	r1, [sp, #28]
 8007608:	9104      	str	r1, [sp, #16]
 800760a:	4909      	ldr	r1, [pc, #36]	@ (8007630 <siprintf+0x3c>)
 800760c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007610:	9105      	str	r1, [sp, #20]
 8007612:	6800      	ldr	r0, [r0, #0]
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	a902      	add	r1, sp, #8
 8007618:	f002 fbc4 	bl	8009da4 <_svfiprintf_r>
 800761c:	9b02      	ldr	r3, [sp, #8]
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	b01c      	add	sp, #112	@ 0x70
 8007624:	f85d eb04 	ldr.w	lr, [sp], #4
 8007628:	b003      	add	sp, #12
 800762a:	4770      	bx	lr
 800762c:	2000001c 	.word	0x2000001c
 8007630:	ffff0208 	.word	0xffff0208

08007634 <__sread>:
 8007634:	b510      	push	{r4, lr}
 8007636:	460c      	mov	r4, r1
 8007638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800763c:	f000 f86c 	bl	8007718 <_read_r>
 8007640:	2800      	cmp	r0, #0
 8007642:	bfab      	itete	ge
 8007644:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007646:	89a3      	ldrhlt	r3, [r4, #12]
 8007648:	181b      	addge	r3, r3, r0
 800764a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800764e:	bfac      	ite	ge
 8007650:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007652:	81a3      	strhlt	r3, [r4, #12]
 8007654:	bd10      	pop	{r4, pc}

08007656 <__swrite>:
 8007656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800765a:	461f      	mov	r7, r3
 800765c:	898b      	ldrh	r3, [r1, #12]
 800765e:	05db      	lsls	r3, r3, #23
 8007660:	4605      	mov	r5, r0
 8007662:	460c      	mov	r4, r1
 8007664:	4616      	mov	r6, r2
 8007666:	d505      	bpl.n	8007674 <__swrite+0x1e>
 8007668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800766c:	2302      	movs	r3, #2
 800766e:	2200      	movs	r2, #0
 8007670:	f000 f840 	bl	80076f4 <_lseek_r>
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800767a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800767e:	81a3      	strh	r3, [r4, #12]
 8007680:	4632      	mov	r2, r6
 8007682:	463b      	mov	r3, r7
 8007684:	4628      	mov	r0, r5
 8007686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800768a:	f000 b857 	b.w	800773c <_write_r>

0800768e <__sseek>:
 800768e:	b510      	push	{r4, lr}
 8007690:	460c      	mov	r4, r1
 8007692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007696:	f000 f82d 	bl	80076f4 <_lseek_r>
 800769a:	1c43      	adds	r3, r0, #1
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	bf15      	itete	ne
 80076a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076aa:	81a3      	strheq	r3, [r4, #12]
 80076ac:	bf18      	it	ne
 80076ae:	81a3      	strhne	r3, [r4, #12]
 80076b0:	bd10      	pop	{r4, pc}

080076b2 <__sclose>:
 80076b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b6:	f000 b80d 	b.w	80076d4 <_close_r>

080076ba <memset>:
 80076ba:	4402      	add	r2, r0
 80076bc:	4603      	mov	r3, r0
 80076be:	4293      	cmp	r3, r2
 80076c0:	d100      	bne.n	80076c4 <memset+0xa>
 80076c2:	4770      	bx	lr
 80076c4:	f803 1b01 	strb.w	r1, [r3], #1
 80076c8:	e7f9      	b.n	80076be <memset+0x4>
	...

080076cc <_localeconv_r>:
 80076cc:	4800      	ldr	r0, [pc, #0]	@ (80076d0 <_localeconv_r+0x4>)
 80076ce:	4770      	bx	lr
 80076d0:	2000015c 	.word	0x2000015c

080076d4 <_close_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	4d06      	ldr	r5, [pc, #24]	@ (80076f0 <_close_r+0x1c>)
 80076d8:	2300      	movs	r3, #0
 80076da:	4604      	mov	r4, r0
 80076dc:	4608      	mov	r0, r1
 80076de:	602b      	str	r3, [r5, #0]
 80076e0:	f7fa f8ac 	bl	800183c <_close>
 80076e4:	1c43      	adds	r3, r0, #1
 80076e6:	d102      	bne.n	80076ee <_close_r+0x1a>
 80076e8:	682b      	ldr	r3, [r5, #0]
 80076ea:	b103      	cbz	r3, 80076ee <_close_r+0x1a>
 80076ec:	6023      	str	r3, [r4, #0]
 80076ee:	bd38      	pop	{r3, r4, r5, pc}
 80076f0:	20004de8 	.word	0x20004de8

080076f4 <_lseek_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4d07      	ldr	r5, [pc, #28]	@ (8007714 <_lseek_r+0x20>)
 80076f8:	4604      	mov	r4, r0
 80076fa:	4608      	mov	r0, r1
 80076fc:	4611      	mov	r1, r2
 80076fe:	2200      	movs	r2, #0
 8007700:	602a      	str	r2, [r5, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	f7fa f8c1 	bl	800188a <_lseek>
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	d102      	bne.n	8007712 <_lseek_r+0x1e>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	b103      	cbz	r3, 8007712 <_lseek_r+0x1e>
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	20004de8 	.word	0x20004de8

08007718 <_read_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4d07      	ldr	r5, [pc, #28]	@ (8007738 <_read_r+0x20>)
 800771c:	4604      	mov	r4, r0
 800771e:	4608      	mov	r0, r1
 8007720:	4611      	mov	r1, r2
 8007722:	2200      	movs	r2, #0
 8007724:	602a      	str	r2, [r5, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	f7fa f84f 	bl	80017ca <_read>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_read_r+0x1e>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	b103      	cbz	r3, 8007736 <_read_r+0x1e>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	20004de8 	.word	0x20004de8

0800773c <_write_r>:
 800773c:	b538      	push	{r3, r4, r5, lr}
 800773e:	4d07      	ldr	r5, [pc, #28]	@ (800775c <_write_r+0x20>)
 8007740:	4604      	mov	r4, r0
 8007742:	4608      	mov	r0, r1
 8007744:	4611      	mov	r1, r2
 8007746:	2200      	movs	r2, #0
 8007748:	602a      	str	r2, [r5, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	f7fa f85a 	bl	8001804 <_write>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d102      	bne.n	800775a <_write_r+0x1e>
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	b103      	cbz	r3, 800775a <_write_r+0x1e>
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	20004de8 	.word	0x20004de8

08007760 <__errno>:
 8007760:	4b01      	ldr	r3, [pc, #4]	@ (8007768 <__errno+0x8>)
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	2000001c 	.word	0x2000001c

0800776c <__libc_init_array>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	4d0d      	ldr	r5, [pc, #52]	@ (80077a4 <__libc_init_array+0x38>)
 8007770:	4c0d      	ldr	r4, [pc, #52]	@ (80077a8 <__libc_init_array+0x3c>)
 8007772:	1b64      	subs	r4, r4, r5
 8007774:	10a4      	asrs	r4, r4, #2
 8007776:	2600      	movs	r6, #0
 8007778:	42a6      	cmp	r6, r4
 800777a:	d109      	bne.n	8007790 <__libc_init_array+0x24>
 800777c:	4d0b      	ldr	r5, [pc, #44]	@ (80077ac <__libc_init_array+0x40>)
 800777e:	4c0c      	ldr	r4, [pc, #48]	@ (80077b0 <__libc_init_array+0x44>)
 8007780:	f003 fb74 	bl	800ae6c <_init>
 8007784:	1b64      	subs	r4, r4, r5
 8007786:	10a4      	asrs	r4, r4, #2
 8007788:	2600      	movs	r6, #0
 800778a:	42a6      	cmp	r6, r4
 800778c:	d105      	bne.n	800779a <__libc_init_array+0x2e>
 800778e:	bd70      	pop	{r4, r5, r6, pc}
 8007790:	f855 3b04 	ldr.w	r3, [r5], #4
 8007794:	4798      	blx	r3
 8007796:	3601      	adds	r6, #1
 8007798:	e7ee      	b.n	8007778 <__libc_init_array+0xc>
 800779a:	f855 3b04 	ldr.w	r3, [r5], #4
 800779e:	4798      	blx	r3
 80077a0:	3601      	adds	r6, #1
 80077a2:	e7f2      	b.n	800778a <__libc_init_array+0x1e>
 80077a4:	0800b350 	.word	0x0800b350
 80077a8:	0800b350 	.word	0x0800b350
 80077ac:	0800b350 	.word	0x0800b350
 80077b0:	0800b354 	.word	0x0800b354

080077b4 <__retarget_lock_init_recursive>:
 80077b4:	4770      	bx	lr

080077b6 <__retarget_lock_acquire_recursive>:
 80077b6:	4770      	bx	lr

080077b8 <__retarget_lock_release_recursive>:
 80077b8:	4770      	bx	lr

080077ba <memcpy>:
 80077ba:	440a      	add	r2, r1
 80077bc:	4291      	cmp	r1, r2
 80077be:	f100 33ff 	add.w	r3, r0, #4294967295
 80077c2:	d100      	bne.n	80077c6 <memcpy+0xc>
 80077c4:	4770      	bx	lr
 80077c6:	b510      	push	{r4, lr}
 80077c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077d0:	4291      	cmp	r1, r2
 80077d2:	d1f9      	bne.n	80077c8 <memcpy+0xe>
 80077d4:	bd10      	pop	{r4, pc}
	...

080077d8 <nanf>:
 80077d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80077e0 <nanf+0x8>
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	7fc00000 	.word	0x7fc00000

080077e4 <quorem>:
 80077e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e8:	6903      	ldr	r3, [r0, #16]
 80077ea:	690c      	ldr	r4, [r1, #16]
 80077ec:	42a3      	cmp	r3, r4
 80077ee:	4607      	mov	r7, r0
 80077f0:	db7e      	blt.n	80078f0 <quorem+0x10c>
 80077f2:	3c01      	subs	r4, #1
 80077f4:	f101 0814 	add.w	r8, r1, #20
 80077f8:	00a3      	lsls	r3, r4, #2
 80077fa:	f100 0514 	add.w	r5, r0, #20
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800780a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800780e:	3301      	adds	r3, #1
 8007810:	429a      	cmp	r2, r3
 8007812:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007816:	fbb2 f6f3 	udiv	r6, r2, r3
 800781a:	d32e      	bcc.n	800787a <quorem+0x96>
 800781c:	f04f 0a00 	mov.w	sl, #0
 8007820:	46c4      	mov	ip, r8
 8007822:	46ae      	mov	lr, r5
 8007824:	46d3      	mov	fp, sl
 8007826:	f85c 3b04 	ldr.w	r3, [ip], #4
 800782a:	b298      	uxth	r0, r3
 800782c:	fb06 a000 	mla	r0, r6, r0, sl
 8007830:	0c02      	lsrs	r2, r0, #16
 8007832:	0c1b      	lsrs	r3, r3, #16
 8007834:	fb06 2303 	mla	r3, r6, r3, r2
 8007838:	f8de 2000 	ldr.w	r2, [lr]
 800783c:	b280      	uxth	r0, r0
 800783e:	b292      	uxth	r2, r2
 8007840:	1a12      	subs	r2, r2, r0
 8007842:	445a      	add	r2, fp
 8007844:	f8de 0000 	ldr.w	r0, [lr]
 8007848:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800784c:	b29b      	uxth	r3, r3
 800784e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007852:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007856:	b292      	uxth	r2, r2
 8007858:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800785c:	45e1      	cmp	r9, ip
 800785e:	f84e 2b04 	str.w	r2, [lr], #4
 8007862:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007866:	d2de      	bcs.n	8007826 <quorem+0x42>
 8007868:	9b00      	ldr	r3, [sp, #0]
 800786a:	58eb      	ldr	r3, [r5, r3]
 800786c:	b92b      	cbnz	r3, 800787a <quorem+0x96>
 800786e:	9b01      	ldr	r3, [sp, #4]
 8007870:	3b04      	subs	r3, #4
 8007872:	429d      	cmp	r5, r3
 8007874:	461a      	mov	r2, r3
 8007876:	d32f      	bcc.n	80078d8 <quorem+0xf4>
 8007878:	613c      	str	r4, [r7, #16]
 800787a:	4638      	mov	r0, r7
 800787c:	f001 f9c4 	bl	8008c08 <__mcmp>
 8007880:	2800      	cmp	r0, #0
 8007882:	db25      	blt.n	80078d0 <quorem+0xec>
 8007884:	4629      	mov	r1, r5
 8007886:	2000      	movs	r0, #0
 8007888:	f858 2b04 	ldr.w	r2, [r8], #4
 800788c:	f8d1 c000 	ldr.w	ip, [r1]
 8007890:	fa1f fe82 	uxth.w	lr, r2
 8007894:	fa1f f38c 	uxth.w	r3, ip
 8007898:	eba3 030e 	sub.w	r3, r3, lr
 800789c:	4403      	add	r3, r0
 800789e:	0c12      	lsrs	r2, r2, #16
 80078a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80078a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078ae:	45c1      	cmp	r9, r8
 80078b0:	f841 3b04 	str.w	r3, [r1], #4
 80078b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80078b8:	d2e6      	bcs.n	8007888 <quorem+0xa4>
 80078ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078c2:	b922      	cbnz	r2, 80078ce <quorem+0xea>
 80078c4:	3b04      	subs	r3, #4
 80078c6:	429d      	cmp	r5, r3
 80078c8:	461a      	mov	r2, r3
 80078ca:	d30b      	bcc.n	80078e4 <quorem+0x100>
 80078cc:	613c      	str	r4, [r7, #16]
 80078ce:	3601      	adds	r6, #1
 80078d0:	4630      	mov	r0, r6
 80078d2:	b003      	add	sp, #12
 80078d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d8:	6812      	ldr	r2, [r2, #0]
 80078da:	3b04      	subs	r3, #4
 80078dc:	2a00      	cmp	r2, #0
 80078de:	d1cb      	bne.n	8007878 <quorem+0x94>
 80078e0:	3c01      	subs	r4, #1
 80078e2:	e7c6      	b.n	8007872 <quorem+0x8e>
 80078e4:	6812      	ldr	r2, [r2, #0]
 80078e6:	3b04      	subs	r3, #4
 80078e8:	2a00      	cmp	r2, #0
 80078ea:	d1ef      	bne.n	80078cc <quorem+0xe8>
 80078ec:	3c01      	subs	r4, #1
 80078ee:	e7ea      	b.n	80078c6 <quorem+0xe2>
 80078f0:	2000      	movs	r0, #0
 80078f2:	e7ee      	b.n	80078d2 <quorem+0xee>
 80078f4:	0000      	movs	r0, r0
	...

080078f8 <_dtoa_r>:
 80078f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fc:	69c7      	ldr	r7, [r0, #28]
 80078fe:	b099      	sub	sp, #100	@ 0x64
 8007900:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007904:	ec55 4b10 	vmov	r4, r5, d0
 8007908:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800790a:	9109      	str	r1, [sp, #36]	@ 0x24
 800790c:	4683      	mov	fp, r0
 800790e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007910:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007912:	b97f      	cbnz	r7, 8007934 <_dtoa_r+0x3c>
 8007914:	2010      	movs	r0, #16
 8007916:	f000 fdfd 	bl	8008514 <malloc>
 800791a:	4602      	mov	r2, r0
 800791c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007920:	b920      	cbnz	r0, 800792c <_dtoa_r+0x34>
 8007922:	4ba7      	ldr	r3, [pc, #668]	@ (8007bc0 <_dtoa_r+0x2c8>)
 8007924:	21ef      	movs	r1, #239	@ 0xef
 8007926:	48a7      	ldr	r0, [pc, #668]	@ (8007bc4 <_dtoa_r+0x2cc>)
 8007928:	f002 fc2a 	bl	800a180 <__assert_func>
 800792c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007930:	6007      	str	r7, [r0, #0]
 8007932:	60c7      	str	r7, [r0, #12]
 8007934:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007938:	6819      	ldr	r1, [r3, #0]
 800793a:	b159      	cbz	r1, 8007954 <_dtoa_r+0x5c>
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	604a      	str	r2, [r1, #4]
 8007940:	2301      	movs	r3, #1
 8007942:	4093      	lsls	r3, r2
 8007944:	608b      	str	r3, [r1, #8]
 8007946:	4658      	mov	r0, fp
 8007948:	f000 feda 	bl	8008700 <_Bfree>
 800794c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	1e2b      	subs	r3, r5, #0
 8007956:	bfb9      	ittee	lt
 8007958:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800795c:	9303      	strlt	r3, [sp, #12]
 800795e:	2300      	movge	r3, #0
 8007960:	6033      	strge	r3, [r6, #0]
 8007962:	9f03      	ldr	r7, [sp, #12]
 8007964:	4b98      	ldr	r3, [pc, #608]	@ (8007bc8 <_dtoa_r+0x2d0>)
 8007966:	bfbc      	itt	lt
 8007968:	2201      	movlt	r2, #1
 800796a:	6032      	strlt	r2, [r6, #0]
 800796c:	43bb      	bics	r3, r7
 800796e:	d112      	bne.n	8007996 <_dtoa_r+0x9e>
 8007970:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007972:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800797c:	4323      	orrs	r3, r4
 800797e:	f000 854d 	beq.w	800841c <_dtoa_r+0xb24>
 8007982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007984:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007bdc <_dtoa_r+0x2e4>
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 854f 	beq.w	800842c <_dtoa_r+0xb34>
 800798e:	f10a 0303 	add.w	r3, sl, #3
 8007992:	f000 bd49 	b.w	8008428 <_dtoa_r+0xb30>
 8007996:	ed9d 7b02 	vldr	d7, [sp, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	ec51 0b17 	vmov	r0, r1, d7
 80079a0:	2300      	movs	r3, #0
 80079a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80079a6:	f7f9 f897 	bl	8000ad8 <__aeabi_dcmpeq>
 80079aa:	4680      	mov	r8, r0
 80079ac:	b158      	cbz	r0, 80079c6 <_dtoa_r+0xce>
 80079ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80079b0:	2301      	movs	r3, #1
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079b6:	b113      	cbz	r3, 80079be <_dtoa_r+0xc6>
 80079b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80079ba:	4b84      	ldr	r3, [pc, #528]	@ (8007bcc <_dtoa_r+0x2d4>)
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007be0 <_dtoa_r+0x2e8>
 80079c2:	f000 bd33 	b.w	800842c <_dtoa_r+0xb34>
 80079c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80079ca:	aa16      	add	r2, sp, #88	@ 0x58
 80079cc:	a917      	add	r1, sp, #92	@ 0x5c
 80079ce:	4658      	mov	r0, fp
 80079d0:	f001 fa3a 	bl	8008e48 <__d2b>
 80079d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80079d8:	4681      	mov	r9, r0
 80079da:	2e00      	cmp	r6, #0
 80079dc:	d077      	beq.n	8007ace <_dtoa_r+0x1d6>
 80079de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80079e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80079f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80079f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80079f8:	4619      	mov	r1, r3
 80079fa:	2200      	movs	r2, #0
 80079fc:	4b74      	ldr	r3, [pc, #464]	@ (8007bd0 <_dtoa_r+0x2d8>)
 80079fe:	f7f8 fc4b 	bl	8000298 <__aeabi_dsub>
 8007a02:	a369      	add	r3, pc, #420	@ (adr r3, 8007ba8 <_dtoa_r+0x2b0>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f7f8 fdfe 	bl	8000608 <__aeabi_dmul>
 8007a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8007bb0 <_dtoa_r+0x2b8>)
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f7f8 fc43 	bl	800029c <__adddf3>
 8007a16:	4604      	mov	r4, r0
 8007a18:	4630      	mov	r0, r6
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	f7f8 fd8a 	bl	8000534 <__aeabi_i2d>
 8007a20:	a365      	add	r3, pc, #404	@ (adr r3, 8007bb8 <_dtoa_r+0x2c0>)
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	f7f8 fdef 	bl	8000608 <__aeabi_dmul>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4620      	mov	r0, r4
 8007a30:	4629      	mov	r1, r5
 8007a32:	f7f8 fc33 	bl	800029c <__adddf3>
 8007a36:	4604      	mov	r4, r0
 8007a38:	460d      	mov	r5, r1
 8007a3a:	f7f9 f895 	bl	8000b68 <__aeabi_d2iz>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	4607      	mov	r7, r0
 8007a42:	2300      	movs	r3, #0
 8007a44:	4620      	mov	r0, r4
 8007a46:	4629      	mov	r1, r5
 8007a48:	f7f9 f850 	bl	8000aec <__aeabi_dcmplt>
 8007a4c:	b140      	cbz	r0, 8007a60 <_dtoa_r+0x168>
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f7f8 fd70 	bl	8000534 <__aeabi_i2d>
 8007a54:	4622      	mov	r2, r4
 8007a56:	462b      	mov	r3, r5
 8007a58:	f7f9 f83e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a5c:	b900      	cbnz	r0, 8007a60 <_dtoa_r+0x168>
 8007a5e:	3f01      	subs	r7, #1
 8007a60:	2f16      	cmp	r7, #22
 8007a62:	d851      	bhi.n	8007b08 <_dtoa_r+0x210>
 8007a64:	4b5b      	ldr	r3, [pc, #364]	@ (8007bd4 <_dtoa_r+0x2dc>)
 8007a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a72:	f7f9 f83b 	bl	8000aec <__aeabi_dcmplt>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d048      	beq.n	8007b0c <_dtoa_r+0x214>
 8007a7a:	3f01      	subs	r7, #1
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a82:	1b9b      	subs	r3, r3, r6
 8007a84:	1e5a      	subs	r2, r3, #1
 8007a86:	bf44      	itt	mi
 8007a88:	f1c3 0801 	rsbmi	r8, r3, #1
 8007a8c:	2300      	movmi	r3, #0
 8007a8e:	9208      	str	r2, [sp, #32]
 8007a90:	bf54      	ite	pl
 8007a92:	f04f 0800 	movpl.w	r8, #0
 8007a96:	9308      	strmi	r3, [sp, #32]
 8007a98:	2f00      	cmp	r7, #0
 8007a9a:	db39      	blt.n	8007b10 <_dtoa_r+0x218>
 8007a9c:	9b08      	ldr	r3, [sp, #32]
 8007a9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007aa0:	443b      	add	r3, r7
 8007aa2:	9308      	str	r3, [sp, #32]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aaa:	2b09      	cmp	r3, #9
 8007aac:	d864      	bhi.n	8007b78 <_dtoa_r+0x280>
 8007aae:	2b05      	cmp	r3, #5
 8007ab0:	bfc4      	itt	gt
 8007ab2:	3b04      	subgt	r3, #4
 8007ab4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ab8:	f1a3 0302 	sub.w	r3, r3, #2
 8007abc:	bfcc      	ite	gt
 8007abe:	2400      	movgt	r4, #0
 8007ac0:	2401      	movle	r4, #1
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d863      	bhi.n	8007b8e <_dtoa_r+0x296>
 8007ac6:	e8df f003 	tbb	[pc, r3]
 8007aca:	372a      	.short	0x372a
 8007acc:	5535      	.short	0x5535
 8007ace:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007ad2:	441e      	add	r6, r3
 8007ad4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	bfc1      	itttt	gt
 8007adc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ae0:	409f      	lslgt	r7, r3
 8007ae2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007ae6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007aea:	bfd6      	itet	le
 8007aec:	f1c3 0320 	rsble	r3, r3, #32
 8007af0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007af4:	fa04 f003 	lslle.w	r0, r4, r3
 8007af8:	f7f8 fd0c 	bl	8000514 <__aeabi_ui2d>
 8007afc:	2201      	movs	r2, #1
 8007afe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b02:	3e01      	subs	r6, #1
 8007b04:	9214      	str	r2, [sp, #80]	@ 0x50
 8007b06:	e777      	b.n	80079f8 <_dtoa_r+0x100>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e7b8      	b.n	8007a7e <_dtoa_r+0x186>
 8007b0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007b0e:	e7b7      	b.n	8007a80 <_dtoa_r+0x188>
 8007b10:	427b      	negs	r3, r7
 8007b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b14:	2300      	movs	r3, #0
 8007b16:	eba8 0807 	sub.w	r8, r8, r7
 8007b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b1c:	e7c4      	b.n	8007aa8 <_dtoa_r+0x1b0>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	dc35      	bgt.n	8007b94 <_dtoa_r+0x29c>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	9307      	str	r3, [sp, #28]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b32:	e00b      	b.n	8007b4c <_dtoa_r+0x254>
 8007b34:	2301      	movs	r3, #1
 8007b36:	e7f3      	b.n	8007b20 <_dtoa_r+0x228>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b3e:	18fb      	adds	r3, r7, r3
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	9307      	str	r3, [sp, #28]
 8007b48:	bfb8      	it	lt
 8007b4a:	2301      	movlt	r3, #1
 8007b4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007b50:	2100      	movs	r1, #0
 8007b52:	2204      	movs	r2, #4
 8007b54:	f102 0514 	add.w	r5, r2, #20
 8007b58:	429d      	cmp	r5, r3
 8007b5a:	d91f      	bls.n	8007b9c <_dtoa_r+0x2a4>
 8007b5c:	6041      	str	r1, [r0, #4]
 8007b5e:	4658      	mov	r0, fp
 8007b60:	f000 fd8e 	bl	8008680 <_Balloc>
 8007b64:	4682      	mov	sl, r0
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d13c      	bne.n	8007be4 <_dtoa_r+0x2ec>
 8007b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd8 <_dtoa_r+0x2e0>)
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007b72:	e6d8      	b.n	8007926 <_dtoa_r+0x2e>
 8007b74:	2301      	movs	r3, #1
 8007b76:	e7e0      	b.n	8007b3a <_dtoa_r+0x242>
 8007b78:	2401      	movs	r4, #1
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b80:	f04f 33ff 	mov.w	r3, #4294967295
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	9307      	str	r3, [sp, #28]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	2312      	movs	r3, #18
 8007b8c:	e7d0      	b.n	8007b30 <_dtoa_r+0x238>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b92:	e7f5      	b.n	8007b80 <_dtoa_r+0x288>
 8007b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	9307      	str	r3, [sp, #28]
 8007b9a:	e7d7      	b.n	8007b4c <_dtoa_r+0x254>
 8007b9c:	3101      	adds	r1, #1
 8007b9e:	0052      	lsls	r2, r2, #1
 8007ba0:	e7d8      	b.n	8007b54 <_dtoa_r+0x25c>
 8007ba2:	bf00      	nop
 8007ba4:	f3af 8000 	nop.w
 8007ba8:	636f4361 	.word	0x636f4361
 8007bac:	3fd287a7 	.word	0x3fd287a7
 8007bb0:	8b60c8b3 	.word	0x8b60c8b3
 8007bb4:	3fc68a28 	.word	0x3fc68a28
 8007bb8:	509f79fb 	.word	0x509f79fb
 8007bbc:	3fd34413 	.word	0x3fd34413
 8007bc0:	0800af62 	.word	0x0800af62
 8007bc4:	0800af79 	.word	0x0800af79
 8007bc8:	7ff00000 	.word	0x7ff00000
 8007bcc:	0800af2d 	.word	0x0800af2d
 8007bd0:	3ff80000 	.word	0x3ff80000
 8007bd4:	0800b070 	.word	0x0800b070
 8007bd8:	0800afd1 	.word	0x0800afd1
 8007bdc:	0800af5e 	.word	0x0800af5e
 8007be0:	0800af2c 	.word	0x0800af2c
 8007be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007be8:	6018      	str	r0, [r3, #0]
 8007bea:	9b07      	ldr	r3, [sp, #28]
 8007bec:	2b0e      	cmp	r3, #14
 8007bee:	f200 80a4 	bhi.w	8007d3a <_dtoa_r+0x442>
 8007bf2:	2c00      	cmp	r4, #0
 8007bf4:	f000 80a1 	beq.w	8007d3a <_dtoa_r+0x442>
 8007bf8:	2f00      	cmp	r7, #0
 8007bfa:	dd33      	ble.n	8007c64 <_dtoa_r+0x36c>
 8007bfc:	4bad      	ldr	r3, [pc, #692]	@ (8007eb4 <_dtoa_r+0x5bc>)
 8007bfe:	f007 020f 	and.w	r2, r7, #15
 8007c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c06:	ed93 7b00 	vldr	d7, [r3]
 8007c0a:	05f8      	lsls	r0, r7, #23
 8007c0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007c10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c14:	d516      	bpl.n	8007c44 <_dtoa_r+0x34c>
 8007c16:	4ba8      	ldr	r3, [pc, #672]	@ (8007eb8 <_dtoa_r+0x5c0>)
 8007c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c20:	f7f8 fe1c 	bl	800085c <__aeabi_ddiv>
 8007c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c28:	f004 040f 	and.w	r4, r4, #15
 8007c2c:	2603      	movs	r6, #3
 8007c2e:	4da2      	ldr	r5, [pc, #648]	@ (8007eb8 <_dtoa_r+0x5c0>)
 8007c30:	b954      	cbnz	r4, 8007c48 <_dtoa_r+0x350>
 8007c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c3a:	f7f8 fe0f 	bl	800085c <__aeabi_ddiv>
 8007c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c42:	e028      	b.n	8007c96 <_dtoa_r+0x39e>
 8007c44:	2602      	movs	r6, #2
 8007c46:	e7f2      	b.n	8007c2e <_dtoa_r+0x336>
 8007c48:	07e1      	lsls	r1, r4, #31
 8007c4a:	d508      	bpl.n	8007c5e <_dtoa_r+0x366>
 8007c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c54:	f7f8 fcd8 	bl	8000608 <__aeabi_dmul>
 8007c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c5c:	3601      	adds	r6, #1
 8007c5e:	1064      	asrs	r4, r4, #1
 8007c60:	3508      	adds	r5, #8
 8007c62:	e7e5      	b.n	8007c30 <_dtoa_r+0x338>
 8007c64:	f000 80d2 	beq.w	8007e0c <_dtoa_r+0x514>
 8007c68:	427c      	negs	r4, r7
 8007c6a:	4b92      	ldr	r3, [pc, #584]	@ (8007eb4 <_dtoa_r+0x5bc>)
 8007c6c:	4d92      	ldr	r5, [pc, #584]	@ (8007eb8 <_dtoa_r+0x5c0>)
 8007c6e:	f004 020f 	and.w	r2, r4, #15
 8007c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c7e:	f7f8 fcc3 	bl	8000608 <__aeabi_dmul>
 8007c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c86:	1124      	asrs	r4, r4, #4
 8007c88:	2300      	movs	r3, #0
 8007c8a:	2602      	movs	r6, #2
 8007c8c:	2c00      	cmp	r4, #0
 8007c8e:	f040 80b2 	bne.w	8007df6 <_dtoa_r+0x4fe>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1d3      	bne.n	8007c3e <_dtoa_r+0x346>
 8007c96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 80b7 	beq.w	8007e10 <_dtoa_r+0x518>
 8007ca2:	4b86      	ldr	r3, [pc, #536]	@ (8007ebc <_dtoa_r+0x5c4>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7f8 ff1f 	bl	8000aec <__aeabi_dcmplt>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	f000 80ae 	beq.w	8007e10 <_dtoa_r+0x518>
 8007cb4:	9b07      	ldr	r3, [sp, #28]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 80aa 	beq.w	8007e10 <_dtoa_r+0x518>
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	dd37      	ble.n	8007d32 <_dtoa_r+0x43a>
 8007cc2:	1e7b      	subs	r3, r7, #1
 8007cc4:	9304      	str	r3, [sp, #16]
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8007ec0 <_dtoa_r+0x5c8>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	4629      	mov	r1, r5
 8007cce:	f7f8 fc9b 	bl	8000608 <__aeabi_dmul>
 8007cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cd6:	9c00      	ldr	r4, [sp, #0]
 8007cd8:	3601      	adds	r6, #1
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f7f8 fc2a 	bl	8000534 <__aeabi_i2d>
 8007ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ce4:	f7f8 fc90 	bl	8000608 <__aeabi_dmul>
 8007ce8:	4b76      	ldr	r3, [pc, #472]	@ (8007ec4 <_dtoa_r+0x5cc>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	f7f8 fad6 	bl	800029c <__adddf3>
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007cf6:	2c00      	cmp	r4, #0
 8007cf8:	f040 808d 	bne.w	8007e16 <_dtoa_r+0x51e>
 8007cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d00:	4b71      	ldr	r3, [pc, #452]	@ (8007ec8 <_dtoa_r+0x5d0>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	f7f8 fac8 	bl	8000298 <__aeabi_dsub>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d10:	462a      	mov	r2, r5
 8007d12:	4633      	mov	r3, r6
 8007d14:	f7f8 ff08 	bl	8000b28 <__aeabi_dcmpgt>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	f040 828b 	bne.w	8008234 <_dtoa_r+0x93c>
 8007d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d22:	462a      	mov	r2, r5
 8007d24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d28:	f7f8 fee0 	bl	8000aec <__aeabi_dcmplt>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	f040 8128 	bne.w	8007f82 <_dtoa_r+0x68a>
 8007d32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007d36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007d3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f2c0 815a 	blt.w	8007ff6 <_dtoa_r+0x6fe>
 8007d42:	2f0e      	cmp	r7, #14
 8007d44:	f300 8157 	bgt.w	8007ff6 <_dtoa_r+0x6fe>
 8007d48:	4b5a      	ldr	r3, [pc, #360]	@ (8007eb4 <_dtoa_r+0x5bc>)
 8007d4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d4e:	ed93 7b00 	vldr	d7, [r3]
 8007d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	ed8d 7b00 	vstr	d7, [sp]
 8007d5a:	da03      	bge.n	8007d64 <_dtoa_r+0x46c>
 8007d5c:	9b07      	ldr	r3, [sp, #28]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f340 8101 	ble.w	8007f66 <_dtoa_r+0x66e>
 8007d64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d68:	4656      	mov	r6, sl
 8007d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 fd73 	bl	800085c <__aeabi_ddiv>
 8007d76:	f7f8 fef7 	bl	8000b68 <__aeabi_d2iz>
 8007d7a:	4680      	mov	r8, r0
 8007d7c:	f7f8 fbda 	bl	8000534 <__aeabi_i2d>
 8007d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d84:	f7f8 fc40 	bl	8000608 <__aeabi_dmul>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d94:	f7f8 fa80 	bl	8000298 <__aeabi_dsub>
 8007d98:	f806 4b01 	strb.w	r4, [r6], #1
 8007d9c:	9d07      	ldr	r5, [sp, #28]
 8007d9e:	eba6 040a 	sub.w	r4, r6, sl
 8007da2:	42a5      	cmp	r5, r4
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	f040 8117 	bne.w	8007fda <_dtoa_r+0x6e2>
 8007dac:	f7f8 fa76 	bl	800029c <__adddf3>
 8007db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007db4:	4604      	mov	r4, r0
 8007db6:	460d      	mov	r5, r1
 8007db8:	f7f8 feb6 	bl	8000b28 <__aeabi_dcmpgt>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f040 80f9 	bne.w	8007fb4 <_dtoa_r+0x6bc>
 8007dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7f8 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dce:	b118      	cbz	r0, 8007dd8 <_dtoa_r+0x4e0>
 8007dd0:	f018 0f01 	tst.w	r8, #1
 8007dd4:	f040 80ee 	bne.w	8007fb4 <_dtoa_r+0x6bc>
 8007dd8:	4649      	mov	r1, r9
 8007dda:	4658      	mov	r0, fp
 8007ddc:	f000 fc90 	bl	8008700 <_Bfree>
 8007de0:	2300      	movs	r3, #0
 8007de2:	7033      	strb	r3, [r6, #0]
 8007de4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007de6:	3701      	adds	r7, #1
 8007de8:	601f      	str	r7, [r3, #0]
 8007dea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 831d 	beq.w	800842c <_dtoa_r+0xb34>
 8007df2:	601e      	str	r6, [r3, #0]
 8007df4:	e31a      	b.n	800842c <_dtoa_r+0xb34>
 8007df6:	07e2      	lsls	r2, r4, #31
 8007df8:	d505      	bpl.n	8007e06 <_dtoa_r+0x50e>
 8007dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dfe:	f7f8 fc03 	bl	8000608 <__aeabi_dmul>
 8007e02:	3601      	adds	r6, #1
 8007e04:	2301      	movs	r3, #1
 8007e06:	1064      	asrs	r4, r4, #1
 8007e08:	3508      	adds	r5, #8
 8007e0a:	e73f      	b.n	8007c8c <_dtoa_r+0x394>
 8007e0c:	2602      	movs	r6, #2
 8007e0e:	e742      	b.n	8007c96 <_dtoa_r+0x39e>
 8007e10:	9c07      	ldr	r4, [sp, #28]
 8007e12:	9704      	str	r7, [sp, #16]
 8007e14:	e761      	b.n	8007cda <_dtoa_r+0x3e2>
 8007e16:	4b27      	ldr	r3, [pc, #156]	@ (8007eb4 <_dtoa_r+0x5bc>)
 8007e18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e22:	4454      	add	r4, sl
 8007e24:	2900      	cmp	r1, #0
 8007e26:	d053      	beq.n	8007ed0 <_dtoa_r+0x5d8>
 8007e28:	4928      	ldr	r1, [pc, #160]	@ (8007ecc <_dtoa_r+0x5d4>)
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	f7f8 fd16 	bl	800085c <__aeabi_ddiv>
 8007e30:	4633      	mov	r3, r6
 8007e32:	462a      	mov	r2, r5
 8007e34:	f7f8 fa30 	bl	8000298 <__aeabi_dsub>
 8007e38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e3c:	4656      	mov	r6, sl
 8007e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e42:	f7f8 fe91 	bl	8000b68 <__aeabi_d2iz>
 8007e46:	4605      	mov	r5, r0
 8007e48:	f7f8 fb74 	bl	8000534 <__aeabi_i2d>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e54:	f7f8 fa20 	bl	8000298 <__aeabi_dsub>
 8007e58:	3530      	adds	r5, #48	@ 0x30
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e62:	f806 5b01 	strb.w	r5, [r6], #1
 8007e66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e6a:	f7f8 fe3f 	bl	8000aec <__aeabi_dcmplt>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d171      	bne.n	8007f56 <_dtoa_r+0x65e>
 8007e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e76:	4911      	ldr	r1, [pc, #68]	@ (8007ebc <_dtoa_r+0x5c4>)
 8007e78:	2000      	movs	r0, #0
 8007e7a:	f7f8 fa0d 	bl	8000298 <__aeabi_dsub>
 8007e7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e82:	f7f8 fe33 	bl	8000aec <__aeabi_dcmplt>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f040 8095 	bne.w	8007fb6 <_dtoa_r+0x6be>
 8007e8c:	42a6      	cmp	r6, r4
 8007e8e:	f43f af50 	beq.w	8007d32 <_dtoa_r+0x43a>
 8007e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e96:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec0 <_dtoa_r+0x5c8>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f7f8 fbb5 	bl	8000608 <__aeabi_dmul>
 8007e9e:	4b08      	ldr	r3, [pc, #32]	@ (8007ec0 <_dtoa_r+0x5c8>)
 8007ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eaa:	f7f8 fbad 	bl	8000608 <__aeabi_dmul>
 8007eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb2:	e7c4      	b.n	8007e3e <_dtoa_r+0x546>
 8007eb4:	0800b070 	.word	0x0800b070
 8007eb8:	0800b048 	.word	0x0800b048
 8007ebc:	3ff00000 	.word	0x3ff00000
 8007ec0:	40240000 	.word	0x40240000
 8007ec4:	401c0000 	.word	0x401c0000
 8007ec8:	40140000 	.word	0x40140000
 8007ecc:	3fe00000 	.word	0x3fe00000
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7f8 fb98 	bl	8000608 <__aeabi_dmul>
 8007ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007edc:	9415      	str	r4, [sp, #84]	@ 0x54
 8007ede:	4656      	mov	r6, sl
 8007ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee4:	f7f8 fe40 	bl	8000b68 <__aeabi_d2iz>
 8007ee8:	4605      	mov	r5, r0
 8007eea:	f7f8 fb23 	bl	8000534 <__aeabi_i2d>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef6:	f7f8 f9cf 	bl	8000298 <__aeabi_dsub>
 8007efa:	3530      	adds	r5, #48	@ 0x30
 8007efc:	f806 5b01 	strb.w	r5, [r6], #1
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	42a6      	cmp	r6, r4
 8007f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	d124      	bne.n	8007f5a <_dtoa_r+0x662>
 8007f10:	4bac      	ldr	r3, [pc, #688]	@ (80081c4 <_dtoa_r+0x8cc>)
 8007f12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f16:	f7f8 f9c1 	bl	800029c <__adddf3>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f22:	f7f8 fe01 	bl	8000b28 <__aeabi_dcmpgt>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d145      	bne.n	8007fb6 <_dtoa_r+0x6be>
 8007f2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f2e:	49a5      	ldr	r1, [pc, #660]	@ (80081c4 <_dtoa_r+0x8cc>)
 8007f30:	2000      	movs	r0, #0
 8007f32:	f7f8 f9b1 	bl	8000298 <__aeabi_dsub>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f3e:	f7f8 fdd5 	bl	8000aec <__aeabi_dcmplt>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	f43f aef5 	beq.w	8007d32 <_dtoa_r+0x43a>
 8007f48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007f4a:	1e73      	subs	r3, r6, #1
 8007f4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f52:	2b30      	cmp	r3, #48	@ 0x30
 8007f54:	d0f8      	beq.n	8007f48 <_dtoa_r+0x650>
 8007f56:	9f04      	ldr	r7, [sp, #16]
 8007f58:	e73e      	b.n	8007dd8 <_dtoa_r+0x4e0>
 8007f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80081c8 <_dtoa_r+0x8d0>)
 8007f5c:	f7f8 fb54 	bl	8000608 <__aeabi_dmul>
 8007f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f64:	e7bc      	b.n	8007ee0 <_dtoa_r+0x5e8>
 8007f66:	d10c      	bne.n	8007f82 <_dtoa_r+0x68a>
 8007f68:	4b98      	ldr	r3, [pc, #608]	@ (80081cc <_dtoa_r+0x8d4>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f70:	f7f8 fb4a 	bl	8000608 <__aeabi_dmul>
 8007f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f78:	f7f8 fdcc 	bl	8000b14 <__aeabi_dcmpge>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	f000 8157 	beq.w	8008230 <_dtoa_r+0x938>
 8007f82:	2400      	movs	r4, #0
 8007f84:	4625      	mov	r5, r4
 8007f86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f88:	43db      	mvns	r3, r3
 8007f8a:	9304      	str	r3, [sp, #16]
 8007f8c:	4656      	mov	r6, sl
 8007f8e:	2700      	movs	r7, #0
 8007f90:	4621      	mov	r1, r4
 8007f92:	4658      	mov	r0, fp
 8007f94:	f000 fbb4 	bl	8008700 <_Bfree>
 8007f98:	2d00      	cmp	r5, #0
 8007f9a:	d0dc      	beq.n	8007f56 <_dtoa_r+0x65e>
 8007f9c:	b12f      	cbz	r7, 8007faa <_dtoa_r+0x6b2>
 8007f9e:	42af      	cmp	r7, r5
 8007fa0:	d003      	beq.n	8007faa <_dtoa_r+0x6b2>
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	4658      	mov	r0, fp
 8007fa6:	f000 fbab 	bl	8008700 <_Bfree>
 8007faa:	4629      	mov	r1, r5
 8007fac:	4658      	mov	r0, fp
 8007fae:	f000 fba7 	bl	8008700 <_Bfree>
 8007fb2:	e7d0      	b.n	8007f56 <_dtoa_r+0x65e>
 8007fb4:	9704      	str	r7, [sp, #16]
 8007fb6:	4633      	mov	r3, r6
 8007fb8:	461e      	mov	r6, r3
 8007fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fbe:	2a39      	cmp	r2, #57	@ 0x39
 8007fc0:	d107      	bne.n	8007fd2 <_dtoa_r+0x6da>
 8007fc2:	459a      	cmp	sl, r3
 8007fc4:	d1f8      	bne.n	8007fb8 <_dtoa_r+0x6c0>
 8007fc6:	9a04      	ldr	r2, [sp, #16]
 8007fc8:	3201      	adds	r2, #1
 8007fca:	9204      	str	r2, [sp, #16]
 8007fcc:	2230      	movs	r2, #48	@ 0x30
 8007fce:	f88a 2000 	strb.w	r2, [sl]
 8007fd2:	781a      	ldrb	r2, [r3, #0]
 8007fd4:	3201      	adds	r2, #1
 8007fd6:	701a      	strb	r2, [r3, #0]
 8007fd8:	e7bd      	b.n	8007f56 <_dtoa_r+0x65e>
 8007fda:	4b7b      	ldr	r3, [pc, #492]	@ (80081c8 <_dtoa_r+0x8d0>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f7f8 fb13 	bl	8000608 <__aeabi_dmul>
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	460d      	mov	r5, r1
 8007fea:	f7f8 fd75 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	f43f aebb 	beq.w	8007d6a <_dtoa_r+0x472>
 8007ff4:	e6f0      	b.n	8007dd8 <_dtoa_r+0x4e0>
 8007ff6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ff8:	2a00      	cmp	r2, #0
 8007ffa:	f000 80db 	beq.w	80081b4 <_dtoa_r+0x8bc>
 8007ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008000:	2a01      	cmp	r2, #1
 8008002:	f300 80bf 	bgt.w	8008184 <_dtoa_r+0x88c>
 8008006:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008008:	2a00      	cmp	r2, #0
 800800a:	f000 80b7 	beq.w	800817c <_dtoa_r+0x884>
 800800e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008012:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008014:	4646      	mov	r6, r8
 8008016:	9a08      	ldr	r2, [sp, #32]
 8008018:	2101      	movs	r1, #1
 800801a:	441a      	add	r2, r3
 800801c:	4658      	mov	r0, fp
 800801e:	4498      	add	r8, r3
 8008020:	9208      	str	r2, [sp, #32]
 8008022:	f000 fc6b 	bl	80088fc <__i2b>
 8008026:	4605      	mov	r5, r0
 8008028:	b15e      	cbz	r6, 8008042 <_dtoa_r+0x74a>
 800802a:	9b08      	ldr	r3, [sp, #32]
 800802c:	2b00      	cmp	r3, #0
 800802e:	dd08      	ble.n	8008042 <_dtoa_r+0x74a>
 8008030:	42b3      	cmp	r3, r6
 8008032:	9a08      	ldr	r2, [sp, #32]
 8008034:	bfa8      	it	ge
 8008036:	4633      	movge	r3, r6
 8008038:	eba8 0803 	sub.w	r8, r8, r3
 800803c:	1af6      	subs	r6, r6, r3
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	9308      	str	r3, [sp, #32]
 8008042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008044:	b1f3      	cbz	r3, 8008084 <_dtoa_r+0x78c>
 8008046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 80b7 	beq.w	80081bc <_dtoa_r+0x8c4>
 800804e:	b18c      	cbz	r4, 8008074 <_dtoa_r+0x77c>
 8008050:	4629      	mov	r1, r5
 8008052:	4622      	mov	r2, r4
 8008054:	4658      	mov	r0, fp
 8008056:	f000 fd11 	bl	8008a7c <__pow5mult>
 800805a:	464a      	mov	r2, r9
 800805c:	4601      	mov	r1, r0
 800805e:	4605      	mov	r5, r0
 8008060:	4658      	mov	r0, fp
 8008062:	f000 fc61 	bl	8008928 <__multiply>
 8008066:	4649      	mov	r1, r9
 8008068:	9004      	str	r0, [sp, #16]
 800806a:	4658      	mov	r0, fp
 800806c:	f000 fb48 	bl	8008700 <_Bfree>
 8008070:	9b04      	ldr	r3, [sp, #16]
 8008072:	4699      	mov	r9, r3
 8008074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008076:	1b1a      	subs	r2, r3, r4
 8008078:	d004      	beq.n	8008084 <_dtoa_r+0x78c>
 800807a:	4649      	mov	r1, r9
 800807c:	4658      	mov	r0, fp
 800807e:	f000 fcfd 	bl	8008a7c <__pow5mult>
 8008082:	4681      	mov	r9, r0
 8008084:	2101      	movs	r1, #1
 8008086:	4658      	mov	r0, fp
 8008088:	f000 fc38 	bl	80088fc <__i2b>
 800808c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800808e:	4604      	mov	r4, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 81cf 	beq.w	8008434 <_dtoa_r+0xb3c>
 8008096:	461a      	mov	r2, r3
 8008098:	4601      	mov	r1, r0
 800809a:	4658      	mov	r0, fp
 800809c:	f000 fcee 	bl	8008a7c <__pow5mult>
 80080a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	4604      	mov	r4, r0
 80080a6:	f300 8095 	bgt.w	80081d4 <_dtoa_r+0x8dc>
 80080aa:	9b02      	ldr	r3, [sp, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f040 8087 	bne.w	80081c0 <_dtoa_r+0x8c8>
 80080b2:	9b03      	ldr	r3, [sp, #12]
 80080b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f040 8089 	bne.w	80081d0 <_dtoa_r+0x8d8>
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080c4:	0d1b      	lsrs	r3, r3, #20
 80080c6:	051b      	lsls	r3, r3, #20
 80080c8:	b12b      	cbz	r3, 80080d6 <_dtoa_r+0x7de>
 80080ca:	9b08      	ldr	r3, [sp, #32]
 80080cc:	3301      	adds	r3, #1
 80080ce:	9308      	str	r3, [sp, #32]
 80080d0:	f108 0801 	add.w	r8, r8, #1
 80080d4:	2301      	movs	r3, #1
 80080d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80080d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 81b0 	beq.w	8008440 <_dtoa_r+0xb48>
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080e6:	6918      	ldr	r0, [r3, #16]
 80080e8:	f000 fbbc 	bl	8008864 <__hi0bits>
 80080ec:	f1c0 0020 	rsb	r0, r0, #32
 80080f0:	9b08      	ldr	r3, [sp, #32]
 80080f2:	4418      	add	r0, r3
 80080f4:	f010 001f 	ands.w	r0, r0, #31
 80080f8:	d077      	beq.n	80081ea <_dtoa_r+0x8f2>
 80080fa:	f1c0 0320 	rsb	r3, r0, #32
 80080fe:	2b04      	cmp	r3, #4
 8008100:	dd6b      	ble.n	80081da <_dtoa_r+0x8e2>
 8008102:	9b08      	ldr	r3, [sp, #32]
 8008104:	f1c0 001c 	rsb	r0, r0, #28
 8008108:	4403      	add	r3, r0
 800810a:	4480      	add	r8, r0
 800810c:	4406      	add	r6, r0
 800810e:	9308      	str	r3, [sp, #32]
 8008110:	f1b8 0f00 	cmp.w	r8, #0
 8008114:	dd05      	ble.n	8008122 <_dtoa_r+0x82a>
 8008116:	4649      	mov	r1, r9
 8008118:	4642      	mov	r2, r8
 800811a:	4658      	mov	r0, fp
 800811c:	f000 fd08 	bl	8008b30 <__lshift>
 8008120:	4681      	mov	r9, r0
 8008122:	9b08      	ldr	r3, [sp, #32]
 8008124:	2b00      	cmp	r3, #0
 8008126:	dd05      	ble.n	8008134 <_dtoa_r+0x83c>
 8008128:	4621      	mov	r1, r4
 800812a:	461a      	mov	r2, r3
 800812c:	4658      	mov	r0, fp
 800812e:	f000 fcff 	bl	8008b30 <__lshift>
 8008132:	4604      	mov	r4, r0
 8008134:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008136:	2b00      	cmp	r3, #0
 8008138:	d059      	beq.n	80081ee <_dtoa_r+0x8f6>
 800813a:	4621      	mov	r1, r4
 800813c:	4648      	mov	r0, r9
 800813e:	f000 fd63 	bl	8008c08 <__mcmp>
 8008142:	2800      	cmp	r0, #0
 8008144:	da53      	bge.n	80081ee <_dtoa_r+0x8f6>
 8008146:	1e7b      	subs	r3, r7, #1
 8008148:	9304      	str	r3, [sp, #16]
 800814a:	4649      	mov	r1, r9
 800814c:	2300      	movs	r3, #0
 800814e:	220a      	movs	r2, #10
 8008150:	4658      	mov	r0, fp
 8008152:	f000 faf7 	bl	8008744 <__multadd>
 8008156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008158:	4681      	mov	r9, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 8172 	beq.w	8008444 <_dtoa_r+0xb4c>
 8008160:	2300      	movs	r3, #0
 8008162:	4629      	mov	r1, r5
 8008164:	220a      	movs	r2, #10
 8008166:	4658      	mov	r0, fp
 8008168:	f000 faec 	bl	8008744 <__multadd>
 800816c:	9b00      	ldr	r3, [sp, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	4605      	mov	r5, r0
 8008172:	dc67      	bgt.n	8008244 <_dtoa_r+0x94c>
 8008174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008176:	2b02      	cmp	r3, #2
 8008178:	dc41      	bgt.n	80081fe <_dtoa_r+0x906>
 800817a:	e063      	b.n	8008244 <_dtoa_r+0x94c>
 800817c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800817e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008182:	e746      	b.n	8008012 <_dtoa_r+0x71a>
 8008184:	9b07      	ldr	r3, [sp, #28]
 8008186:	1e5c      	subs	r4, r3, #1
 8008188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800818a:	42a3      	cmp	r3, r4
 800818c:	bfbf      	itttt	lt
 800818e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008190:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008192:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008194:	1ae3      	sublt	r3, r4, r3
 8008196:	bfb4      	ite	lt
 8008198:	18d2      	addlt	r2, r2, r3
 800819a:	1b1c      	subge	r4, r3, r4
 800819c:	9b07      	ldr	r3, [sp, #28]
 800819e:	bfbc      	itt	lt
 80081a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80081a2:	2400      	movlt	r4, #0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	bfb5      	itete	lt
 80081a8:	eba8 0603 	sublt.w	r6, r8, r3
 80081ac:	9b07      	ldrge	r3, [sp, #28]
 80081ae:	2300      	movlt	r3, #0
 80081b0:	4646      	movge	r6, r8
 80081b2:	e730      	b.n	8008016 <_dtoa_r+0x71e>
 80081b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80081b8:	4646      	mov	r6, r8
 80081ba:	e735      	b.n	8008028 <_dtoa_r+0x730>
 80081bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081be:	e75c      	b.n	800807a <_dtoa_r+0x782>
 80081c0:	2300      	movs	r3, #0
 80081c2:	e788      	b.n	80080d6 <_dtoa_r+0x7de>
 80081c4:	3fe00000 	.word	0x3fe00000
 80081c8:	40240000 	.word	0x40240000
 80081cc:	40140000 	.word	0x40140000
 80081d0:	9b02      	ldr	r3, [sp, #8]
 80081d2:	e780      	b.n	80080d6 <_dtoa_r+0x7de>
 80081d4:	2300      	movs	r3, #0
 80081d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80081d8:	e782      	b.n	80080e0 <_dtoa_r+0x7e8>
 80081da:	d099      	beq.n	8008110 <_dtoa_r+0x818>
 80081dc:	9a08      	ldr	r2, [sp, #32]
 80081de:	331c      	adds	r3, #28
 80081e0:	441a      	add	r2, r3
 80081e2:	4498      	add	r8, r3
 80081e4:	441e      	add	r6, r3
 80081e6:	9208      	str	r2, [sp, #32]
 80081e8:	e792      	b.n	8008110 <_dtoa_r+0x818>
 80081ea:	4603      	mov	r3, r0
 80081ec:	e7f6      	b.n	80081dc <_dtoa_r+0x8e4>
 80081ee:	9b07      	ldr	r3, [sp, #28]
 80081f0:	9704      	str	r7, [sp, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	dc20      	bgt.n	8008238 <_dtoa_r+0x940>
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	dd1e      	ble.n	800823c <_dtoa_r+0x944>
 80081fe:	9b00      	ldr	r3, [sp, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	f47f aec0 	bne.w	8007f86 <_dtoa_r+0x68e>
 8008206:	4621      	mov	r1, r4
 8008208:	2205      	movs	r2, #5
 800820a:	4658      	mov	r0, fp
 800820c:	f000 fa9a 	bl	8008744 <__multadd>
 8008210:	4601      	mov	r1, r0
 8008212:	4604      	mov	r4, r0
 8008214:	4648      	mov	r0, r9
 8008216:	f000 fcf7 	bl	8008c08 <__mcmp>
 800821a:	2800      	cmp	r0, #0
 800821c:	f77f aeb3 	ble.w	8007f86 <_dtoa_r+0x68e>
 8008220:	4656      	mov	r6, sl
 8008222:	2331      	movs	r3, #49	@ 0x31
 8008224:	f806 3b01 	strb.w	r3, [r6], #1
 8008228:	9b04      	ldr	r3, [sp, #16]
 800822a:	3301      	adds	r3, #1
 800822c:	9304      	str	r3, [sp, #16]
 800822e:	e6ae      	b.n	8007f8e <_dtoa_r+0x696>
 8008230:	9c07      	ldr	r4, [sp, #28]
 8008232:	9704      	str	r7, [sp, #16]
 8008234:	4625      	mov	r5, r4
 8008236:	e7f3      	b.n	8008220 <_dtoa_r+0x928>
 8008238:	9b07      	ldr	r3, [sp, #28]
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 8104 	beq.w	800844c <_dtoa_r+0xb54>
 8008244:	2e00      	cmp	r6, #0
 8008246:	dd05      	ble.n	8008254 <_dtoa_r+0x95c>
 8008248:	4629      	mov	r1, r5
 800824a:	4632      	mov	r2, r6
 800824c:	4658      	mov	r0, fp
 800824e:	f000 fc6f 	bl	8008b30 <__lshift>
 8008252:	4605      	mov	r5, r0
 8008254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008256:	2b00      	cmp	r3, #0
 8008258:	d05a      	beq.n	8008310 <_dtoa_r+0xa18>
 800825a:	6869      	ldr	r1, [r5, #4]
 800825c:	4658      	mov	r0, fp
 800825e:	f000 fa0f 	bl	8008680 <_Balloc>
 8008262:	4606      	mov	r6, r0
 8008264:	b928      	cbnz	r0, 8008272 <_dtoa_r+0x97a>
 8008266:	4b84      	ldr	r3, [pc, #528]	@ (8008478 <_dtoa_r+0xb80>)
 8008268:	4602      	mov	r2, r0
 800826a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800826e:	f7ff bb5a 	b.w	8007926 <_dtoa_r+0x2e>
 8008272:	692a      	ldr	r2, [r5, #16]
 8008274:	3202      	adds	r2, #2
 8008276:	0092      	lsls	r2, r2, #2
 8008278:	f105 010c 	add.w	r1, r5, #12
 800827c:	300c      	adds	r0, #12
 800827e:	f7ff fa9c 	bl	80077ba <memcpy>
 8008282:	2201      	movs	r2, #1
 8008284:	4631      	mov	r1, r6
 8008286:	4658      	mov	r0, fp
 8008288:	f000 fc52 	bl	8008b30 <__lshift>
 800828c:	f10a 0301 	add.w	r3, sl, #1
 8008290:	9307      	str	r3, [sp, #28]
 8008292:	9b00      	ldr	r3, [sp, #0]
 8008294:	4453      	add	r3, sl
 8008296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008298:	9b02      	ldr	r3, [sp, #8]
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	462f      	mov	r7, r5
 80082a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80082a2:	4605      	mov	r5, r0
 80082a4:	9b07      	ldr	r3, [sp, #28]
 80082a6:	4621      	mov	r1, r4
 80082a8:	3b01      	subs	r3, #1
 80082aa:	4648      	mov	r0, r9
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	f7ff fa99 	bl	80077e4 <quorem>
 80082b2:	4639      	mov	r1, r7
 80082b4:	9002      	str	r0, [sp, #8]
 80082b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082ba:	4648      	mov	r0, r9
 80082bc:	f000 fca4 	bl	8008c08 <__mcmp>
 80082c0:	462a      	mov	r2, r5
 80082c2:	9008      	str	r0, [sp, #32]
 80082c4:	4621      	mov	r1, r4
 80082c6:	4658      	mov	r0, fp
 80082c8:	f000 fcba 	bl	8008c40 <__mdiff>
 80082cc:	68c2      	ldr	r2, [r0, #12]
 80082ce:	4606      	mov	r6, r0
 80082d0:	bb02      	cbnz	r2, 8008314 <_dtoa_r+0xa1c>
 80082d2:	4601      	mov	r1, r0
 80082d4:	4648      	mov	r0, r9
 80082d6:	f000 fc97 	bl	8008c08 <__mcmp>
 80082da:	4602      	mov	r2, r0
 80082dc:	4631      	mov	r1, r6
 80082de:	4658      	mov	r0, fp
 80082e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80082e2:	f000 fa0d 	bl	8008700 <_Bfree>
 80082e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082ea:	9e07      	ldr	r6, [sp, #28]
 80082ec:	ea43 0102 	orr.w	r1, r3, r2
 80082f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082f2:	4319      	orrs	r1, r3
 80082f4:	d110      	bne.n	8008318 <_dtoa_r+0xa20>
 80082f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082fa:	d029      	beq.n	8008350 <_dtoa_r+0xa58>
 80082fc:	9b08      	ldr	r3, [sp, #32]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	dd02      	ble.n	8008308 <_dtoa_r+0xa10>
 8008302:	9b02      	ldr	r3, [sp, #8]
 8008304:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008308:	9b00      	ldr	r3, [sp, #0]
 800830a:	f883 8000 	strb.w	r8, [r3]
 800830e:	e63f      	b.n	8007f90 <_dtoa_r+0x698>
 8008310:	4628      	mov	r0, r5
 8008312:	e7bb      	b.n	800828c <_dtoa_r+0x994>
 8008314:	2201      	movs	r2, #1
 8008316:	e7e1      	b.n	80082dc <_dtoa_r+0x9e4>
 8008318:	9b08      	ldr	r3, [sp, #32]
 800831a:	2b00      	cmp	r3, #0
 800831c:	db04      	blt.n	8008328 <_dtoa_r+0xa30>
 800831e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008320:	430b      	orrs	r3, r1
 8008322:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008324:	430b      	orrs	r3, r1
 8008326:	d120      	bne.n	800836a <_dtoa_r+0xa72>
 8008328:	2a00      	cmp	r2, #0
 800832a:	dded      	ble.n	8008308 <_dtoa_r+0xa10>
 800832c:	4649      	mov	r1, r9
 800832e:	2201      	movs	r2, #1
 8008330:	4658      	mov	r0, fp
 8008332:	f000 fbfd 	bl	8008b30 <__lshift>
 8008336:	4621      	mov	r1, r4
 8008338:	4681      	mov	r9, r0
 800833a:	f000 fc65 	bl	8008c08 <__mcmp>
 800833e:	2800      	cmp	r0, #0
 8008340:	dc03      	bgt.n	800834a <_dtoa_r+0xa52>
 8008342:	d1e1      	bne.n	8008308 <_dtoa_r+0xa10>
 8008344:	f018 0f01 	tst.w	r8, #1
 8008348:	d0de      	beq.n	8008308 <_dtoa_r+0xa10>
 800834a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800834e:	d1d8      	bne.n	8008302 <_dtoa_r+0xa0a>
 8008350:	9a00      	ldr	r2, [sp, #0]
 8008352:	2339      	movs	r3, #57	@ 0x39
 8008354:	7013      	strb	r3, [r2, #0]
 8008356:	4633      	mov	r3, r6
 8008358:	461e      	mov	r6, r3
 800835a:	3b01      	subs	r3, #1
 800835c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008360:	2a39      	cmp	r2, #57	@ 0x39
 8008362:	d052      	beq.n	800840a <_dtoa_r+0xb12>
 8008364:	3201      	adds	r2, #1
 8008366:	701a      	strb	r2, [r3, #0]
 8008368:	e612      	b.n	8007f90 <_dtoa_r+0x698>
 800836a:	2a00      	cmp	r2, #0
 800836c:	dd07      	ble.n	800837e <_dtoa_r+0xa86>
 800836e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008372:	d0ed      	beq.n	8008350 <_dtoa_r+0xa58>
 8008374:	9a00      	ldr	r2, [sp, #0]
 8008376:	f108 0301 	add.w	r3, r8, #1
 800837a:	7013      	strb	r3, [r2, #0]
 800837c:	e608      	b.n	8007f90 <_dtoa_r+0x698>
 800837e:	9b07      	ldr	r3, [sp, #28]
 8008380:	9a07      	ldr	r2, [sp, #28]
 8008382:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008388:	4293      	cmp	r3, r2
 800838a:	d028      	beq.n	80083de <_dtoa_r+0xae6>
 800838c:	4649      	mov	r1, r9
 800838e:	2300      	movs	r3, #0
 8008390:	220a      	movs	r2, #10
 8008392:	4658      	mov	r0, fp
 8008394:	f000 f9d6 	bl	8008744 <__multadd>
 8008398:	42af      	cmp	r7, r5
 800839a:	4681      	mov	r9, r0
 800839c:	f04f 0300 	mov.w	r3, #0
 80083a0:	f04f 020a 	mov.w	r2, #10
 80083a4:	4639      	mov	r1, r7
 80083a6:	4658      	mov	r0, fp
 80083a8:	d107      	bne.n	80083ba <_dtoa_r+0xac2>
 80083aa:	f000 f9cb 	bl	8008744 <__multadd>
 80083ae:	4607      	mov	r7, r0
 80083b0:	4605      	mov	r5, r0
 80083b2:	9b07      	ldr	r3, [sp, #28]
 80083b4:	3301      	adds	r3, #1
 80083b6:	9307      	str	r3, [sp, #28]
 80083b8:	e774      	b.n	80082a4 <_dtoa_r+0x9ac>
 80083ba:	f000 f9c3 	bl	8008744 <__multadd>
 80083be:	4629      	mov	r1, r5
 80083c0:	4607      	mov	r7, r0
 80083c2:	2300      	movs	r3, #0
 80083c4:	220a      	movs	r2, #10
 80083c6:	4658      	mov	r0, fp
 80083c8:	f000 f9bc 	bl	8008744 <__multadd>
 80083cc:	4605      	mov	r5, r0
 80083ce:	e7f0      	b.n	80083b2 <_dtoa_r+0xaba>
 80083d0:	9b00      	ldr	r3, [sp, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	bfcc      	ite	gt
 80083d6:	461e      	movgt	r6, r3
 80083d8:	2601      	movle	r6, #1
 80083da:	4456      	add	r6, sl
 80083dc:	2700      	movs	r7, #0
 80083de:	4649      	mov	r1, r9
 80083e0:	2201      	movs	r2, #1
 80083e2:	4658      	mov	r0, fp
 80083e4:	f000 fba4 	bl	8008b30 <__lshift>
 80083e8:	4621      	mov	r1, r4
 80083ea:	4681      	mov	r9, r0
 80083ec:	f000 fc0c 	bl	8008c08 <__mcmp>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	dcb0      	bgt.n	8008356 <_dtoa_r+0xa5e>
 80083f4:	d102      	bne.n	80083fc <_dtoa_r+0xb04>
 80083f6:	f018 0f01 	tst.w	r8, #1
 80083fa:	d1ac      	bne.n	8008356 <_dtoa_r+0xa5e>
 80083fc:	4633      	mov	r3, r6
 80083fe:	461e      	mov	r6, r3
 8008400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008404:	2a30      	cmp	r2, #48	@ 0x30
 8008406:	d0fa      	beq.n	80083fe <_dtoa_r+0xb06>
 8008408:	e5c2      	b.n	8007f90 <_dtoa_r+0x698>
 800840a:	459a      	cmp	sl, r3
 800840c:	d1a4      	bne.n	8008358 <_dtoa_r+0xa60>
 800840e:	9b04      	ldr	r3, [sp, #16]
 8008410:	3301      	adds	r3, #1
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	2331      	movs	r3, #49	@ 0x31
 8008416:	f88a 3000 	strb.w	r3, [sl]
 800841a:	e5b9      	b.n	8007f90 <_dtoa_r+0x698>
 800841c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800841e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800847c <_dtoa_r+0xb84>
 8008422:	b11b      	cbz	r3, 800842c <_dtoa_r+0xb34>
 8008424:	f10a 0308 	add.w	r3, sl, #8
 8008428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	4650      	mov	r0, sl
 800842e:	b019      	add	sp, #100	@ 0x64
 8008430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008436:	2b01      	cmp	r3, #1
 8008438:	f77f ae37 	ble.w	80080aa <_dtoa_r+0x7b2>
 800843c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800843e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008440:	2001      	movs	r0, #1
 8008442:	e655      	b.n	80080f0 <_dtoa_r+0x7f8>
 8008444:	9b00      	ldr	r3, [sp, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	f77f aed6 	ble.w	80081f8 <_dtoa_r+0x900>
 800844c:	4656      	mov	r6, sl
 800844e:	4621      	mov	r1, r4
 8008450:	4648      	mov	r0, r9
 8008452:	f7ff f9c7 	bl	80077e4 <quorem>
 8008456:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800845a:	f806 8b01 	strb.w	r8, [r6], #1
 800845e:	9b00      	ldr	r3, [sp, #0]
 8008460:	eba6 020a 	sub.w	r2, r6, sl
 8008464:	4293      	cmp	r3, r2
 8008466:	ddb3      	ble.n	80083d0 <_dtoa_r+0xad8>
 8008468:	4649      	mov	r1, r9
 800846a:	2300      	movs	r3, #0
 800846c:	220a      	movs	r2, #10
 800846e:	4658      	mov	r0, fp
 8008470:	f000 f968 	bl	8008744 <__multadd>
 8008474:	4681      	mov	r9, r0
 8008476:	e7ea      	b.n	800844e <_dtoa_r+0xb56>
 8008478:	0800afd1 	.word	0x0800afd1
 800847c:	0800af55 	.word	0x0800af55

08008480 <_free_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4605      	mov	r5, r0
 8008484:	2900      	cmp	r1, #0
 8008486:	d041      	beq.n	800850c <_free_r+0x8c>
 8008488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800848c:	1f0c      	subs	r4, r1, #4
 800848e:	2b00      	cmp	r3, #0
 8008490:	bfb8      	it	lt
 8008492:	18e4      	addlt	r4, r4, r3
 8008494:	f000 f8e8 	bl	8008668 <__malloc_lock>
 8008498:	4a1d      	ldr	r2, [pc, #116]	@ (8008510 <_free_r+0x90>)
 800849a:	6813      	ldr	r3, [r2, #0]
 800849c:	b933      	cbnz	r3, 80084ac <_free_r+0x2c>
 800849e:	6063      	str	r3, [r4, #4]
 80084a0:	6014      	str	r4, [r2, #0]
 80084a2:	4628      	mov	r0, r5
 80084a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084a8:	f000 b8e4 	b.w	8008674 <__malloc_unlock>
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	d908      	bls.n	80084c2 <_free_r+0x42>
 80084b0:	6820      	ldr	r0, [r4, #0]
 80084b2:	1821      	adds	r1, r4, r0
 80084b4:	428b      	cmp	r3, r1
 80084b6:	bf01      	itttt	eq
 80084b8:	6819      	ldreq	r1, [r3, #0]
 80084ba:	685b      	ldreq	r3, [r3, #4]
 80084bc:	1809      	addeq	r1, r1, r0
 80084be:	6021      	streq	r1, [r4, #0]
 80084c0:	e7ed      	b.n	800849e <_free_r+0x1e>
 80084c2:	461a      	mov	r2, r3
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	b10b      	cbz	r3, 80084cc <_free_r+0x4c>
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	d9fa      	bls.n	80084c2 <_free_r+0x42>
 80084cc:	6811      	ldr	r1, [r2, #0]
 80084ce:	1850      	adds	r0, r2, r1
 80084d0:	42a0      	cmp	r0, r4
 80084d2:	d10b      	bne.n	80084ec <_free_r+0x6c>
 80084d4:	6820      	ldr	r0, [r4, #0]
 80084d6:	4401      	add	r1, r0
 80084d8:	1850      	adds	r0, r2, r1
 80084da:	4283      	cmp	r3, r0
 80084dc:	6011      	str	r1, [r2, #0]
 80084de:	d1e0      	bne.n	80084a2 <_free_r+0x22>
 80084e0:	6818      	ldr	r0, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	6053      	str	r3, [r2, #4]
 80084e6:	4408      	add	r0, r1
 80084e8:	6010      	str	r0, [r2, #0]
 80084ea:	e7da      	b.n	80084a2 <_free_r+0x22>
 80084ec:	d902      	bls.n	80084f4 <_free_r+0x74>
 80084ee:	230c      	movs	r3, #12
 80084f0:	602b      	str	r3, [r5, #0]
 80084f2:	e7d6      	b.n	80084a2 <_free_r+0x22>
 80084f4:	6820      	ldr	r0, [r4, #0]
 80084f6:	1821      	adds	r1, r4, r0
 80084f8:	428b      	cmp	r3, r1
 80084fa:	bf04      	itt	eq
 80084fc:	6819      	ldreq	r1, [r3, #0]
 80084fe:	685b      	ldreq	r3, [r3, #4]
 8008500:	6063      	str	r3, [r4, #4]
 8008502:	bf04      	itt	eq
 8008504:	1809      	addeq	r1, r1, r0
 8008506:	6021      	streq	r1, [r4, #0]
 8008508:	6054      	str	r4, [r2, #4]
 800850a:	e7ca      	b.n	80084a2 <_free_r+0x22>
 800850c:	bd38      	pop	{r3, r4, r5, pc}
 800850e:	bf00      	nop
 8008510:	20004df4 	.word	0x20004df4

08008514 <malloc>:
 8008514:	4b02      	ldr	r3, [pc, #8]	@ (8008520 <malloc+0xc>)
 8008516:	4601      	mov	r1, r0
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	f000 b825 	b.w	8008568 <_malloc_r>
 800851e:	bf00      	nop
 8008520:	2000001c 	.word	0x2000001c

08008524 <sbrk_aligned>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	4e0f      	ldr	r6, [pc, #60]	@ (8008564 <sbrk_aligned+0x40>)
 8008528:	460c      	mov	r4, r1
 800852a:	6831      	ldr	r1, [r6, #0]
 800852c:	4605      	mov	r5, r0
 800852e:	b911      	cbnz	r1, 8008536 <sbrk_aligned+0x12>
 8008530:	f001 fe0c 	bl	800a14c <_sbrk_r>
 8008534:	6030      	str	r0, [r6, #0]
 8008536:	4621      	mov	r1, r4
 8008538:	4628      	mov	r0, r5
 800853a:	f001 fe07 	bl	800a14c <_sbrk_r>
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	d103      	bne.n	800854a <sbrk_aligned+0x26>
 8008542:	f04f 34ff 	mov.w	r4, #4294967295
 8008546:	4620      	mov	r0, r4
 8008548:	bd70      	pop	{r4, r5, r6, pc}
 800854a:	1cc4      	adds	r4, r0, #3
 800854c:	f024 0403 	bic.w	r4, r4, #3
 8008550:	42a0      	cmp	r0, r4
 8008552:	d0f8      	beq.n	8008546 <sbrk_aligned+0x22>
 8008554:	1a21      	subs	r1, r4, r0
 8008556:	4628      	mov	r0, r5
 8008558:	f001 fdf8 	bl	800a14c <_sbrk_r>
 800855c:	3001      	adds	r0, #1
 800855e:	d1f2      	bne.n	8008546 <sbrk_aligned+0x22>
 8008560:	e7ef      	b.n	8008542 <sbrk_aligned+0x1e>
 8008562:	bf00      	nop
 8008564:	20004df0 	.word	0x20004df0

08008568 <_malloc_r>:
 8008568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800856c:	1ccd      	adds	r5, r1, #3
 800856e:	f025 0503 	bic.w	r5, r5, #3
 8008572:	3508      	adds	r5, #8
 8008574:	2d0c      	cmp	r5, #12
 8008576:	bf38      	it	cc
 8008578:	250c      	movcc	r5, #12
 800857a:	2d00      	cmp	r5, #0
 800857c:	4606      	mov	r6, r0
 800857e:	db01      	blt.n	8008584 <_malloc_r+0x1c>
 8008580:	42a9      	cmp	r1, r5
 8008582:	d904      	bls.n	800858e <_malloc_r+0x26>
 8008584:	230c      	movs	r3, #12
 8008586:	6033      	str	r3, [r6, #0]
 8008588:	2000      	movs	r0, #0
 800858a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800858e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008664 <_malloc_r+0xfc>
 8008592:	f000 f869 	bl	8008668 <__malloc_lock>
 8008596:	f8d8 3000 	ldr.w	r3, [r8]
 800859a:	461c      	mov	r4, r3
 800859c:	bb44      	cbnz	r4, 80085f0 <_malloc_r+0x88>
 800859e:	4629      	mov	r1, r5
 80085a0:	4630      	mov	r0, r6
 80085a2:	f7ff ffbf 	bl	8008524 <sbrk_aligned>
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	4604      	mov	r4, r0
 80085aa:	d158      	bne.n	800865e <_malloc_r+0xf6>
 80085ac:	f8d8 4000 	ldr.w	r4, [r8]
 80085b0:	4627      	mov	r7, r4
 80085b2:	2f00      	cmp	r7, #0
 80085b4:	d143      	bne.n	800863e <_malloc_r+0xd6>
 80085b6:	2c00      	cmp	r4, #0
 80085b8:	d04b      	beq.n	8008652 <_malloc_r+0xea>
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	4639      	mov	r1, r7
 80085be:	4630      	mov	r0, r6
 80085c0:	eb04 0903 	add.w	r9, r4, r3
 80085c4:	f001 fdc2 	bl	800a14c <_sbrk_r>
 80085c8:	4581      	cmp	r9, r0
 80085ca:	d142      	bne.n	8008652 <_malloc_r+0xea>
 80085cc:	6821      	ldr	r1, [r4, #0]
 80085ce:	1a6d      	subs	r5, r5, r1
 80085d0:	4629      	mov	r1, r5
 80085d2:	4630      	mov	r0, r6
 80085d4:	f7ff ffa6 	bl	8008524 <sbrk_aligned>
 80085d8:	3001      	adds	r0, #1
 80085da:	d03a      	beq.n	8008652 <_malloc_r+0xea>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	442b      	add	r3, r5
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	f8d8 3000 	ldr.w	r3, [r8]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	bb62      	cbnz	r2, 8008644 <_malloc_r+0xdc>
 80085ea:	f8c8 7000 	str.w	r7, [r8]
 80085ee:	e00f      	b.n	8008610 <_malloc_r+0xa8>
 80085f0:	6822      	ldr	r2, [r4, #0]
 80085f2:	1b52      	subs	r2, r2, r5
 80085f4:	d420      	bmi.n	8008638 <_malloc_r+0xd0>
 80085f6:	2a0b      	cmp	r2, #11
 80085f8:	d917      	bls.n	800862a <_malloc_r+0xc2>
 80085fa:	1961      	adds	r1, r4, r5
 80085fc:	42a3      	cmp	r3, r4
 80085fe:	6025      	str	r5, [r4, #0]
 8008600:	bf18      	it	ne
 8008602:	6059      	strne	r1, [r3, #4]
 8008604:	6863      	ldr	r3, [r4, #4]
 8008606:	bf08      	it	eq
 8008608:	f8c8 1000 	streq.w	r1, [r8]
 800860c:	5162      	str	r2, [r4, r5]
 800860e:	604b      	str	r3, [r1, #4]
 8008610:	4630      	mov	r0, r6
 8008612:	f000 f82f 	bl	8008674 <__malloc_unlock>
 8008616:	f104 000b 	add.w	r0, r4, #11
 800861a:	1d23      	adds	r3, r4, #4
 800861c:	f020 0007 	bic.w	r0, r0, #7
 8008620:	1ac2      	subs	r2, r0, r3
 8008622:	bf1c      	itt	ne
 8008624:	1a1b      	subne	r3, r3, r0
 8008626:	50a3      	strne	r3, [r4, r2]
 8008628:	e7af      	b.n	800858a <_malloc_r+0x22>
 800862a:	6862      	ldr	r2, [r4, #4]
 800862c:	42a3      	cmp	r3, r4
 800862e:	bf0c      	ite	eq
 8008630:	f8c8 2000 	streq.w	r2, [r8]
 8008634:	605a      	strne	r2, [r3, #4]
 8008636:	e7eb      	b.n	8008610 <_malloc_r+0xa8>
 8008638:	4623      	mov	r3, r4
 800863a:	6864      	ldr	r4, [r4, #4]
 800863c:	e7ae      	b.n	800859c <_malloc_r+0x34>
 800863e:	463c      	mov	r4, r7
 8008640:	687f      	ldr	r7, [r7, #4]
 8008642:	e7b6      	b.n	80085b2 <_malloc_r+0x4a>
 8008644:	461a      	mov	r2, r3
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	42a3      	cmp	r3, r4
 800864a:	d1fb      	bne.n	8008644 <_malloc_r+0xdc>
 800864c:	2300      	movs	r3, #0
 800864e:	6053      	str	r3, [r2, #4]
 8008650:	e7de      	b.n	8008610 <_malloc_r+0xa8>
 8008652:	230c      	movs	r3, #12
 8008654:	6033      	str	r3, [r6, #0]
 8008656:	4630      	mov	r0, r6
 8008658:	f000 f80c 	bl	8008674 <__malloc_unlock>
 800865c:	e794      	b.n	8008588 <_malloc_r+0x20>
 800865e:	6005      	str	r5, [r0, #0]
 8008660:	e7d6      	b.n	8008610 <_malloc_r+0xa8>
 8008662:	bf00      	nop
 8008664:	20004df4 	.word	0x20004df4

08008668 <__malloc_lock>:
 8008668:	4801      	ldr	r0, [pc, #4]	@ (8008670 <__malloc_lock+0x8>)
 800866a:	f7ff b8a4 	b.w	80077b6 <__retarget_lock_acquire_recursive>
 800866e:	bf00      	nop
 8008670:	20004dec 	.word	0x20004dec

08008674 <__malloc_unlock>:
 8008674:	4801      	ldr	r0, [pc, #4]	@ (800867c <__malloc_unlock+0x8>)
 8008676:	f7ff b89f 	b.w	80077b8 <__retarget_lock_release_recursive>
 800867a:	bf00      	nop
 800867c:	20004dec 	.word	0x20004dec

08008680 <_Balloc>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	69c6      	ldr	r6, [r0, #28]
 8008684:	4604      	mov	r4, r0
 8008686:	460d      	mov	r5, r1
 8008688:	b976      	cbnz	r6, 80086a8 <_Balloc+0x28>
 800868a:	2010      	movs	r0, #16
 800868c:	f7ff ff42 	bl	8008514 <malloc>
 8008690:	4602      	mov	r2, r0
 8008692:	61e0      	str	r0, [r4, #28]
 8008694:	b920      	cbnz	r0, 80086a0 <_Balloc+0x20>
 8008696:	4b18      	ldr	r3, [pc, #96]	@ (80086f8 <_Balloc+0x78>)
 8008698:	4818      	ldr	r0, [pc, #96]	@ (80086fc <_Balloc+0x7c>)
 800869a:	216b      	movs	r1, #107	@ 0x6b
 800869c:	f001 fd70 	bl	800a180 <__assert_func>
 80086a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086a4:	6006      	str	r6, [r0, #0]
 80086a6:	60c6      	str	r6, [r0, #12]
 80086a8:	69e6      	ldr	r6, [r4, #28]
 80086aa:	68f3      	ldr	r3, [r6, #12]
 80086ac:	b183      	cbz	r3, 80086d0 <_Balloc+0x50>
 80086ae:	69e3      	ldr	r3, [r4, #28]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086b6:	b9b8      	cbnz	r0, 80086e8 <_Balloc+0x68>
 80086b8:	2101      	movs	r1, #1
 80086ba:	fa01 f605 	lsl.w	r6, r1, r5
 80086be:	1d72      	adds	r2, r6, #5
 80086c0:	0092      	lsls	r2, r2, #2
 80086c2:	4620      	mov	r0, r4
 80086c4:	f001 fd7a 	bl	800a1bc <_calloc_r>
 80086c8:	b160      	cbz	r0, 80086e4 <_Balloc+0x64>
 80086ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086ce:	e00e      	b.n	80086ee <_Balloc+0x6e>
 80086d0:	2221      	movs	r2, #33	@ 0x21
 80086d2:	2104      	movs	r1, #4
 80086d4:	4620      	mov	r0, r4
 80086d6:	f001 fd71 	bl	800a1bc <_calloc_r>
 80086da:	69e3      	ldr	r3, [r4, #28]
 80086dc:	60f0      	str	r0, [r6, #12]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e4      	bne.n	80086ae <_Balloc+0x2e>
 80086e4:	2000      	movs	r0, #0
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	6802      	ldr	r2, [r0, #0]
 80086ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086ee:	2300      	movs	r3, #0
 80086f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086f4:	e7f7      	b.n	80086e6 <_Balloc+0x66>
 80086f6:	bf00      	nop
 80086f8:	0800af62 	.word	0x0800af62
 80086fc:	0800afe2 	.word	0x0800afe2

08008700 <_Bfree>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	69c6      	ldr	r6, [r0, #28]
 8008704:	4605      	mov	r5, r0
 8008706:	460c      	mov	r4, r1
 8008708:	b976      	cbnz	r6, 8008728 <_Bfree+0x28>
 800870a:	2010      	movs	r0, #16
 800870c:	f7ff ff02 	bl	8008514 <malloc>
 8008710:	4602      	mov	r2, r0
 8008712:	61e8      	str	r0, [r5, #28]
 8008714:	b920      	cbnz	r0, 8008720 <_Bfree+0x20>
 8008716:	4b09      	ldr	r3, [pc, #36]	@ (800873c <_Bfree+0x3c>)
 8008718:	4809      	ldr	r0, [pc, #36]	@ (8008740 <_Bfree+0x40>)
 800871a:	218f      	movs	r1, #143	@ 0x8f
 800871c:	f001 fd30 	bl	800a180 <__assert_func>
 8008720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008724:	6006      	str	r6, [r0, #0]
 8008726:	60c6      	str	r6, [r0, #12]
 8008728:	b13c      	cbz	r4, 800873a <_Bfree+0x3a>
 800872a:	69eb      	ldr	r3, [r5, #28]
 800872c:	6862      	ldr	r2, [r4, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008734:	6021      	str	r1, [r4, #0]
 8008736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	0800af62 	.word	0x0800af62
 8008740:	0800afe2 	.word	0x0800afe2

08008744 <__multadd>:
 8008744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008748:	690d      	ldr	r5, [r1, #16]
 800874a:	4607      	mov	r7, r0
 800874c:	460c      	mov	r4, r1
 800874e:	461e      	mov	r6, r3
 8008750:	f101 0c14 	add.w	ip, r1, #20
 8008754:	2000      	movs	r0, #0
 8008756:	f8dc 3000 	ldr.w	r3, [ip]
 800875a:	b299      	uxth	r1, r3
 800875c:	fb02 6101 	mla	r1, r2, r1, r6
 8008760:	0c1e      	lsrs	r6, r3, #16
 8008762:	0c0b      	lsrs	r3, r1, #16
 8008764:	fb02 3306 	mla	r3, r2, r6, r3
 8008768:	b289      	uxth	r1, r1
 800876a:	3001      	adds	r0, #1
 800876c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008770:	4285      	cmp	r5, r0
 8008772:	f84c 1b04 	str.w	r1, [ip], #4
 8008776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800877a:	dcec      	bgt.n	8008756 <__multadd+0x12>
 800877c:	b30e      	cbz	r6, 80087c2 <__multadd+0x7e>
 800877e:	68a3      	ldr	r3, [r4, #8]
 8008780:	42ab      	cmp	r3, r5
 8008782:	dc19      	bgt.n	80087b8 <__multadd+0x74>
 8008784:	6861      	ldr	r1, [r4, #4]
 8008786:	4638      	mov	r0, r7
 8008788:	3101      	adds	r1, #1
 800878a:	f7ff ff79 	bl	8008680 <_Balloc>
 800878e:	4680      	mov	r8, r0
 8008790:	b928      	cbnz	r0, 800879e <__multadd+0x5a>
 8008792:	4602      	mov	r2, r0
 8008794:	4b0c      	ldr	r3, [pc, #48]	@ (80087c8 <__multadd+0x84>)
 8008796:	480d      	ldr	r0, [pc, #52]	@ (80087cc <__multadd+0x88>)
 8008798:	21ba      	movs	r1, #186	@ 0xba
 800879a:	f001 fcf1 	bl	800a180 <__assert_func>
 800879e:	6922      	ldr	r2, [r4, #16]
 80087a0:	3202      	adds	r2, #2
 80087a2:	f104 010c 	add.w	r1, r4, #12
 80087a6:	0092      	lsls	r2, r2, #2
 80087a8:	300c      	adds	r0, #12
 80087aa:	f7ff f806 	bl	80077ba <memcpy>
 80087ae:	4621      	mov	r1, r4
 80087b0:	4638      	mov	r0, r7
 80087b2:	f7ff ffa5 	bl	8008700 <_Bfree>
 80087b6:	4644      	mov	r4, r8
 80087b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087bc:	3501      	adds	r5, #1
 80087be:	615e      	str	r6, [r3, #20]
 80087c0:	6125      	str	r5, [r4, #16]
 80087c2:	4620      	mov	r0, r4
 80087c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c8:	0800afd1 	.word	0x0800afd1
 80087cc:	0800afe2 	.word	0x0800afe2

080087d0 <__s2b>:
 80087d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d4:	460c      	mov	r4, r1
 80087d6:	4615      	mov	r5, r2
 80087d8:	461f      	mov	r7, r3
 80087da:	2209      	movs	r2, #9
 80087dc:	3308      	adds	r3, #8
 80087de:	4606      	mov	r6, r0
 80087e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80087e4:	2100      	movs	r1, #0
 80087e6:	2201      	movs	r2, #1
 80087e8:	429a      	cmp	r2, r3
 80087ea:	db09      	blt.n	8008800 <__s2b+0x30>
 80087ec:	4630      	mov	r0, r6
 80087ee:	f7ff ff47 	bl	8008680 <_Balloc>
 80087f2:	b940      	cbnz	r0, 8008806 <__s2b+0x36>
 80087f4:	4602      	mov	r2, r0
 80087f6:	4b19      	ldr	r3, [pc, #100]	@ (800885c <__s2b+0x8c>)
 80087f8:	4819      	ldr	r0, [pc, #100]	@ (8008860 <__s2b+0x90>)
 80087fa:	21d3      	movs	r1, #211	@ 0xd3
 80087fc:	f001 fcc0 	bl	800a180 <__assert_func>
 8008800:	0052      	lsls	r2, r2, #1
 8008802:	3101      	adds	r1, #1
 8008804:	e7f0      	b.n	80087e8 <__s2b+0x18>
 8008806:	9b08      	ldr	r3, [sp, #32]
 8008808:	6143      	str	r3, [r0, #20]
 800880a:	2d09      	cmp	r5, #9
 800880c:	f04f 0301 	mov.w	r3, #1
 8008810:	6103      	str	r3, [r0, #16]
 8008812:	dd16      	ble.n	8008842 <__s2b+0x72>
 8008814:	f104 0909 	add.w	r9, r4, #9
 8008818:	46c8      	mov	r8, r9
 800881a:	442c      	add	r4, r5
 800881c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008820:	4601      	mov	r1, r0
 8008822:	3b30      	subs	r3, #48	@ 0x30
 8008824:	220a      	movs	r2, #10
 8008826:	4630      	mov	r0, r6
 8008828:	f7ff ff8c 	bl	8008744 <__multadd>
 800882c:	45a0      	cmp	r8, r4
 800882e:	d1f5      	bne.n	800881c <__s2b+0x4c>
 8008830:	f1a5 0408 	sub.w	r4, r5, #8
 8008834:	444c      	add	r4, r9
 8008836:	1b2d      	subs	r5, r5, r4
 8008838:	1963      	adds	r3, r4, r5
 800883a:	42bb      	cmp	r3, r7
 800883c:	db04      	blt.n	8008848 <__s2b+0x78>
 800883e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008842:	340a      	adds	r4, #10
 8008844:	2509      	movs	r5, #9
 8008846:	e7f6      	b.n	8008836 <__s2b+0x66>
 8008848:	f814 3b01 	ldrb.w	r3, [r4], #1
 800884c:	4601      	mov	r1, r0
 800884e:	3b30      	subs	r3, #48	@ 0x30
 8008850:	220a      	movs	r2, #10
 8008852:	4630      	mov	r0, r6
 8008854:	f7ff ff76 	bl	8008744 <__multadd>
 8008858:	e7ee      	b.n	8008838 <__s2b+0x68>
 800885a:	bf00      	nop
 800885c:	0800afd1 	.word	0x0800afd1
 8008860:	0800afe2 	.word	0x0800afe2

08008864 <__hi0bits>:
 8008864:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008868:	4603      	mov	r3, r0
 800886a:	bf36      	itet	cc
 800886c:	0403      	lslcc	r3, r0, #16
 800886e:	2000      	movcs	r0, #0
 8008870:	2010      	movcc	r0, #16
 8008872:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008876:	bf3c      	itt	cc
 8008878:	021b      	lslcc	r3, r3, #8
 800887a:	3008      	addcc	r0, #8
 800887c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008880:	bf3c      	itt	cc
 8008882:	011b      	lslcc	r3, r3, #4
 8008884:	3004      	addcc	r0, #4
 8008886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800888a:	bf3c      	itt	cc
 800888c:	009b      	lslcc	r3, r3, #2
 800888e:	3002      	addcc	r0, #2
 8008890:	2b00      	cmp	r3, #0
 8008892:	db05      	blt.n	80088a0 <__hi0bits+0x3c>
 8008894:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008898:	f100 0001 	add.w	r0, r0, #1
 800889c:	bf08      	it	eq
 800889e:	2020      	moveq	r0, #32
 80088a0:	4770      	bx	lr

080088a2 <__lo0bits>:
 80088a2:	6803      	ldr	r3, [r0, #0]
 80088a4:	4602      	mov	r2, r0
 80088a6:	f013 0007 	ands.w	r0, r3, #7
 80088aa:	d00b      	beq.n	80088c4 <__lo0bits+0x22>
 80088ac:	07d9      	lsls	r1, r3, #31
 80088ae:	d421      	bmi.n	80088f4 <__lo0bits+0x52>
 80088b0:	0798      	lsls	r0, r3, #30
 80088b2:	bf49      	itett	mi
 80088b4:	085b      	lsrmi	r3, r3, #1
 80088b6:	089b      	lsrpl	r3, r3, #2
 80088b8:	2001      	movmi	r0, #1
 80088ba:	6013      	strmi	r3, [r2, #0]
 80088bc:	bf5c      	itt	pl
 80088be:	6013      	strpl	r3, [r2, #0]
 80088c0:	2002      	movpl	r0, #2
 80088c2:	4770      	bx	lr
 80088c4:	b299      	uxth	r1, r3
 80088c6:	b909      	cbnz	r1, 80088cc <__lo0bits+0x2a>
 80088c8:	0c1b      	lsrs	r3, r3, #16
 80088ca:	2010      	movs	r0, #16
 80088cc:	b2d9      	uxtb	r1, r3
 80088ce:	b909      	cbnz	r1, 80088d4 <__lo0bits+0x32>
 80088d0:	3008      	adds	r0, #8
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	0719      	lsls	r1, r3, #28
 80088d6:	bf04      	itt	eq
 80088d8:	091b      	lsreq	r3, r3, #4
 80088da:	3004      	addeq	r0, #4
 80088dc:	0799      	lsls	r1, r3, #30
 80088de:	bf04      	itt	eq
 80088e0:	089b      	lsreq	r3, r3, #2
 80088e2:	3002      	addeq	r0, #2
 80088e4:	07d9      	lsls	r1, r3, #31
 80088e6:	d403      	bmi.n	80088f0 <__lo0bits+0x4e>
 80088e8:	085b      	lsrs	r3, r3, #1
 80088ea:	f100 0001 	add.w	r0, r0, #1
 80088ee:	d003      	beq.n	80088f8 <__lo0bits+0x56>
 80088f0:	6013      	str	r3, [r2, #0]
 80088f2:	4770      	bx	lr
 80088f4:	2000      	movs	r0, #0
 80088f6:	4770      	bx	lr
 80088f8:	2020      	movs	r0, #32
 80088fa:	4770      	bx	lr

080088fc <__i2b>:
 80088fc:	b510      	push	{r4, lr}
 80088fe:	460c      	mov	r4, r1
 8008900:	2101      	movs	r1, #1
 8008902:	f7ff febd 	bl	8008680 <_Balloc>
 8008906:	4602      	mov	r2, r0
 8008908:	b928      	cbnz	r0, 8008916 <__i2b+0x1a>
 800890a:	4b05      	ldr	r3, [pc, #20]	@ (8008920 <__i2b+0x24>)
 800890c:	4805      	ldr	r0, [pc, #20]	@ (8008924 <__i2b+0x28>)
 800890e:	f240 1145 	movw	r1, #325	@ 0x145
 8008912:	f001 fc35 	bl	800a180 <__assert_func>
 8008916:	2301      	movs	r3, #1
 8008918:	6144      	str	r4, [r0, #20]
 800891a:	6103      	str	r3, [r0, #16]
 800891c:	bd10      	pop	{r4, pc}
 800891e:	bf00      	nop
 8008920:	0800afd1 	.word	0x0800afd1
 8008924:	0800afe2 	.word	0x0800afe2

08008928 <__multiply>:
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	4614      	mov	r4, r2
 800892e:	690a      	ldr	r2, [r1, #16]
 8008930:	6923      	ldr	r3, [r4, #16]
 8008932:	429a      	cmp	r2, r3
 8008934:	bfa8      	it	ge
 8008936:	4623      	movge	r3, r4
 8008938:	460f      	mov	r7, r1
 800893a:	bfa4      	itt	ge
 800893c:	460c      	movge	r4, r1
 800893e:	461f      	movge	r7, r3
 8008940:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008944:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008948:	68a3      	ldr	r3, [r4, #8]
 800894a:	6861      	ldr	r1, [r4, #4]
 800894c:	eb0a 0609 	add.w	r6, sl, r9
 8008950:	42b3      	cmp	r3, r6
 8008952:	b085      	sub	sp, #20
 8008954:	bfb8      	it	lt
 8008956:	3101      	addlt	r1, #1
 8008958:	f7ff fe92 	bl	8008680 <_Balloc>
 800895c:	b930      	cbnz	r0, 800896c <__multiply+0x44>
 800895e:	4602      	mov	r2, r0
 8008960:	4b44      	ldr	r3, [pc, #272]	@ (8008a74 <__multiply+0x14c>)
 8008962:	4845      	ldr	r0, [pc, #276]	@ (8008a78 <__multiply+0x150>)
 8008964:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008968:	f001 fc0a 	bl	800a180 <__assert_func>
 800896c:	f100 0514 	add.w	r5, r0, #20
 8008970:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008974:	462b      	mov	r3, r5
 8008976:	2200      	movs	r2, #0
 8008978:	4543      	cmp	r3, r8
 800897a:	d321      	bcc.n	80089c0 <__multiply+0x98>
 800897c:	f107 0114 	add.w	r1, r7, #20
 8008980:	f104 0214 	add.w	r2, r4, #20
 8008984:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008988:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800898c:	9302      	str	r3, [sp, #8]
 800898e:	1b13      	subs	r3, r2, r4
 8008990:	3b15      	subs	r3, #21
 8008992:	f023 0303 	bic.w	r3, r3, #3
 8008996:	3304      	adds	r3, #4
 8008998:	f104 0715 	add.w	r7, r4, #21
 800899c:	42ba      	cmp	r2, r7
 800899e:	bf38      	it	cc
 80089a0:	2304      	movcc	r3, #4
 80089a2:	9301      	str	r3, [sp, #4]
 80089a4:	9b02      	ldr	r3, [sp, #8]
 80089a6:	9103      	str	r1, [sp, #12]
 80089a8:	428b      	cmp	r3, r1
 80089aa:	d80c      	bhi.n	80089c6 <__multiply+0x9e>
 80089ac:	2e00      	cmp	r6, #0
 80089ae:	dd03      	ble.n	80089b8 <__multiply+0x90>
 80089b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d05b      	beq.n	8008a70 <__multiply+0x148>
 80089b8:	6106      	str	r6, [r0, #16]
 80089ba:	b005      	add	sp, #20
 80089bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c0:	f843 2b04 	str.w	r2, [r3], #4
 80089c4:	e7d8      	b.n	8008978 <__multiply+0x50>
 80089c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80089ca:	f1ba 0f00 	cmp.w	sl, #0
 80089ce:	d024      	beq.n	8008a1a <__multiply+0xf2>
 80089d0:	f104 0e14 	add.w	lr, r4, #20
 80089d4:	46a9      	mov	r9, r5
 80089d6:	f04f 0c00 	mov.w	ip, #0
 80089da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089de:	f8d9 3000 	ldr.w	r3, [r9]
 80089e2:	fa1f fb87 	uxth.w	fp, r7
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80089ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80089f0:	f8d9 7000 	ldr.w	r7, [r9]
 80089f4:	4463      	add	r3, ip
 80089f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80089fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80089fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a08:	4572      	cmp	r2, lr
 8008a0a:	f849 3b04 	str.w	r3, [r9], #4
 8008a0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008a12:	d8e2      	bhi.n	80089da <__multiply+0xb2>
 8008a14:	9b01      	ldr	r3, [sp, #4]
 8008a16:	f845 c003 	str.w	ip, [r5, r3]
 8008a1a:	9b03      	ldr	r3, [sp, #12]
 8008a1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008a20:	3104      	adds	r1, #4
 8008a22:	f1b9 0f00 	cmp.w	r9, #0
 8008a26:	d021      	beq.n	8008a6c <__multiply+0x144>
 8008a28:	682b      	ldr	r3, [r5, #0]
 8008a2a:	f104 0c14 	add.w	ip, r4, #20
 8008a2e:	46ae      	mov	lr, r5
 8008a30:	f04f 0a00 	mov.w	sl, #0
 8008a34:	f8bc b000 	ldrh.w	fp, [ip]
 8008a38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008a3c:	fb09 770b 	mla	r7, r9, fp, r7
 8008a40:	4457      	add	r7, sl
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a48:	f84e 3b04 	str.w	r3, [lr], #4
 8008a4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a54:	f8be 3000 	ldrh.w	r3, [lr]
 8008a58:	fb09 330a 	mla	r3, r9, sl, r3
 8008a5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008a60:	4562      	cmp	r2, ip
 8008a62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a66:	d8e5      	bhi.n	8008a34 <__multiply+0x10c>
 8008a68:	9f01      	ldr	r7, [sp, #4]
 8008a6a:	51eb      	str	r3, [r5, r7]
 8008a6c:	3504      	adds	r5, #4
 8008a6e:	e799      	b.n	80089a4 <__multiply+0x7c>
 8008a70:	3e01      	subs	r6, #1
 8008a72:	e79b      	b.n	80089ac <__multiply+0x84>
 8008a74:	0800afd1 	.word	0x0800afd1
 8008a78:	0800afe2 	.word	0x0800afe2

08008a7c <__pow5mult>:
 8008a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a80:	4615      	mov	r5, r2
 8008a82:	f012 0203 	ands.w	r2, r2, #3
 8008a86:	4607      	mov	r7, r0
 8008a88:	460e      	mov	r6, r1
 8008a8a:	d007      	beq.n	8008a9c <__pow5mult+0x20>
 8008a8c:	4c25      	ldr	r4, [pc, #148]	@ (8008b24 <__pow5mult+0xa8>)
 8008a8e:	3a01      	subs	r2, #1
 8008a90:	2300      	movs	r3, #0
 8008a92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a96:	f7ff fe55 	bl	8008744 <__multadd>
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	10ad      	asrs	r5, r5, #2
 8008a9e:	d03d      	beq.n	8008b1c <__pow5mult+0xa0>
 8008aa0:	69fc      	ldr	r4, [r7, #28]
 8008aa2:	b97c      	cbnz	r4, 8008ac4 <__pow5mult+0x48>
 8008aa4:	2010      	movs	r0, #16
 8008aa6:	f7ff fd35 	bl	8008514 <malloc>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	61f8      	str	r0, [r7, #28]
 8008aae:	b928      	cbnz	r0, 8008abc <__pow5mult+0x40>
 8008ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b28 <__pow5mult+0xac>)
 8008ab2:	481e      	ldr	r0, [pc, #120]	@ (8008b2c <__pow5mult+0xb0>)
 8008ab4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ab8:	f001 fb62 	bl	800a180 <__assert_func>
 8008abc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ac0:	6004      	str	r4, [r0, #0]
 8008ac2:	60c4      	str	r4, [r0, #12]
 8008ac4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ac8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008acc:	b94c      	cbnz	r4, 8008ae2 <__pow5mult+0x66>
 8008ace:	f240 2171 	movw	r1, #625	@ 0x271
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	f7ff ff12 	bl	80088fc <__i2b>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ade:	4604      	mov	r4, r0
 8008ae0:	6003      	str	r3, [r0, #0]
 8008ae2:	f04f 0900 	mov.w	r9, #0
 8008ae6:	07eb      	lsls	r3, r5, #31
 8008ae8:	d50a      	bpl.n	8008b00 <__pow5mult+0x84>
 8008aea:	4631      	mov	r1, r6
 8008aec:	4622      	mov	r2, r4
 8008aee:	4638      	mov	r0, r7
 8008af0:	f7ff ff1a 	bl	8008928 <__multiply>
 8008af4:	4631      	mov	r1, r6
 8008af6:	4680      	mov	r8, r0
 8008af8:	4638      	mov	r0, r7
 8008afa:	f7ff fe01 	bl	8008700 <_Bfree>
 8008afe:	4646      	mov	r6, r8
 8008b00:	106d      	asrs	r5, r5, #1
 8008b02:	d00b      	beq.n	8008b1c <__pow5mult+0xa0>
 8008b04:	6820      	ldr	r0, [r4, #0]
 8008b06:	b938      	cbnz	r0, 8008b18 <__pow5mult+0x9c>
 8008b08:	4622      	mov	r2, r4
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f7ff ff0b 	bl	8008928 <__multiply>
 8008b12:	6020      	str	r0, [r4, #0]
 8008b14:	f8c0 9000 	str.w	r9, [r0]
 8008b18:	4604      	mov	r4, r0
 8008b1a:	e7e4      	b.n	8008ae6 <__pow5mult+0x6a>
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b22:	bf00      	nop
 8008b24:	0800b03c 	.word	0x0800b03c
 8008b28:	0800af62 	.word	0x0800af62
 8008b2c:	0800afe2 	.word	0x0800afe2

08008b30 <__lshift>:
 8008b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b34:	460c      	mov	r4, r1
 8008b36:	6849      	ldr	r1, [r1, #4]
 8008b38:	6923      	ldr	r3, [r4, #16]
 8008b3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b3e:	68a3      	ldr	r3, [r4, #8]
 8008b40:	4607      	mov	r7, r0
 8008b42:	4691      	mov	r9, r2
 8008b44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b48:	f108 0601 	add.w	r6, r8, #1
 8008b4c:	42b3      	cmp	r3, r6
 8008b4e:	db0b      	blt.n	8008b68 <__lshift+0x38>
 8008b50:	4638      	mov	r0, r7
 8008b52:	f7ff fd95 	bl	8008680 <_Balloc>
 8008b56:	4605      	mov	r5, r0
 8008b58:	b948      	cbnz	r0, 8008b6e <__lshift+0x3e>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	4b28      	ldr	r3, [pc, #160]	@ (8008c00 <__lshift+0xd0>)
 8008b5e:	4829      	ldr	r0, [pc, #164]	@ (8008c04 <__lshift+0xd4>)
 8008b60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008b64:	f001 fb0c 	bl	800a180 <__assert_func>
 8008b68:	3101      	adds	r1, #1
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	e7ee      	b.n	8008b4c <__lshift+0x1c>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f100 0114 	add.w	r1, r0, #20
 8008b74:	f100 0210 	add.w	r2, r0, #16
 8008b78:	4618      	mov	r0, r3
 8008b7a:	4553      	cmp	r3, sl
 8008b7c:	db33      	blt.n	8008be6 <__lshift+0xb6>
 8008b7e:	6920      	ldr	r0, [r4, #16]
 8008b80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b84:	f104 0314 	add.w	r3, r4, #20
 8008b88:	f019 091f 	ands.w	r9, r9, #31
 8008b8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b94:	d02b      	beq.n	8008bee <__lshift+0xbe>
 8008b96:	f1c9 0e20 	rsb	lr, r9, #32
 8008b9a:	468a      	mov	sl, r1
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	6818      	ldr	r0, [r3, #0]
 8008ba0:	fa00 f009 	lsl.w	r0, r0, r9
 8008ba4:	4310      	orrs	r0, r2
 8008ba6:	f84a 0b04 	str.w	r0, [sl], #4
 8008baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bae:	459c      	cmp	ip, r3
 8008bb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008bb4:	d8f3      	bhi.n	8008b9e <__lshift+0x6e>
 8008bb6:	ebac 0304 	sub.w	r3, ip, r4
 8008bba:	3b15      	subs	r3, #21
 8008bbc:	f023 0303 	bic.w	r3, r3, #3
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	f104 0015 	add.w	r0, r4, #21
 8008bc6:	4584      	cmp	ip, r0
 8008bc8:	bf38      	it	cc
 8008bca:	2304      	movcc	r3, #4
 8008bcc:	50ca      	str	r2, [r1, r3]
 8008bce:	b10a      	cbz	r2, 8008bd4 <__lshift+0xa4>
 8008bd0:	f108 0602 	add.w	r6, r8, #2
 8008bd4:	3e01      	subs	r6, #1
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	612e      	str	r6, [r5, #16]
 8008bda:	4621      	mov	r1, r4
 8008bdc:	f7ff fd90 	bl	8008700 <_Bfree>
 8008be0:	4628      	mov	r0, r5
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bea:	3301      	adds	r3, #1
 8008bec:	e7c5      	b.n	8008b7a <__lshift+0x4a>
 8008bee:	3904      	subs	r1, #4
 8008bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bf4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bf8:	459c      	cmp	ip, r3
 8008bfa:	d8f9      	bhi.n	8008bf0 <__lshift+0xc0>
 8008bfc:	e7ea      	b.n	8008bd4 <__lshift+0xa4>
 8008bfe:	bf00      	nop
 8008c00:	0800afd1 	.word	0x0800afd1
 8008c04:	0800afe2 	.word	0x0800afe2

08008c08 <__mcmp>:
 8008c08:	690a      	ldr	r2, [r1, #16]
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	6900      	ldr	r0, [r0, #16]
 8008c0e:	1a80      	subs	r0, r0, r2
 8008c10:	b530      	push	{r4, r5, lr}
 8008c12:	d10e      	bne.n	8008c32 <__mcmp+0x2a>
 8008c14:	3314      	adds	r3, #20
 8008c16:	3114      	adds	r1, #20
 8008c18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c28:	4295      	cmp	r5, r2
 8008c2a:	d003      	beq.n	8008c34 <__mcmp+0x2c>
 8008c2c:	d205      	bcs.n	8008c3a <__mcmp+0x32>
 8008c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c32:	bd30      	pop	{r4, r5, pc}
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	d3f3      	bcc.n	8008c20 <__mcmp+0x18>
 8008c38:	e7fb      	b.n	8008c32 <__mcmp+0x2a>
 8008c3a:	2001      	movs	r0, #1
 8008c3c:	e7f9      	b.n	8008c32 <__mcmp+0x2a>
	...

08008c40 <__mdiff>:
 8008c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c44:	4689      	mov	r9, r1
 8008c46:	4606      	mov	r6, r0
 8008c48:	4611      	mov	r1, r2
 8008c4a:	4648      	mov	r0, r9
 8008c4c:	4614      	mov	r4, r2
 8008c4e:	f7ff ffdb 	bl	8008c08 <__mcmp>
 8008c52:	1e05      	subs	r5, r0, #0
 8008c54:	d112      	bne.n	8008c7c <__mdiff+0x3c>
 8008c56:	4629      	mov	r1, r5
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f7ff fd11 	bl	8008680 <_Balloc>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	b928      	cbnz	r0, 8008c6e <__mdiff+0x2e>
 8008c62:	4b3f      	ldr	r3, [pc, #252]	@ (8008d60 <__mdiff+0x120>)
 8008c64:	f240 2137 	movw	r1, #567	@ 0x237
 8008c68:	483e      	ldr	r0, [pc, #248]	@ (8008d64 <__mdiff+0x124>)
 8008c6a:	f001 fa89 	bl	800a180 <__assert_func>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c74:	4610      	mov	r0, r2
 8008c76:	b003      	add	sp, #12
 8008c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7c:	bfbc      	itt	lt
 8008c7e:	464b      	movlt	r3, r9
 8008c80:	46a1      	movlt	r9, r4
 8008c82:	4630      	mov	r0, r6
 8008c84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c88:	bfba      	itte	lt
 8008c8a:	461c      	movlt	r4, r3
 8008c8c:	2501      	movlt	r5, #1
 8008c8e:	2500      	movge	r5, #0
 8008c90:	f7ff fcf6 	bl	8008680 <_Balloc>
 8008c94:	4602      	mov	r2, r0
 8008c96:	b918      	cbnz	r0, 8008ca0 <__mdiff+0x60>
 8008c98:	4b31      	ldr	r3, [pc, #196]	@ (8008d60 <__mdiff+0x120>)
 8008c9a:	f240 2145 	movw	r1, #581	@ 0x245
 8008c9e:	e7e3      	b.n	8008c68 <__mdiff+0x28>
 8008ca0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ca4:	6926      	ldr	r6, [r4, #16]
 8008ca6:	60c5      	str	r5, [r0, #12]
 8008ca8:	f109 0310 	add.w	r3, r9, #16
 8008cac:	f109 0514 	add.w	r5, r9, #20
 8008cb0:	f104 0e14 	add.w	lr, r4, #20
 8008cb4:	f100 0b14 	add.w	fp, r0, #20
 8008cb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008cbc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	46d9      	mov	r9, fp
 8008cc4:	f04f 0c00 	mov.w	ip, #0
 8008cc8:	9b01      	ldr	r3, [sp, #4]
 8008cca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008cce:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	fa1f f38a 	uxth.w	r3, sl
 8008cd8:	4619      	mov	r1, r3
 8008cda:	b283      	uxth	r3, r0
 8008cdc:	1acb      	subs	r3, r1, r3
 8008cde:	0c00      	lsrs	r0, r0, #16
 8008ce0:	4463      	add	r3, ip
 8008ce2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ce6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008cf0:	4576      	cmp	r6, lr
 8008cf2:	f849 3b04 	str.w	r3, [r9], #4
 8008cf6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008cfa:	d8e5      	bhi.n	8008cc8 <__mdiff+0x88>
 8008cfc:	1b33      	subs	r3, r6, r4
 8008cfe:	3b15      	subs	r3, #21
 8008d00:	f023 0303 	bic.w	r3, r3, #3
 8008d04:	3415      	adds	r4, #21
 8008d06:	3304      	adds	r3, #4
 8008d08:	42a6      	cmp	r6, r4
 8008d0a:	bf38      	it	cc
 8008d0c:	2304      	movcc	r3, #4
 8008d0e:	441d      	add	r5, r3
 8008d10:	445b      	add	r3, fp
 8008d12:	461e      	mov	r6, r3
 8008d14:	462c      	mov	r4, r5
 8008d16:	4544      	cmp	r4, r8
 8008d18:	d30e      	bcc.n	8008d38 <__mdiff+0xf8>
 8008d1a:	f108 0103 	add.w	r1, r8, #3
 8008d1e:	1b49      	subs	r1, r1, r5
 8008d20:	f021 0103 	bic.w	r1, r1, #3
 8008d24:	3d03      	subs	r5, #3
 8008d26:	45a8      	cmp	r8, r5
 8008d28:	bf38      	it	cc
 8008d2a:	2100      	movcc	r1, #0
 8008d2c:	440b      	add	r3, r1
 8008d2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d32:	b191      	cbz	r1, 8008d5a <__mdiff+0x11a>
 8008d34:	6117      	str	r7, [r2, #16]
 8008d36:	e79d      	b.n	8008c74 <__mdiff+0x34>
 8008d38:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d3c:	46e6      	mov	lr, ip
 8008d3e:	0c08      	lsrs	r0, r1, #16
 8008d40:	fa1c fc81 	uxtah	ip, ip, r1
 8008d44:	4471      	add	r1, lr
 8008d46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d4a:	b289      	uxth	r1, r1
 8008d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d50:	f846 1b04 	str.w	r1, [r6], #4
 8008d54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d58:	e7dd      	b.n	8008d16 <__mdiff+0xd6>
 8008d5a:	3f01      	subs	r7, #1
 8008d5c:	e7e7      	b.n	8008d2e <__mdiff+0xee>
 8008d5e:	bf00      	nop
 8008d60:	0800afd1 	.word	0x0800afd1
 8008d64:	0800afe2 	.word	0x0800afe2

08008d68 <__ulp>:
 8008d68:	b082      	sub	sp, #8
 8008d6a:	ed8d 0b00 	vstr	d0, [sp]
 8008d6e:	9a01      	ldr	r2, [sp, #4]
 8008d70:	4b0f      	ldr	r3, [pc, #60]	@ (8008db0 <__ulp+0x48>)
 8008d72:	4013      	ands	r3, r2
 8008d74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	dc08      	bgt.n	8008d8e <__ulp+0x26>
 8008d7c:	425b      	negs	r3, r3
 8008d7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008d82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008d86:	da04      	bge.n	8008d92 <__ulp+0x2a>
 8008d88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008d8c:	4113      	asrs	r3, r2
 8008d8e:	2200      	movs	r2, #0
 8008d90:	e008      	b.n	8008da4 <__ulp+0x3c>
 8008d92:	f1a2 0314 	sub.w	r3, r2, #20
 8008d96:	2b1e      	cmp	r3, #30
 8008d98:	bfda      	itte	le
 8008d9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008d9e:	40da      	lsrle	r2, r3
 8008da0:	2201      	movgt	r2, #1
 8008da2:	2300      	movs	r3, #0
 8008da4:	4619      	mov	r1, r3
 8008da6:	4610      	mov	r0, r2
 8008da8:	ec41 0b10 	vmov	d0, r0, r1
 8008dac:	b002      	add	sp, #8
 8008dae:	4770      	bx	lr
 8008db0:	7ff00000 	.word	0x7ff00000

08008db4 <__b2d>:
 8008db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db8:	6906      	ldr	r6, [r0, #16]
 8008dba:	f100 0814 	add.w	r8, r0, #20
 8008dbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008dc2:	1f37      	subs	r7, r6, #4
 8008dc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008dc8:	4610      	mov	r0, r2
 8008dca:	f7ff fd4b 	bl	8008864 <__hi0bits>
 8008dce:	f1c0 0320 	rsb	r3, r0, #32
 8008dd2:	280a      	cmp	r0, #10
 8008dd4:	600b      	str	r3, [r1, #0]
 8008dd6:	491b      	ldr	r1, [pc, #108]	@ (8008e44 <__b2d+0x90>)
 8008dd8:	dc15      	bgt.n	8008e06 <__b2d+0x52>
 8008dda:	f1c0 0c0b 	rsb	ip, r0, #11
 8008dde:	fa22 f30c 	lsr.w	r3, r2, ip
 8008de2:	45b8      	cmp	r8, r7
 8008de4:	ea43 0501 	orr.w	r5, r3, r1
 8008de8:	bf34      	ite	cc
 8008dea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008dee:	2300      	movcs	r3, #0
 8008df0:	3015      	adds	r0, #21
 8008df2:	fa02 f000 	lsl.w	r0, r2, r0
 8008df6:	fa23 f30c 	lsr.w	r3, r3, ip
 8008dfa:	4303      	orrs	r3, r0
 8008dfc:	461c      	mov	r4, r3
 8008dfe:	ec45 4b10 	vmov	d0, r4, r5
 8008e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e06:	45b8      	cmp	r8, r7
 8008e08:	bf3a      	itte	cc
 8008e0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e0e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008e12:	2300      	movcs	r3, #0
 8008e14:	380b      	subs	r0, #11
 8008e16:	d012      	beq.n	8008e3e <__b2d+0x8a>
 8008e18:	f1c0 0120 	rsb	r1, r0, #32
 8008e1c:	fa23 f401 	lsr.w	r4, r3, r1
 8008e20:	4082      	lsls	r2, r0
 8008e22:	4322      	orrs	r2, r4
 8008e24:	4547      	cmp	r7, r8
 8008e26:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008e2a:	bf8c      	ite	hi
 8008e2c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008e30:	2200      	movls	r2, #0
 8008e32:	4083      	lsls	r3, r0
 8008e34:	40ca      	lsrs	r2, r1
 8008e36:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	e7de      	b.n	8008dfc <__b2d+0x48>
 8008e3e:	ea42 0501 	orr.w	r5, r2, r1
 8008e42:	e7db      	b.n	8008dfc <__b2d+0x48>
 8008e44:	3ff00000 	.word	0x3ff00000

08008e48 <__d2b>:
 8008e48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	2101      	movs	r1, #1
 8008e50:	ec59 8b10 	vmov	r8, r9, d0
 8008e54:	4616      	mov	r6, r2
 8008e56:	f7ff fc13 	bl	8008680 <_Balloc>
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	b930      	cbnz	r0, 8008e6c <__d2b+0x24>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	4b23      	ldr	r3, [pc, #140]	@ (8008ef0 <__d2b+0xa8>)
 8008e62:	4824      	ldr	r0, [pc, #144]	@ (8008ef4 <__d2b+0xac>)
 8008e64:	f240 310f 	movw	r1, #783	@ 0x30f
 8008e68:	f001 f98a 	bl	800a180 <__assert_func>
 8008e6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e74:	b10d      	cbz	r5, 8008e7a <__d2b+0x32>
 8008e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e7a:	9301      	str	r3, [sp, #4]
 8008e7c:	f1b8 0300 	subs.w	r3, r8, #0
 8008e80:	d023      	beq.n	8008eca <__d2b+0x82>
 8008e82:	4668      	mov	r0, sp
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	f7ff fd0c 	bl	80088a2 <__lo0bits>
 8008e8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e8e:	b1d0      	cbz	r0, 8008ec6 <__d2b+0x7e>
 8008e90:	f1c0 0320 	rsb	r3, r0, #32
 8008e94:	fa02 f303 	lsl.w	r3, r2, r3
 8008e98:	430b      	orrs	r3, r1
 8008e9a:	40c2      	lsrs	r2, r0
 8008e9c:	6163      	str	r3, [r4, #20]
 8008e9e:	9201      	str	r2, [sp, #4]
 8008ea0:	9b01      	ldr	r3, [sp, #4]
 8008ea2:	61a3      	str	r3, [r4, #24]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	bf0c      	ite	eq
 8008ea8:	2201      	moveq	r2, #1
 8008eaa:	2202      	movne	r2, #2
 8008eac:	6122      	str	r2, [r4, #16]
 8008eae:	b1a5      	cbz	r5, 8008eda <__d2b+0x92>
 8008eb0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008eb4:	4405      	add	r5, r0
 8008eb6:	603d      	str	r5, [r7, #0]
 8008eb8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ebc:	6030      	str	r0, [r6, #0]
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	b003      	add	sp, #12
 8008ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ec6:	6161      	str	r1, [r4, #20]
 8008ec8:	e7ea      	b.n	8008ea0 <__d2b+0x58>
 8008eca:	a801      	add	r0, sp, #4
 8008ecc:	f7ff fce9 	bl	80088a2 <__lo0bits>
 8008ed0:	9b01      	ldr	r3, [sp, #4]
 8008ed2:	6163      	str	r3, [r4, #20]
 8008ed4:	3020      	adds	r0, #32
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	e7e8      	b.n	8008eac <__d2b+0x64>
 8008eda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ede:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ee2:	6038      	str	r0, [r7, #0]
 8008ee4:	6918      	ldr	r0, [r3, #16]
 8008ee6:	f7ff fcbd 	bl	8008864 <__hi0bits>
 8008eea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008eee:	e7e5      	b.n	8008ebc <__d2b+0x74>
 8008ef0:	0800afd1 	.word	0x0800afd1
 8008ef4:	0800afe2 	.word	0x0800afe2

08008ef8 <__ratio>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	b085      	sub	sp, #20
 8008efe:	e9cd 1000 	strd	r1, r0, [sp]
 8008f02:	a902      	add	r1, sp, #8
 8008f04:	f7ff ff56 	bl	8008db4 <__b2d>
 8008f08:	9800      	ldr	r0, [sp, #0]
 8008f0a:	a903      	add	r1, sp, #12
 8008f0c:	ec55 4b10 	vmov	r4, r5, d0
 8008f10:	f7ff ff50 	bl	8008db4 <__b2d>
 8008f14:	9b01      	ldr	r3, [sp, #4]
 8008f16:	6919      	ldr	r1, [r3, #16]
 8008f18:	9b00      	ldr	r3, [sp, #0]
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	1ac9      	subs	r1, r1, r3
 8008f1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008f22:	1a9b      	subs	r3, r3, r2
 8008f24:	ec5b ab10 	vmov	sl, fp, d0
 8008f28:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	bfce      	itee	gt
 8008f30:	462a      	movgt	r2, r5
 8008f32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f36:	465a      	movle	r2, fp
 8008f38:	462f      	mov	r7, r5
 8008f3a:	46d9      	mov	r9, fp
 8008f3c:	bfcc      	ite	gt
 8008f3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f42:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008f46:	464b      	mov	r3, r9
 8008f48:	4652      	mov	r2, sl
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	f7f7 fc85 	bl	800085c <__aeabi_ddiv>
 8008f52:	ec41 0b10 	vmov	d0, r0, r1
 8008f56:	b005      	add	sp, #20
 8008f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f5c <__copybits>:
 8008f5c:	3901      	subs	r1, #1
 8008f5e:	b570      	push	{r4, r5, r6, lr}
 8008f60:	1149      	asrs	r1, r1, #5
 8008f62:	6914      	ldr	r4, [r2, #16]
 8008f64:	3101      	adds	r1, #1
 8008f66:	f102 0314 	add.w	r3, r2, #20
 8008f6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f72:	1f05      	subs	r5, r0, #4
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	d30c      	bcc.n	8008f92 <__copybits+0x36>
 8008f78:	1aa3      	subs	r3, r4, r2
 8008f7a:	3b11      	subs	r3, #17
 8008f7c:	f023 0303 	bic.w	r3, r3, #3
 8008f80:	3211      	adds	r2, #17
 8008f82:	42a2      	cmp	r2, r4
 8008f84:	bf88      	it	hi
 8008f86:	2300      	movhi	r3, #0
 8008f88:	4418      	add	r0, r3
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	4288      	cmp	r0, r1
 8008f8e:	d305      	bcc.n	8008f9c <__copybits+0x40>
 8008f90:	bd70      	pop	{r4, r5, r6, pc}
 8008f92:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f96:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f9a:	e7eb      	b.n	8008f74 <__copybits+0x18>
 8008f9c:	f840 3b04 	str.w	r3, [r0], #4
 8008fa0:	e7f4      	b.n	8008f8c <__copybits+0x30>

08008fa2 <__any_on>:
 8008fa2:	f100 0214 	add.w	r2, r0, #20
 8008fa6:	6900      	ldr	r0, [r0, #16]
 8008fa8:	114b      	asrs	r3, r1, #5
 8008faa:	4298      	cmp	r0, r3
 8008fac:	b510      	push	{r4, lr}
 8008fae:	db11      	blt.n	8008fd4 <__any_on+0x32>
 8008fb0:	dd0a      	ble.n	8008fc8 <__any_on+0x26>
 8008fb2:	f011 011f 	ands.w	r1, r1, #31
 8008fb6:	d007      	beq.n	8008fc8 <__any_on+0x26>
 8008fb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008fbc:	fa24 f001 	lsr.w	r0, r4, r1
 8008fc0:	fa00 f101 	lsl.w	r1, r0, r1
 8008fc4:	428c      	cmp	r4, r1
 8008fc6:	d10b      	bne.n	8008fe0 <__any_on+0x3e>
 8008fc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d803      	bhi.n	8008fd8 <__any_on+0x36>
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	bd10      	pop	{r4, pc}
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	e7f7      	b.n	8008fc8 <__any_on+0x26>
 8008fd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	d0f5      	beq.n	8008fcc <__any_on+0x2a>
 8008fe0:	2001      	movs	r0, #1
 8008fe2:	e7f6      	b.n	8008fd2 <__any_on+0x30>

08008fe4 <sulp>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	460d      	mov	r5, r1
 8008fea:	ec45 4b10 	vmov	d0, r4, r5
 8008fee:	4616      	mov	r6, r2
 8008ff0:	f7ff feba 	bl	8008d68 <__ulp>
 8008ff4:	ec51 0b10 	vmov	r0, r1, d0
 8008ff8:	b17e      	cbz	r6, 800901a <sulp+0x36>
 8008ffa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ffe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009002:	2b00      	cmp	r3, #0
 8009004:	dd09      	ble.n	800901a <sulp+0x36>
 8009006:	051b      	lsls	r3, r3, #20
 8009008:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800900c:	2400      	movs	r4, #0
 800900e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009012:	4622      	mov	r2, r4
 8009014:	462b      	mov	r3, r5
 8009016:	f7f7 faf7 	bl	8000608 <__aeabi_dmul>
 800901a:	ec41 0b10 	vmov	d0, r0, r1
 800901e:	bd70      	pop	{r4, r5, r6, pc}

08009020 <_strtod_l>:
 8009020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	b09f      	sub	sp, #124	@ 0x7c
 8009026:	460c      	mov	r4, r1
 8009028:	9217      	str	r2, [sp, #92]	@ 0x5c
 800902a:	2200      	movs	r2, #0
 800902c:	921a      	str	r2, [sp, #104]	@ 0x68
 800902e:	9005      	str	r0, [sp, #20]
 8009030:	f04f 0a00 	mov.w	sl, #0
 8009034:	f04f 0b00 	mov.w	fp, #0
 8009038:	460a      	mov	r2, r1
 800903a:	9219      	str	r2, [sp, #100]	@ 0x64
 800903c:	7811      	ldrb	r1, [r2, #0]
 800903e:	292b      	cmp	r1, #43	@ 0x2b
 8009040:	d04a      	beq.n	80090d8 <_strtod_l+0xb8>
 8009042:	d838      	bhi.n	80090b6 <_strtod_l+0x96>
 8009044:	290d      	cmp	r1, #13
 8009046:	d832      	bhi.n	80090ae <_strtod_l+0x8e>
 8009048:	2908      	cmp	r1, #8
 800904a:	d832      	bhi.n	80090b2 <_strtod_l+0x92>
 800904c:	2900      	cmp	r1, #0
 800904e:	d03b      	beq.n	80090c8 <_strtod_l+0xa8>
 8009050:	2200      	movs	r2, #0
 8009052:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009054:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009056:	782a      	ldrb	r2, [r5, #0]
 8009058:	2a30      	cmp	r2, #48	@ 0x30
 800905a:	f040 80b3 	bne.w	80091c4 <_strtod_l+0x1a4>
 800905e:	786a      	ldrb	r2, [r5, #1]
 8009060:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009064:	2a58      	cmp	r2, #88	@ 0x58
 8009066:	d16e      	bne.n	8009146 <_strtod_l+0x126>
 8009068:	9302      	str	r3, [sp, #8]
 800906a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800906c:	9301      	str	r3, [sp, #4]
 800906e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	4a8e      	ldr	r2, [pc, #568]	@ (80092ac <_strtod_l+0x28c>)
 8009074:	9805      	ldr	r0, [sp, #20]
 8009076:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009078:	a919      	add	r1, sp, #100	@ 0x64
 800907a:	f001 f91b 	bl	800a2b4 <__gethex>
 800907e:	f010 060f 	ands.w	r6, r0, #15
 8009082:	4604      	mov	r4, r0
 8009084:	d005      	beq.n	8009092 <_strtod_l+0x72>
 8009086:	2e06      	cmp	r6, #6
 8009088:	d128      	bne.n	80090dc <_strtod_l+0xbc>
 800908a:	3501      	adds	r5, #1
 800908c:	2300      	movs	r3, #0
 800908e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009090:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009092:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009094:	2b00      	cmp	r3, #0
 8009096:	f040 858e 	bne.w	8009bb6 <_strtod_l+0xb96>
 800909a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800909c:	b1cb      	cbz	r3, 80090d2 <_strtod_l+0xb2>
 800909e:	4652      	mov	r2, sl
 80090a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80090a4:	ec43 2b10 	vmov	d0, r2, r3
 80090a8:	b01f      	add	sp, #124	@ 0x7c
 80090aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ae:	2920      	cmp	r1, #32
 80090b0:	d1ce      	bne.n	8009050 <_strtod_l+0x30>
 80090b2:	3201      	adds	r2, #1
 80090b4:	e7c1      	b.n	800903a <_strtod_l+0x1a>
 80090b6:	292d      	cmp	r1, #45	@ 0x2d
 80090b8:	d1ca      	bne.n	8009050 <_strtod_l+0x30>
 80090ba:	2101      	movs	r1, #1
 80090bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80090be:	1c51      	adds	r1, r2, #1
 80090c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80090c2:	7852      	ldrb	r2, [r2, #1]
 80090c4:	2a00      	cmp	r2, #0
 80090c6:	d1c5      	bne.n	8009054 <_strtod_l+0x34>
 80090c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f040 8570 	bne.w	8009bb2 <_strtod_l+0xb92>
 80090d2:	4652      	mov	r2, sl
 80090d4:	465b      	mov	r3, fp
 80090d6:	e7e5      	b.n	80090a4 <_strtod_l+0x84>
 80090d8:	2100      	movs	r1, #0
 80090da:	e7ef      	b.n	80090bc <_strtod_l+0x9c>
 80090dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80090de:	b13a      	cbz	r2, 80090f0 <_strtod_l+0xd0>
 80090e0:	2135      	movs	r1, #53	@ 0x35
 80090e2:	a81c      	add	r0, sp, #112	@ 0x70
 80090e4:	f7ff ff3a 	bl	8008f5c <__copybits>
 80090e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090ea:	9805      	ldr	r0, [sp, #20]
 80090ec:	f7ff fb08 	bl	8008700 <_Bfree>
 80090f0:	3e01      	subs	r6, #1
 80090f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80090f4:	2e04      	cmp	r6, #4
 80090f6:	d806      	bhi.n	8009106 <_strtod_l+0xe6>
 80090f8:	e8df f006 	tbb	[pc, r6]
 80090fc:	201d0314 	.word	0x201d0314
 8009100:	14          	.byte	0x14
 8009101:	00          	.byte	0x00
 8009102:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009106:	05e1      	lsls	r1, r4, #23
 8009108:	bf48      	it	mi
 800910a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800910e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009112:	0d1b      	lsrs	r3, r3, #20
 8009114:	051b      	lsls	r3, r3, #20
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1bb      	bne.n	8009092 <_strtod_l+0x72>
 800911a:	f7fe fb21 	bl	8007760 <__errno>
 800911e:	2322      	movs	r3, #34	@ 0x22
 8009120:	6003      	str	r3, [r0, #0]
 8009122:	e7b6      	b.n	8009092 <_strtod_l+0x72>
 8009124:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009128:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800912c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009130:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009134:	e7e7      	b.n	8009106 <_strtod_l+0xe6>
 8009136:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80092b4 <_strtod_l+0x294>
 800913a:	e7e4      	b.n	8009106 <_strtod_l+0xe6>
 800913c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009140:	f04f 3aff 	mov.w	sl, #4294967295
 8009144:	e7df      	b.n	8009106 <_strtod_l+0xe6>
 8009146:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	9219      	str	r2, [sp, #100]	@ 0x64
 800914c:	785b      	ldrb	r3, [r3, #1]
 800914e:	2b30      	cmp	r3, #48	@ 0x30
 8009150:	d0f9      	beq.n	8009146 <_strtod_l+0x126>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d09d      	beq.n	8009092 <_strtod_l+0x72>
 8009156:	2301      	movs	r3, #1
 8009158:	9309      	str	r3, [sp, #36]	@ 0x24
 800915a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800915c:	930c      	str	r3, [sp, #48]	@ 0x30
 800915e:	2300      	movs	r3, #0
 8009160:	9308      	str	r3, [sp, #32]
 8009162:	930a      	str	r3, [sp, #40]	@ 0x28
 8009164:	461f      	mov	r7, r3
 8009166:	220a      	movs	r2, #10
 8009168:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800916a:	7805      	ldrb	r5, [r0, #0]
 800916c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009170:	b2d9      	uxtb	r1, r3
 8009172:	2909      	cmp	r1, #9
 8009174:	d928      	bls.n	80091c8 <_strtod_l+0x1a8>
 8009176:	494e      	ldr	r1, [pc, #312]	@ (80092b0 <_strtod_l+0x290>)
 8009178:	2201      	movs	r2, #1
 800917a:	f000 ffd5 	bl	800a128 <strncmp>
 800917e:	2800      	cmp	r0, #0
 8009180:	d032      	beq.n	80091e8 <_strtod_l+0x1c8>
 8009182:	2000      	movs	r0, #0
 8009184:	462a      	mov	r2, r5
 8009186:	4681      	mov	r9, r0
 8009188:	463d      	mov	r5, r7
 800918a:	4603      	mov	r3, r0
 800918c:	2a65      	cmp	r2, #101	@ 0x65
 800918e:	d001      	beq.n	8009194 <_strtod_l+0x174>
 8009190:	2a45      	cmp	r2, #69	@ 0x45
 8009192:	d114      	bne.n	80091be <_strtod_l+0x19e>
 8009194:	b91d      	cbnz	r5, 800919e <_strtod_l+0x17e>
 8009196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009198:	4302      	orrs	r2, r0
 800919a:	d095      	beq.n	80090c8 <_strtod_l+0xa8>
 800919c:	2500      	movs	r5, #0
 800919e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80091a0:	1c62      	adds	r2, r4, #1
 80091a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80091a4:	7862      	ldrb	r2, [r4, #1]
 80091a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80091a8:	d077      	beq.n	800929a <_strtod_l+0x27a>
 80091aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80091ac:	d07b      	beq.n	80092a6 <_strtod_l+0x286>
 80091ae:	f04f 0c00 	mov.w	ip, #0
 80091b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80091b6:	2909      	cmp	r1, #9
 80091b8:	f240 8082 	bls.w	80092c0 <_strtod_l+0x2a0>
 80091bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80091be:	f04f 0800 	mov.w	r8, #0
 80091c2:	e0a2      	b.n	800930a <_strtod_l+0x2ea>
 80091c4:	2300      	movs	r3, #0
 80091c6:	e7c7      	b.n	8009158 <_strtod_l+0x138>
 80091c8:	2f08      	cmp	r7, #8
 80091ca:	bfd5      	itete	le
 80091cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80091ce:	9908      	ldrgt	r1, [sp, #32]
 80091d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80091d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80091d8:	f100 0001 	add.w	r0, r0, #1
 80091dc:	bfd4      	ite	le
 80091de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80091e0:	9308      	strgt	r3, [sp, #32]
 80091e2:	3701      	adds	r7, #1
 80091e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80091e6:	e7bf      	b.n	8009168 <_strtod_l+0x148>
 80091e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80091ee:	785a      	ldrb	r2, [r3, #1]
 80091f0:	b37f      	cbz	r7, 8009252 <_strtod_l+0x232>
 80091f2:	4681      	mov	r9, r0
 80091f4:	463d      	mov	r5, r7
 80091f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80091fa:	2b09      	cmp	r3, #9
 80091fc:	d912      	bls.n	8009224 <_strtod_l+0x204>
 80091fe:	2301      	movs	r3, #1
 8009200:	e7c4      	b.n	800918c <_strtod_l+0x16c>
 8009202:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009204:	1c5a      	adds	r2, r3, #1
 8009206:	9219      	str	r2, [sp, #100]	@ 0x64
 8009208:	785a      	ldrb	r2, [r3, #1]
 800920a:	3001      	adds	r0, #1
 800920c:	2a30      	cmp	r2, #48	@ 0x30
 800920e:	d0f8      	beq.n	8009202 <_strtod_l+0x1e2>
 8009210:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009214:	2b08      	cmp	r3, #8
 8009216:	f200 84d3 	bhi.w	8009bc0 <_strtod_l+0xba0>
 800921a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800921c:	930c      	str	r3, [sp, #48]	@ 0x30
 800921e:	4681      	mov	r9, r0
 8009220:	2000      	movs	r0, #0
 8009222:	4605      	mov	r5, r0
 8009224:	3a30      	subs	r2, #48	@ 0x30
 8009226:	f100 0301 	add.w	r3, r0, #1
 800922a:	d02a      	beq.n	8009282 <_strtod_l+0x262>
 800922c:	4499      	add	r9, r3
 800922e:	eb00 0c05 	add.w	ip, r0, r5
 8009232:	462b      	mov	r3, r5
 8009234:	210a      	movs	r1, #10
 8009236:	4563      	cmp	r3, ip
 8009238:	d10d      	bne.n	8009256 <_strtod_l+0x236>
 800923a:	1c69      	adds	r1, r5, #1
 800923c:	4401      	add	r1, r0
 800923e:	4428      	add	r0, r5
 8009240:	2808      	cmp	r0, #8
 8009242:	dc16      	bgt.n	8009272 <_strtod_l+0x252>
 8009244:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009246:	230a      	movs	r3, #10
 8009248:	fb03 2300 	mla	r3, r3, r0, r2
 800924c:	930a      	str	r3, [sp, #40]	@ 0x28
 800924e:	2300      	movs	r3, #0
 8009250:	e018      	b.n	8009284 <_strtod_l+0x264>
 8009252:	4638      	mov	r0, r7
 8009254:	e7da      	b.n	800920c <_strtod_l+0x1ec>
 8009256:	2b08      	cmp	r3, #8
 8009258:	f103 0301 	add.w	r3, r3, #1
 800925c:	dc03      	bgt.n	8009266 <_strtod_l+0x246>
 800925e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009260:	434e      	muls	r6, r1
 8009262:	960a      	str	r6, [sp, #40]	@ 0x28
 8009264:	e7e7      	b.n	8009236 <_strtod_l+0x216>
 8009266:	2b10      	cmp	r3, #16
 8009268:	bfde      	ittt	le
 800926a:	9e08      	ldrle	r6, [sp, #32]
 800926c:	434e      	mulle	r6, r1
 800926e:	9608      	strle	r6, [sp, #32]
 8009270:	e7e1      	b.n	8009236 <_strtod_l+0x216>
 8009272:	280f      	cmp	r0, #15
 8009274:	dceb      	bgt.n	800924e <_strtod_l+0x22e>
 8009276:	9808      	ldr	r0, [sp, #32]
 8009278:	230a      	movs	r3, #10
 800927a:	fb03 2300 	mla	r3, r3, r0, r2
 800927e:	9308      	str	r3, [sp, #32]
 8009280:	e7e5      	b.n	800924e <_strtod_l+0x22e>
 8009282:	4629      	mov	r1, r5
 8009284:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009286:	1c50      	adds	r0, r2, #1
 8009288:	9019      	str	r0, [sp, #100]	@ 0x64
 800928a:	7852      	ldrb	r2, [r2, #1]
 800928c:	4618      	mov	r0, r3
 800928e:	460d      	mov	r5, r1
 8009290:	e7b1      	b.n	80091f6 <_strtod_l+0x1d6>
 8009292:	f04f 0900 	mov.w	r9, #0
 8009296:	2301      	movs	r3, #1
 8009298:	e77d      	b.n	8009196 <_strtod_l+0x176>
 800929a:	f04f 0c00 	mov.w	ip, #0
 800929e:	1ca2      	adds	r2, r4, #2
 80092a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80092a2:	78a2      	ldrb	r2, [r4, #2]
 80092a4:	e785      	b.n	80091b2 <_strtod_l+0x192>
 80092a6:	f04f 0c01 	mov.w	ip, #1
 80092aa:	e7f8      	b.n	800929e <_strtod_l+0x27e>
 80092ac:	0800b150 	.word	0x0800b150
 80092b0:	0800b138 	.word	0x0800b138
 80092b4:	7ff00000 	.word	0x7ff00000
 80092b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092ba:	1c51      	adds	r1, r2, #1
 80092bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80092be:	7852      	ldrb	r2, [r2, #1]
 80092c0:	2a30      	cmp	r2, #48	@ 0x30
 80092c2:	d0f9      	beq.n	80092b8 <_strtod_l+0x298>
 80092c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80092c8:	2908      	cmp	r1, #8
 80092ca:	f63f af78 	bhi.w	80091be <_strtod_l+0x19e>
 80092ce:	3a30      	subs	r2, #48	@ 0x30
 80092d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80092d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80092d6:	f04f 080a 	mov.w	r8, #10
 80092da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092dc:	1c56      	adds	r6, r2, #1
 80092de:	9619      	str	r6, [sp, #100]	@ 0x64
 80092e0:	7852      	ldrb	r2, [r2, #1]
 80092e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80092e6:	f1be 0f09 	cmp.w	lr, #9
 80092ea:	d939      	bls.n	8009360 <_strtod_l+0x340>
 80092ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80092ee:	1a76      	subs	r6, r6, r1
 80092f0:	2e08      	cmp	r6, #8
 80092f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80092f6:	dc03      	bgt.n	8009300 <_strtod_l+0x2e0>
 80092f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80092fa:	4588      	cmp	r8, r1
 80092fc:	bfa8      	it	ge
 80092fe:	4688      	movge	r8, r1
 8009300:	f1bc 0f00 	cmp.w	ip, #0
 8009304:	d001      	beq.n	800930a <_strtod_l+0x2ea>
 8009306:	f1c8 0800 	rsb	r8, r8, #0
 800930a:	2d00      	cmp	r5, #0
 800930c:	d14e      	bne.n	80093ac <_strtod_l+0x38c>
 800930e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009310:	4308      	orrs	r0, r1
 8009312:	f47f aebe 	bne.w	8009092 <_strtod_l+0x72>
 8009316:	2b00      	cmp	r3, #0
 8009318:	f47f aed6 	bne.w	80090c8 <_strtod_l+0xa8>
 800931c:	2a69      	cmp	r2, #105	@ 0x69
 800931e:	d028      	beq.n	8009372 <_strtod_l+0x352>
 8009320:	dc25      	bgt.n	800936e <_strtod_l+0x34e>
 8009322:	2a49      	cmp	r2, #73	@ 0x49
 8009324:	d025      	beq.n	8009372 <_strtod_l+0x352>
 8009326:	2a4e      	cmp	r2, #78	@ 0x4e
 8009328:	f47f aece 	bne.w	80090c8 <_strtod_l+0xa8>
 800932c:	499b      	ldr	r1, [pc, #620]	@ (800959c <_strtod_l+0x57c>)
 800932e:	a819      	add	r0, sp, #100	@ 0x64
 8009330:	f001 f9e2 	bl	800a6f8 <__match>
 8009334:	2800      	cmp	r0, #0
 8009336:	f43f aec7 	beq.w	80090c8 <_strtod_l+0xa8>
 800933a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b28      	cmp	r3, #40	@ 0x28
 8009340:	d12e      	bne.n	80093a0 <_strtod_l+0x380>
 8009342:	4997      	ldr	r1, [pc, #604]	@ (80095a0 <_strtod_l+0x580>)
 8009344:	aa1c      	add	r2, sp, #112	@ 0x70
 8009346:	a819      	add	r0, sp, #100	@ 0x64
 8009348:	f001 f9ea 	bl	800a720 <__hexnan>
 800934c:	2805      	cmp	r0, #5
 800934e:	d127      	bne.n	80093a0 <_strtod_l+0x380>
 8009350:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009352:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009356:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800935a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800935e:	e698      	b.n	8009092 <_strtod_l+0x72>
 8009360:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009362:	fb08 2101 	mla	r1, r8, r1, r2
 8009366:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800936a:	920e      	str	r2, [sp, #56]	@ 0x38
 800936c:	e7b5      	b.n	80092da <_strtod_l+0x2ba>
 800936e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009370:	e7da      	b.n	8009328 <_strtod_l+0x308>
 8009372:	498c      	ldr	r1, [pc, #560]	@ (80095a4 <_strtod_l+0x584>)
 8009374:	a819      	add	r0, sp, #100	@ 0x64
 8009376:	f001 f9bf 	bl	800a6f8 <__match>
 800937a:	2800      	cmp	r0, #0
 800937c:	f43f aea4 	beq.w	80090c8 <_strtod_l+0xa8>
 8009380:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009382:	4989      	ldr	r1, [pc, #548]	@ (80095a8 <_strtod_l+0x588>)
 8009384:	3b01      	subs	r3, #1
 8009386:	a819      	add	r0, sp, #100	@ 0x64
 8009388:	9319      	str	r3, [sp, #100]	@ 0x64
 800938a:	f001 f9b5 	bl	800a6f8 <__match>
 800938e:	b910      	cbnz	r0, 8009396 <_strtod_l+0x376>
 8009390:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009392:	3301      	adds	r3, #1
 8009394:	9319      	str	r3, [sp, #100]	@ 0x64
 8009396:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80095b8 <_strtod_l+0x598>
 800939a:	f04f 0a00 	mov.w	sl, #0
 800939e:	e678      	b.n	8009092 <_strtod_l+0x72>
 80093a0:	4882      	ldr	r0, [pc, #520]	@ (80095ac <_strtod_l+0x58c>)
 80093a2:	f000 fee5 	bl	800a170 <nan>
 80093a6:	ec5b ab10 	vmov	sl, fp, d0
 80093aa:	e672      	b.n	8009092 <_strtod_l+0x72>
 80093ac:	eba8 0309 	sub.w	r3, r8, r9
 80093b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093b4:	2f00      	cmp	r7, #0
 80093b6:	bf08      	it	eq
 80093b8:	462f      	moveq	r7, r5
 80093ba:	2d10      	cmp	r5, #16
 80093bc:	462c      	mov	r4, r5
 80093be:	bfa8      	it	ge
 80093c0:	2410      	movge	r4, #16
 80093c2:	f7f7 f8a7 	bl	8000514 <__aeabi_ui2d>
 80093c6:	2d09      	cmp	r5, #9
 80093c8:	4682      	mov	sl, r0
 80093ca:	468b      	mov	fp, r1
 80093cc:	dc13      	bgt.n	80093f6 <_strtod_l+0x3d6>
 80093ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f43f ae5e 	beq.w	8009092 <_strtod_l+0x72>
 80093d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d8:	dd78      	ble.n	80094cc <_strtod_l+0x4ac>
 80093da:	2b16      	cmp	r3, #22
 80093dc:	dc5f      	bgt.n	800949e <_strtod_l+0x47e>
 80093de:	4974      	ldr	r1, [pc, #464]	@ (80095b0 <_strtod_l+0x590>)
 80093e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093e8:	4652      	mov	r2, sl
 80093ea:	465b      	mov	r3, fp
 80093ec:	f7f7 f90c 	bl	8000608 <__aeabi_dmul>
 80093f0:	4682      	mov	sl, r0
 80093f2:	468b      	mov	fp, r1
 80093f4:	e64d      	b.n	8009092 <_strtod_l+0x72>
 80093f6:	4b6e      	ldr	r3, [pc, #440]	@ (80095b0 <_strtod_l+0x590>)
 80093f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009400:	f7f7 f902 	bl	8000608 <__aeabi_dmul>
 8009404:	4682      	mov	sl, r0
 8009406:	9808      	ldr	r0, [sp, #32]
 8009408:	468b      	mov	fp, r1
 800940a:	f7f7 f883 	bl	8000514 <__aeabi_ui2d>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4650      	mov	r0, sl
 8009414:	4659      	mov	r1, fp
 8009416:	f7f6 ff41 	bl	800029c <__adddf3>
 800941a:	2d0f      	cmp	r5, #15
 800941c:	4682      	mov	sl, r0
 800941e:	468b      	mov	fp, r1
 8009420:	ddd5      	ble.n	80093ce <_strtod_l+0x3ae>
 8009422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009424:	1b2c      	subs	r4, r5, r4
 8009426:	441c      	add	r4, r3
 8009428:	2c00      	cmp	r4, #0
 800942a:	f340 8096 	ble.w	800955a <_strtod_l+0x53a>
 800942e:	f014 030f 	ands.w	r3, r4, #15
 8009432:	d00a      	beq.n	800944a <_strtod_l+0x42a>
 8009434:	495e      	ldr	r1, [pc, #376]	@ (80095b0 <_strtod_l+0x590>)
 8009436:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800943a:	4652      	mov	r2, sl
 800943c:	465b      	mov	r3, fp
 800943e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009442:	f7f7 f8e1 	bl	8000608 <__aeabi_dmul>
 8009446:	4682      	mov	sl, r0
 8009448:	468b      	mov	fp, r1
 800944a:	f034 040f 	bics.w	r4, r4, #15
 800944e:	d073      	beq.n	8009538 <_strtod_l+0x518>
 8009450:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009454:	dd48      	ble.n	80094e8 <_strtod_l+0x4c8>
 8009456:	2400      	movs	r4, #0
 8009458:	46a0      	mov	r8, r4
 800945a:	940a      	str	r4, [sp, #40]	@ 0x28
 800945c:	46a1      	mov	r9, r4
 800945e:	9a05      	ldr	r2, [sp, #20]
 8009460:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80095b8 <_strtod_l+0x598>
 8009464:	2322      	movs	r3, #34	@ 0x22
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	f04f 0a00 	mov.w	sl, #0
 800946c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800946e:	2b00      	cmp	r3, #0
 8009470:	f43f ae0f 	beq.w	8009092 <_strtod_l+0x72>
 8009474:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009476:	9805      	ldr	r0, [sp, #20]
 8009478:	f7ff f942 	bl	8008700 <_Bfree>
 800947c:	9805      	ldr	r0, [sp, #20]
 800947e:	4649      	mov	r1, r9
 8009480:	f7ff f93e 	bl	8008700 <_Bfree>
 8009484:	9805      	ldr	r0, [sp, #20]
 8009486:	4641      	mov	r1, r8
 8009488:	f7ff f93a 	bl	8008700 <_Bfree>
 800948c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800948e:	9805      	ldr	r0, [sp, #20]
 8009490:	f7ff f936 	bl	8008700 <_Bfree>
 8009494:	9805      	ldr	r0, [sp, #20]
 8009496:	4621      	mov	r1, r4
 8009498:	f7ff f932 	bl	8008700 <_Bfree>
 800949c:	e5f9      	b.n	8009092 <_strtod_l+0x72>
 800949e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80094a4:	4293      	cmp	r3, r2
 80094a6:	dbbc      	blt.n	8009422 <_strtod_l+0x402>
 80094a8:	4c41      	ldr	r4, [pc, #260]	@ (80095b0 <_strtod_l+0x590>)
 80094aa:	f1c5 050f 	rsb	r5, r5, #15
 80094ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80094b2:	4652      	mov	r2, sl
 80094b4:	465b      	mov	r3, fp
 80094b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ba:	f7f7 f8a5 	bl	8000608 <__aeabi_dmul>
 80094be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094c0:	1b5d      	subs	r5, r3, r5
 80094c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80094c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80094ca:	e78f      	b.n	80093ec <_strtod_l+0x3cc>
 80094cc:	3316      	adds	r3, #22
 80094ce:	dba8      	blt.n	8009422 <_strtod_l+0x402>
 80094d0:	4b37      	ldr	r3, [pc, #220]	@ (80095b0 <_strtod_l+0x590>)
 80094d2:	eba9 0808 	sub.w	r8, r9, r8
 80094d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80094da:	e9d8 2300 	ldrd	r2, r3, [r8]
 80094de:	4650      	mov	r0, sl
 80094e0:	4659      	mov	r1, fp
 80094e2:	f7f7 f9bb 	bl	800085c <__aeabi_ddiv>
 80094e6:	e783      	b.n	80093f0 <_strtod_l+0x3d0>
 80094e8:	4b32      	ldr	r3, [pc, #200]	@ (80095b4 <_strtod_l+0x594>)
 80094ea:	9308      	str	r3, [sp, #32]
 80094ec:	2300      	movs	r3, #0
 80094ee:	1124      	asrs	r4, r4, #4
 80094f0:	4650      	mov	r0, sl
 80094f2:	4659      	mov	r1, fp
 80094f4:	461e      	mov	r6, r3
 80094f6:	2c01      	cmp	r4, #1
 80094f8:	dc21      	bgt.n	800953e <_strtod_l+0x51e>
 80094fa:	b10b      	cbz	r3, 8009500 <_strtod_l+0x4e0>
 80094fc:	4682      	mov	sl, r0
 80094fe:	468b      	mov	fp, r1
 8009500:	492c      	ldr	r1, [pc, #176]	@ (80095b4 <_strtod_l+0x594>)
 8009502:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009506:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800950a:	4652      	mov	r2, sl
 800950c:	465b      	mov	r3, fp
 800950e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009512:	f7f7 f879 	bl	8000608 <__aeabi_dmul>
 8009516:	4b28      	ldr	r3, [pc, #160]	@ (80095b8 <_strtod_l+0x598>)
 8009518:	460a      	mov	r2, r1
 800951a:	400b      	ands	r3, r1
 800951c:	4927      	ldr	r1, [pc, #156]	@ (80095bc <_strtod_l+0x59c>)
 800951e:	428b      	cmp	r3, r1
 8009520:	4682      	mov	sl, r0
 8009522:	d898      	bhi.n	8009456 <_strtod_l+0x436>
 8009524:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009528:	428b      	cmp	r3, r1
 800952a:	bf86      	itte	hi
 800952c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80095c0 <_strtod_l+0x5a0>
 8009530:	f04f 3aff 	movhi.w	sl, #4294967295
 8009534:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009538:	2300      	movs	r3, #0
 800953a:	9308      	str	r3, [sp, #32]
 800953c:	e07a      	b.n	8009634 <_strtod_l+0x614>
 800953e:	07e2      	lsls	r2, r4, #31
 8009540:	d505      	bpl.n	800954e <_strtod_l+0x52e>
 8009542:	9b08      	ldr	r3, [sp, #32]
 8009544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009548:	f7f7 f85e 	bl	8000608 <__aeabi_dmul>
 800954c:	2301      	movs	r3, #1
 800954e:	9a08      	ldr	r2, [sp, #32]
 8009550:	3208      	adds	r2, #8
 8009552:	3601      	adds	r6, #1
 8009554:	1064      	asrs	r4, r4, #1
 8009556:	9208      	str	r2, [sp, #32]
 8009558:	e7cd      	b.n	80094f6 <_strtod_l+0x4d6>
 800955a:	d0ed      	beq.n	8009538 <_strtod_l+0x518>
 800955c:	4264      	negs	r4, r4
 800955e:	f014 020f 	ands.w	r2, r4, #15
 8009562:	d00a      	beq.n	800957a <_strtod_l+0x55a>
 8009564:	4b12      	ldr	r3, [pc, #72]	@ (80095b0 <_strtod_l+0x590>)
 8009566:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800956a:	4650      	mov	r0, sl
 800956c:	4659      	mov	r1, fp
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	f7f7 f973 	bl	800085c <__aeabi_ddiv>
 8009576:	4682      	mov	sl, r0
 8009578:	468b      	mov	fp, r1
 800957a:	1124      	asrs	r4, r4, #4
 800957c:	d0dc      	beq.n	8009538 <_strtod_l+0x518>
 800957e:	2c1f      	cmp	r4, #31
 8009580:	dd20      	ble.n	80095c4 <_strtod_l+0x5a4>
 8009582:	2400      	movs	r4, #0
 8009584:	46a0      	mov	r8, r4
 8009586:	940a      	str	r4, [sp, #40]	@ 0x28
 8009588:	46a1      	mov	r9, r4
 800958a:	9a05      	ldr	r2, [sp, #20]
 800958c:	2322      	movs	r3, #34	@ 0x22
 800958e:	f04f 0a00 	mov.w	sl, #0
 8009592:	f04f 0b00 	mov.w	fp, #0
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	e768      	b.n	800946c <_strtod_l+0x44c>
 800959a:	bf00      	nop
 800959c:	0800af29 	.word	0x0800af29
 80095a0:	0800b13c 	.word	0x0800b13c
 80095a4:	0800af21 	.word	0x0800af21
 80095a8:	0800af58 	.word	0x0800af58
 80095ac:	0800b2e5 	.word	0x0800b2e5
 80095b0:	0800b070 	.word	0x0800b070
 80095b4:	0800b048 	.word	0x0800b048
 80095b8:	7ff00000 	.word	0x7ff00000
 80095bc:	7ca00000 	.word	0x7ca00000
 80095c0:	7fefffff 	.word	0x7fefffff
 80095c4:	f014 0310 	ands.w	r3, r4, #16
 80095c8:	bf18      	it	ne
 80095ca:	236a      	movne	r3, #106	@ 0x6a
 80095cc:	4ea9      	ldr	r6, [pc, #676]	@ (8009874 <_strtod_l+0x854>)
 80095ce:	9308      	str	r3, [sp, #32]
 80095d0:	4650      	mov	r0, sl
 80095d2:	4659      	mov	r1, fp
 80095d4:	2300      	movs	r3, #0
 80095d6:	07e2      	lsls	r2, r4, #31
 80095d8:	d504      	bpl.n	80095e4 <_strtod_l+0x5c4>
 80095da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095de:	f7f7 f813 	bl	8000608 <__aeabi_dmul>
 80095e2:	2301      	movs	r3, #1
 80095e4:	1064      	asrs	r4, r4, #1
 80095e6:	f106 0608 	add.w	r6, r6, #8
 80095ea:	d1f4      	bne.n	80095d6 <_strtod_l+0x5b6>
 80095ec:	b10b      	cbz	r3, 80095f2 <_strtod_l+0x5d2>
 80095ee:	4682      	mov	sl, r0
 80095f0:	468b      	mov	fp, r1
 80095f2:	9b08      	ldr	r3, [sp, #32]
 80095f4:	b1b3      	cbz	r3, 8009624 <_strtod_l+0x604>
 80095f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80095fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80095fe:	2b00      	cmp	r3, #0
 8009600:	4659      	mov	r1, fp
 8009602:	dd0f      	ble.n	8009624 <_strtod_l+0x604>
 8009604:	2b1f      	cmp	r3, #31
 8009606:	dd55      	ble.n	80096b4 <_strtod_l+0x694>
 8009608:	2b34      	cmp	r3, #52	@ 0x34
 800960a:	bfde      	ittt	le
 800960c:	f04f 33ff 	movle.w	r3, #4294967295
 8009610:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009614:	4093      	lslle	r3, r2
 8009616:	f04f 0a00 	mov.w	sl, #0
 800961a:	bfcc      	ite	gt
 800961c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009620:	ea03 0b01 	andle.w	fp, r3, r1
 8009624:	2200      	movs	r2, #0
 8009626:	2300      	movs	r3, #0
 8009628:	4650      	mov	r0, sl
 800962a:	4659      	mov	r1, fp
 800962c:	f7f7 fa54 	bl	8000ad8 <__aeabi_dcmpeq>
 8009630:	2800      	cmp	r0, #0
 8009632:	d1a6      	bne.n	8009582 <_strtod_l+0x562>
 8009634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800963a:	9805      	ldr	r0, [sp, #20]
 800963c:	462b      	mov	r3, r5
 800963e:	463a      	mov	r2, r7
 8009640:	f7ff f8c6 	bl	80087d0 <__s2b>
 8009644:	900a      	str	r0, [sp, #40]	@ 0x28
 8009646:	2800      	cmp	r0, #0
 8009648:	f43f af05 	beq.w	8009456 <_strtod_l+0x436>
 800964c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800964e:	2a00      	cmp	r2, #0
 8009650:	eba9 0308 	sub.w	r3, r9, r8
 8009654:	bfa8      	it	ge
 8009656:	2300      	movge	r3, #0
 8009658:	9312      	str	r3, [sp, #72]	@ 0x48
 800965a:	2400      	movs	r4, #0
 800965c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009660:	9316      	str	r3, [sp, #88]	@ 0x58
 8009662:	46a0      	mov	r8, r4
 8009664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009666:	9805      	ldr	r0, [sp, #20]
 8009668:	6859      	ldr	r1, [r3, #4]
 800966a:	f7ff f809 	bl	8008680 <_Balloc>
 800966e:	4681      	mov	r9, r0
 8009670:	2800      	cmp	r0, #0
 8009672:	f43f aef4 	beq.w	800945e <_strtod_l+0x43e>
 8009676:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009678:	691a      	ldr	r2, [r3, #16]
 800967a:	3202      	adds	r2, #2
 800967c:	f103 010c 	add.w	r1, r3, #12
 8009680:	0092      	lsls	r2, r2, #2
 8009682:	300c      	adds	r0, #12
 8009684:	f7fe f899 	bl	80077ba <memcpy>
 8009688:	ec4b ab10 	vmov	d0, sl, fp
 800968c:	9805      	ldr	r0, [sp, #20]
 800968e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009690:	a91b      	add	r1, sp, #108	@ 0x6c
 8009692:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009696:	f7ff fbd7 	bl	8008e48 <__d2b>
 800969a:	901a      	str	r0, [sp, #104]	@ 0x68
 800969c:	2800      	cmp	r0, #0
 800969e:	f43f aede 	beq.w	800945e <_strtod_l+0x43e>
 80096a2:	9805      	ldr	r0, [sp, #20]
 80096a4:	2101      	movs	r1, #1
 80096a6:	f7ff f929 	bl	80088fc <__i2b>
 80096aa:	4680      	mov	r8, r0
 80096ac:	b948      	cbnz	r0, 80096c2 <_strtod_l+0x6a2>
 80096ae:	f04f 0800 	mov.w	r8, #0
 80096b2:	e6d4      	b.n	800945e <_strtod_l+0x43e>
 80096b4:	f04f 32ff 	mov.w	r2, #4294967295
 80096b8:	fa02 f303 	lsl.w	r3, r2, r3
 80096bc:	ea03 0a0a 	and.w	sl, r3, sl
 80096c0:	e7b0      	b.n	8009624 <_strtod_l+0x604>
 80096c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80096c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80096c6:	2d00      	cmp	r5, #0
 80096c8:	bfab      	itete	ge
 80096ca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80096cc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80096ce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80096d0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80096d2:	bfac      	ite	ge
 80096d4:	18ef      	addge	r7, r5, r3
 80096d6:	1b5e      	sublt	r6, r3, r5
 80096d8:	9b08      	ldr	r3, [sp, #32]
 80096da:	1aed      	subs	r5, r5, r3
 80096dc:	4415      	add	r5, r2
 80096de:	4b66      	ldr	r3, [pc, #408]	@ (8009878 <_strtod_l+0x858>)
 80096e0:	3d01      	subs	r5, #1
 80096e2:	429d      	cmp	r5, r3
 80096e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80096e8:	da50      	bge.n	800978c <_strtod_l+0x76c>
 80096ea:	1b5b      	subs	r3, r3, r5
 80096ec:	2b1f      	cmp	r3, #31
 80096ee:	eba2 0203 	sub.w	r2, r2, r3
 80096f2:	f04f 0101 	mov.w	r1, #1
 80096f6:	dc3d      	bgt.n	8009774 <_strtod_l+0x754>
 80096f8:	fa01 f303 	lsl.w	r3, r1, r3
 80096fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80096fe:	2300      	movs	r3, #0
 8009700:	9310      	str	r3, [sp, #64]	@ 0x40
 8009702:	18bd      	adds	r5, r7, r2
 8009704:	9b08      	ldr	r3, [sp, #32]
 8009706:	42af      	cmp	r7, r5
 8009708:	4416      	add	r6, r2
 800970a:	441e      	add	r6, r3
 800970c:	463b      	mov	r3, r7
 800970e:	bfa8      	it	ge
 8009710:	462b      	movge	r3, r5
 8009712:	42b3      	cmp	r3, r6
 8009714:	bfa8      	it	ge
 8009716:	4633      	movge	r3, r6
 8009718:	2b00      	cmp	r3, #0
 800971a:	bfc2      	ittt	gt
 800971c:	1aed      	subgt	r5, r5, r3
 800971e:	1af6      	subgt	r6, r6, r3
 8009720:	1aff      	subgt	r7, r7, r3
 8009722:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009724:	2b00      	cmp	r3, #0
 8009726:	dd16      	ble.n	8009756 <_strtod_l+0x736>
 8009728:	4641      	mov	r1, r8
 800972a:	9805      	ldr	r0, [sp, #20]
 800972c:	461a      	mov	r2, r3
 800972e:	f7ff f9a5 	bl	8008a7c <__pow5mult>
 8009732:	4680      	mov	r8, r0
 8009734:	2800      	cmp	r0, #0
 8009736:	d0ba      	beq.n	80096ae <_strtod_l+0x68e>
 8009738:	4601      	mov	r1, r0
 800973a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800973c:	9805      	ldr	r0, [sp, #20]
 800973e:	f7ff f8f3 	bl	8008928 <__multiply>
 8009742:	900e      	str	r0, [sp, #56]	@ 0x38
 8009744:	2800      	cmp	r0, #0
 8009746:	f43f ae8a 	beq.w	800945e <_strtod_l+0x43e>
 800974a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800974c:	9805      	ldr	r0, [sp, #20]
 800974e:	f7fe ffd7 	bl	8008700 <_Bfree>
 8009752:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009754:	931a      	str	r3, [sp, #104]	@ 0x68
 8009756:	2d00      	cmp	r5, #0
 8009758:	dc1d      	bgt.n	8009796 <_strtod_l+0x776>
 800975a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800975c:	2b00      	cmp	r3, #0
 800975e:	dd23      	ble.n	80097a8 <_strtod_l+0x788>
 8009760:	4649      	mov	r1, r9
 8009762:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009764:	9805      	ldr	r0, [sp, #20]
 8009766:	f7ff f989 	bl	8008a7c <__pow5mult>
 800976a:	4681      	mov	r9, r0
 800976c:	b9e0      	cbnz	r0, 80097a8 <_strtod_l+0x788>
 800976e:	f04f 0900 	mov.w	r9, #0
 8009772:	e674      	b.n	800945e <_strtod_l+0x43e>
 8009774:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009778:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800977c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009780:	35e2      	adds	r5, #226	@ 0xe2
 8009782:	fa01 f305 	lsl.w	r3, r1, r5
 8009786:	9310      	str	r3, [sp, #64]	@ 0x40
 8009788:	9113      	str	r1, [sp, #76]	@ 0x4c
 800978a:	e7ba      	b.n	8009702 <_strtod_l+0x6e2>
 800978c:	2300      	movs	r3, #0
 800978e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009790:	2301      	movs	r3, #1
 8009792:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009794:	e7b5      	b.n	8009702 <_strtod_l+0x6e2>
 8009796:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009798:	9805      	ldr	r0, [sp, #20]
 800979a:	462a      	mov	r2, r5
 800979c:	f7ff f9c8 	bl	8008b30 <__lshift>
 80097a0:	901a      	str	r0, [sp, #104]	@ 0x68
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d1d9      	bne.n	800975a <_strtod_l+0x73a>
 80097a6:	e65a      	b.n	800945e <_strtod_l+0x43e>
 80097a8:	2e00      	cmp	r6, #0
 80097aa:	dd07      	ble.n	80097bc <_strtod_l+0x79c>
 80097ac:	4649      	mov	r1, r9
 80097ae:	9805      	ldr	r0, [sp, #20]
 80097b0:	4632      	mov	r2, r6
 80097b2:	f7ff f9bd 	bl	8008b30 <__lshift>
 80097b6:	4681      	mov	r9, r0
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d0d8      	beq.n	800976e <_strtod_l+0x74e>
 80097bc:	2f00      	cmp	r7, #0
 80097be:	dd08      	ble.n	80097d2 <_strtod_l+0x7b2>
 80097c0:	4641      	mov	r1, r8
 80097c2:	9805      	ldr	r0, [sp, #20]
 80097c4:	463a      	mov	r2, r7
 80097c6:	f7ff f9b3 	bl	8008b30 <__lshift>
 80097ca:	4680      	mov	r8, r0
 80097cc:	2800      	cmp	r0, #0
 80097ce:	f43f ae46 	beq.w	800945e <_strtod_l+0x43e>
 80097d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097d4:	9805      	ldr	r0, [sp, #20]
 80097d6:	464a      	mov	r2, r9
 80097d8:	f7ff fa32 	bl	8008c40 <__mdiff>
 80097dc:	4604      	mov	r4, r0
 80097de:	2800      	cmp	r0, #0
 80097e0:	f43f ae3d 	beq.w	800945e <_strtod_l+0x43e>
 80097e4:	68c3      	ldr	r3, [r0, #12]
 80097e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80097e8:	2300      	movs	r3, #0
 80097ea:	60c3      	str	r3, [r0, #12]
 80097ec:	4641      	mov	r1, r8
 80097ee:	f7ff fa0b 	bl	8008c08 <__mcmp>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	da46      	bge.n	8009884 <_strtod_l+0x864>
 80097f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097f8:	ea53 030a 	orrs.w	r3, r3, sl
 80097fc:	d16c      	bne.n	80098d8 <_strtod_l+0x8b8>
 80097fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009802:	2b00      	cmp	r3, #0
 8009804:	d168      	bne.n	80098d8 <_strtod_l+0x8b8>
 8009806:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800980a:	0d1b      	lsrs	r3, r3, #20
 800980c:	051b      	lsls	r3, r3, #20
 800980e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009812:	d961      	bls.n	80098d8 <_strtod_l+0x8b8>
 8009814:	6963      	ldr	r3, [r4, #20]
 8009816:	b913      	cbnz	r3, 800981e <_strtod_l+0x7fe>
 8009818:	6923      	ldr	r3, [r4, #16]
 800981a:	2b01      	cmp	r3, #1
 800981c:	dd5c      	ble.n	80098d8 <_strtod_l+0x8b8>
 800981e:	4621      	mov	r1, r4
 8009820:	2201      	movs	r2, #1
 8009822:	9805      	ldr	r0, [sp, #20]
 8009824:	f7ff f984 	bl	8008b30 <__lshift>
 8009828:	4641      	mov	r1, r8
 800982a:	4604      	mov	r4, r0
 800982c:	f7ff f9ec 	bl	8008c08 <__mcmp>
 8009830:	2800      	cmp	r0, #0
 8009832:	dd51      	ble.n	80098d8 <_strtod_l+0x8b8>
 8009834:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009838:	9a08      	ldr	r2, [sp, #32]
 800983a:	0d1b      	lsrs	r3, r3, #20
 800983c:	051b      	lsls	r3, r3, #20
 800983e:	2a00      	cmp	r2, #0
 8009840:	d06b      	beq.n	800991a <_strtod_l+0x8fa>
 8009842:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009846:	d868      	bhi.n	800991a <_strtod_l+0x8fa>
 8009848:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800984c:	f67f ae9d 	bls.w	800958a <_strtod_l+0x56a>
 8009850:	4b0a      	ldr	r3, [pc, #40]	@ (800987c <_strtod_l+0x85c>)
 8009852:	4650      	mov	r0, sl
 8009854:	4659      	mov	r1, fp
 8009856:	2200      	movs	r2, #0
 8009858:	f7f6 fed6 	bl	8000608 <__aeabi_dmul>
 800985c:	4b08      	ldr	r3, [pc, #32]	@ (8009880 <_strtod_l+0x860>)
 800985e:	400b      	ands	r3, r1
 8009860:	4682      	mov	sl, r0
 8009862:	468b      	mov	fp, r1
 8009864:	2b00      	cmp	r3, #0
 8009866:	f47f ae05 	bne.w	8009474 <_strtod_l+0x454>
 800986a:	9a05      	ldr	r2, [sp, #20]
 800986c:	2322      	movs	r3, #34	@ 0x22
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	e600      	b.n	8009474 <_strtod_l+0x454>
 8009872:	bf00      	nop
 8009874:	0800b168 	.word	0x0800b168
 8009878:	fffffc02 	.word	0xfffffc02
 800987c:	39500000 	.word	0x39500000
 8009880:	7ff00000 	.word	0x7ff00000
 8009884:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009888:	d165      	bne.n	8009956 <_strtod_l+0x936>
 800988a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800988c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009890:	b35a      	cbz	r2, 80098ea <_strtod_l+0x8ca>
 8009892:	4a9f      	ldr	r2, [pc, #636]	@ (8009b10 <_strtod_l+0xaf0>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d12b      	bne.n	80098f0 <_strtod_l+0x8d0>
 8009898:	9b08      	ldr	r3, [sp, #32]
 800989a:	4651      	mov	r1, sl
 800989c:	b303      	cbz	r3, 80098e0 <_strtod_l+0x8c0>
 800989e:	4b9d      	ldr	r3, [pc, #628]	@ (8009b14 <_strtod_l+0xaf4>)
 80098a0:	465a      	mov	r2, fp
 80098a2:	4013      	ands	r3, r2
 80098a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80098a8:	f04f 32ff 	mov.w	r2, #4294967295
 80098ac:	d81b      	bhi.n	80098e6 <_strtod_l+0x8c6>
 80098ae:	0d1b      	lsrs	r3, r3, #20
 80098b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80098b4:	fa02 f303 	lsl.w	r3, r2, r3
 80098b8:	4299      	cmp	r1, r3
 80098ba:	d119      	bne.n	80098f0 <_strtod_l+0x8d0>
 80098bc:	4b96      	ldr	r3, [pc, #600]	@ (8009b18 <_strtod_l+0xaf8>)
 80098be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d102      	bne.n	80098ca <_strtod_l+0x8aa>
 80098c4:	3101      	adds	r1, #1
 80098c6:	f43f adca 	beq.w	800945e <_strtod_l+0x43e>
 80098ca:	4b92      	ldr	r3, [pc, #584]	@ (8009b14 <_strtod_l+0xaf4>)
 80098cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098ce:	401a      	ands	r2, r3
 80098d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80098d4:	f04f 0a00 	mov.w	sl, #0
 80098d8:	9b08      	ldr	r3, [sp, #32]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1b8      	bne.n	8009850 <_strtod_l+0x830>
 80098de:	e5c9      	b.n	8009474 <_strtod_l+0x454>
 80098e0:	f04f 33ff 	mov.w	r3, #4294967295
 80098e4:	e7e8      	b.n	80098b8 <_strtod_l+0x898>
 80098e6:	4613      	mov	r3, r2
 80098e8:	e7e6      	b.n	80098b8 <_strtod_l+0x898>
 80098ea:	ea53 030a 	orrs.w	r3, r3, sl
 80098ee:	d0a1      	beq.n	8009834 <_strtod_l+0x814>
 80098f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80098f2:	b1db      	cbz	r3, 800992c <_strtod_l+0x90c>
 80098f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098f6:	4213      	tst	r3, r2
 80098f8:	d0ee      	beq.n	80098d8 <_strtod_l+0x8b8>
 80098fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098fc:	9a08      	ldr	r2, [sp, #32]
 80098fe:	4650      	mov	r0, sl
 8009900:	4659      	mov	r1, fp
 8009902:	b1bb      	cbz	r3, 8009934 <_strtod_l+0x914>
 8009904:	f7ff fb6e 	bl	8008fe4 <sulp>
 8009908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800990c:	ec53 2b10 	vmov	r2, r3, d0
 8009910:	f7f6 fcc4 	bl	800029c <__adddf3>
 8009914:	4682      	mov	sl, r0
 8009916:	468b      	mov	fp, r1
 8009918:	e7de      	b.n	80098d8 <_strtod_l+0x8b8>
 800991a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800991e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009922:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009926:	f04f 3aff 	mov.w	sl, #4294967295
 800992a:	e7d5      	b.n	80098d8 <_strtod_l+0x8b8>
 800992c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800992e:	ea13 0f0a 	tst.w	r3, sl
 8009932:	e7e1      	b.n	80098f8 <_strtod_l+0x8d8>
 8009934:	f7ff fb56 	bl	8008fe4 <sulp>
 8009938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800993c:	ec53 2b10 	vmov	r2, r3, d0
 8009940:	f7f6 fcaa 	bl	8000298 <__aeabi_dsub>
 8009944:	2200      	movs	r2, #0
 8009946:	2300      	movs	r3, #0
 8009948:	4682      	mov	sl, r0
 800994a:	468b      	mov	fp, r1
 800994c:	f7f7 f8c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009950:	2800      	cmp	r0, #0
 8009952:	d0c1      	beq.n	80098d8 <_strtod_l+0x8b8>
 8009954:	e619      	b.n	800958a <_strtod_l+0x56a>
 8009956:	4641      	mov	r1, r8
 8009958:	4620      	mov	r0, r4
 800995a:	f7ff facd 	bl	8008ef8 <__ratio>
 800995e:	ec57 6b10 	vmov	r6, r7, d0
 8009962:	2200      	movs	r2, #0
 8009964:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009968:	4630      	mov	r0, r6
 800996a:	4639      	mov	r1, r7
 800996c:	f7f7 f8c8 	bl	8000b00 <__aeabi_dcmple>
 8009970:	2800      	cmp	r0, #0
 8009972:	d06f      	beq.n	8009a54 <_strtod_l+0xa34>
 8009974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009976:	2b00      	cmp	r3, #0
 8009978:	d17a      	bne.n	8009a70 <_strtod_l+0xa50>
 800997a:	f1ba 0f00 	cmp.w	sl, #0
 800997e:	d158      	bne.n	8009a32 <_strtod_l+0xa12>
 8009980:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009986:	2b00      	cmp	r3, #0
 8009988:	d15a      	bne.n	8009a40 <_strtod_l+0xa20>
 800998a:	4b64      	ldr	r3, [pc, #400]	@ (8009b1c <_strtod_l+0xafc>)
 800998c:	2200      	movs	r2, #0
 800998e:	4630      	mov	r0, r6
 8009990:	4639      	mov	r1, r7
 8009992:	f7f7 f8ab 	bl	8000aec <__aeabi_dcmplt>
 8009996:	2800      	cmp	r0, #0
 8009998:	d159      	bne.n	8009a4e <_strtod_l+0xa2e>
 800999a:	4630      	mov	r0, r6
 800999c:	4639      	mov	r1, r7
 800999e:	4b60      	ldr	r3, [pc, #384]	@ (8009b20 <_strtod_l+0xb00>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	f7f6 fe31 	bl	8000608 <__aeabi_dmul>
 80099a6:	4606      	mov	r6, r0
 80099a8:	460f      	mov	r7, r1
 80099aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80099ae:	9606      	str	r6, [sp, #24]
 80099b0:	9307      	str	r3, [sp, #28]
 80099b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099b6:	4d57      	ldr	r5, [pc, #348]	@ (8009b14 <_strtod_l+0xaf4>)
 80099b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099be:	401d      	ands	r5, r3
 80099c0:	4b58      	ldr	r3, [pc, #352]	@ (8009b24 <_strtod_l+0xb04>)
 80099c2:	429d      	cmp	r5, r3
 80099c4:	f040 80b2 	bne.w	8009b2c <_strtod_l+0xb0c>
 80099c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80099ce:	ec4b ab10 	vmov	d0, sl, fp
 80099d2:	f7ff f9c9 	bl	8008d68 <__ulp>
 80099d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099da:	ec51 0b10 	vmov	r0, r1, d0
 80099de:	f7f6 fe13 	bl	8000608 <__aeabi_dmul>
 80099e2:	4652      	mov	r2, sl
 80099e4:	465b      	mov	r3, fp
 80099e6:	f7f6 fc59 	bl	800029c <__adddf3>
 80099ea:	460b      	mov	r3, r1
 80099ec:	4949      	ldr	r1, [pc, #292]	@ (8009b14 <_strtod_l+0xaf4>)
 80099ee:	4a4e      	ldr	r2, [pc, #312]	@ (8009b28 <_strtod_l+0xb08>)
 80099f0:	4019      	ands	r1, r3
 80099f2:	4291      	cmp	r1, r2
 80099f4:	4682      	mov	sl, r0
 80099f6:	d942      	bls.n	8009a7e <_strtod_l+0xa5e>
 80099f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80099fa:	4b47      	ldr	r3, [pc, #284]	@ (8009b18 <_strtod_l+0xaf8>)
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d103      	bne.n	8009a08 <_strtod_l+0x9e8>
 8009a00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a02:	3301      	adds	r3, #1
 8009a04:	f43f ad2b 	beq.w	800945e <_strtod_l+0x43e>
 8009a08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009b18 <_strtod_l+0xaf8>
 8009a0c:	f04f 3aff 	mov.w	sl, #4294967295
 8009a10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a12:	9805      	ldr	r0, [sp, #20]
 8009a14:	f7fe fe74 	bl	8008700 <_Bfree>
 8009a18:	9805      	ldr	r0, [sp, #20]
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	f7fe fe70 	bl	8008700 <_Bfree>
 8009a20:	9805      	ldr	r0, [sp, #20]
 8009a22:	4641      	mov	r1, r8
 8009a24:	f7fe fe6c 	bl	8008700 <_Bfree>
 8009a28:	9805      	ldr	r0, [sp, #20]
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	f7fe fe68 	bl	8008700 <_Bfree>
 8009a30:	e618      	b.n	8009664 <_strtod_l+0x644>
 8009a32:	f1ba 0f01 	cmp.w	sl, #1
 8009a36:	d103      	bne.n	8009a40 <_strtod_l+0xa20>
 8009a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f43f ada5 	beq.w	800958a <_strtod_l+0x56a>
 8009a40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009af0 <_strtod_l+0xad0>
 8009a44:	4f35      	ldr	r7, [pc, #212]	@ (8009b1c <_strtod_l+0xafc>)
 8009a46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a4a:	2600      	movs	r6, #0
 8009a4c:	e7b1      	b.n	80099b2 <_strtod_l+0x992>
 8009a4e:	4f34      	ldr	r7, [pc, #208]	@ (8009b20 <_strtod_l+0xb00>)
 8009a50:	2600      	movs	r6, #0
 8009a52:	e7aa      	b.n	80099aa <_strtod_l+0x98a>
 8009a54:	4b32      	ldr	r3, [pc, #200]	@ (8009b20 <_strtod_l+0xb00>)
 8009a56:	4630      	mov	r0, r6
 8009a58:	4639      	mov	r1, r7
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f7f6 fdd4 	bl	8000608 <__aeabi_dmul>
 8009a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a62:	4606      	mov	r6, r0
 8009a64:	460f      	mov	r7, r1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d09f      	beq.n	80099aa <_strtod_l+0x98a>
 8009a6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009a6e:	e7a0      	b.n	80099b2 <_strtod_l+0x992>
 8009a70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009af8 <_strtod_l+0xad8>
 8009a74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a78:	ec57 6b17 	vmov	r6, r7, d7
 8009a7c:	e799      	b.n	80099b2 <_strtod_l+0x992>
 8009a7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009a82:	9b08      	ldr	r3, [sp, #32]
 8009a84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1c1      	bne.n	8009a10 <_strtod_l+0x9f0>
 8009a8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a90:	0d1b      	lsrs	r3, r3, #20
 8009a92:	051b      	lsls	r3, r3, #20
 8009a94:	429d      	cmp	r5, r3
 8009a96:	d1bb      	bne.n	8009a10 <_strtod_l+0x9f0>
 8009a98:	4630      	mov	r0, r6
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	f7f7 f914 	bl	8000cc8 <__aeabi_d2lz>
 8009aa0:	f7f6 fd84 	bl	80005ac <__aeabi_l2d>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	4639      	mov	r1, r7
 8009aac:	f7f6 fbf4 	bl	8000298 <__aeabi_dsub>
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009ab8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009abc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009abe:	ea46 060a 	orr.w	r6, r6, sl
 8009ac2:	431e      	orrs	r6, r3
 8009ac4:	d06f      	beq.n	8009ba6 <_strtod_l+0xb86>
 8009ac6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b00 <_strtod_l+0xae0>)
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	f7f7 f80e 	bl	8000aec <__aeabi_dcmplt>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	f47f accf 	bne.w	8009474 <_strtod_l+0x454>
 8009ad6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009b08 <_strtod_l+0xae8>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ae0:	f7f7 f822 	bl	8000b28 <__aeabi_dcmpgt>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d093      	beq.n	8009a10 <_strtod_l+0x9f0>
 8009ae8:	e4c4      	b.n	8009474 <_strtod_l+0x454>
 8009aea:	bf00      	nop
 8009aec:	f3af 8000 	nop.w
 8009af0:	00000000 	.word	0x00000000
 8009af4:	bff00000 	.word	0xbff00000
 8009af8:	00000000 	.word	0x00000000
 8009afc:	3ff00000 	.word	0x3ff00000
 8009b00:	94a03595 	.word	0x94a03595
 8009b04:	3fdfffff 	.word	0x3fdfffff
 8009b08:	35afe535 	.word	0x35afe535
 8009b0c:	3fe00000 	.word	0x3fe00000
 8009b10:	000fffff 	.word	0x000fffff
 8009b14:	7ff00000 	.word	0x7ff00000
 8009b18:	7fefffff 	.word	0x7fefffff
 8009b1c:	3ff00000 	.word	0x3ff00000
 8009b20:	3fe00000 	.word	0x3fe00000
 8009b24:	7fe00000 	.word	0x7fe00000
 8009b28:	7c9fffff 	.word	0x7c9fffff
 8009b2c:	9b08      	ldr	r3, [sp, #32]
 8009b2e:	b323      	cbz	r3, 8009b7a <_strtod_l+0xb5a>
 8009b30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009b34:	d821      	bhi.n	8009b7a <_strtod_l+0xb5a>
 8009b36:	a328      	add	r3, pc, #160	@ (adr r3, 8009bd8 <_strtod_l+0xbb8>)
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	4639      	mov	r1, r7
 8009b40:	f7f6 ffde 	bl	8000b00 <__aeabi_dcmple>
 8009b44:	b1a0      	cbz	r0, 8009b70 <_strtod_l+0xb50>
 8009b46:	4639      	mov	r1, r7
 8009b48:	4630      	mov	r0, r6
 8009b4a:	f7f7 f835 	bl	8000bb8 <__aeabi_d2uiz>
 8009b4e:	2801      	cmp	r0, #1
 8009b50:	bf38      	it	cc
 8009b52:	2001      	movcc	r0, #1
 8009b54:	f7f6 fcde 	bl	8000514 <__aeabi_ui2d>
 8009b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	460f      	mov	r7, r1
 8009b5e:	b9fb      	cbnz	r3, 8009ba0 <_strtod_l+0xb80>
 8009b60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b64:	9014      	str	r0, [sp, #80]	@ 0x50
 8009b66:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009b6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009b76:	1b5b      	subs	r3, r3, r5
 8009b78:	9311      	str	r3, [sp, #68]	@ 0x44
 8009b7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009b7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009b82:	f7ff f8f1 	bl	8008d68 <__ulp>
 8009b86:	4650      	mov	r0, sl
 8009b88:	ec53 2b10 	vmov	r2, r3, d0
 8009b8c:	4659      	mov	r1, fp
 8009b8e:	f7f6 fd3b 	bl	8000608 <__aeabi_dmul>
 8009b92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009b96:	f7f6 fb81 	bl	800029c <__adddf3>
 8009b9a:	4682      	mov	sl, r0
 8009b9c:	468b      	mov	fp, r1
 8009b9e:	e770      	b.n	8009a82 <_strtod_l+0xa62>
 8009ba0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009ba4:	e7e0      	b.n	8009b68 <_strtod_l+0xb48>
 8009ba6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009be0 <_strtod_l+0xbc0>)
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	f7f6 ff9e 	bl	8000aec <__aeabi_dcmplt>
 8009bb0:	e798      	b.n	8009ae4 <_strtod_l+0xac4>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bb6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009bb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bba:	6013      	str	r3, [r2, #0]
 8009bbc:	f7ff ba6d 	b.w	800909a <_strtod_l+0x7a>
 8009bc0:	2a65      	cmp	r2, #101	@ 0x65
 8009bc2:	f43f ab66 	beq.w	8009292 <_strtod_l+0x272>
 8009bc6:	2a45      	cmp	r2, #69	@ 0x45
 8009bc8:	f43f ab63 	beq.w	8009292 <_strtod_l+0x272>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f7ff bb9e 	b.w	800930e <_strtod_l+0x2ee>
 8009bd2:	bf00      	nop
 8009bd4:	f3af 8000 	nop.w
 8009bd8:	ffc00000 	.word	0xffc00000
 8009bdc:	41dfffff 	.word	0x41dfffff
 8009be0:	94a03595 	.word	0x94a03595
 8009be4:	3fcfffff 	.word	0x3fcfffff

08009be8 <_strtod_r>:
 8009be8:	4b01      	ldr	r3, [pc, #4]	@ (8009bf0 <_strtod_r+0x8>)
 8009bea:	f7ff ba19 	b.w	8009020 <_strtod_l>
 8009bee:	bf00      	nop
 8009bf0:	2000006c 	.word	0x2000006c

08009bf4 <_strtol_l.constprop.0>:
 8009bf4:	2b24      	cmp	r3, #36	@ 0x24
 8009bf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bfa:	4686      	mov	lr, r0
 8009bfc:	4690      	mov	r8, r2
 8009bfe:	d801      	bhi.n	8009c04 <_strtol_l.constprop.0+0x10>
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d106      	bne.n	8009c12 <_strtol_l.constprop.0+0x1e>
 8009c04:	f7fd fdac 	bl	8007760 <__errno>
 8009c08:	2316      	movs	r3, #22
 8009c0a:	6003      	str	r3, [r0, #0]
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c12:	4834      	ldr	r0, [pc, #208]	@ (8009ce4 <_strtol_l.constprop.0+0xf0>)
 8009c14:	460d      	mov	r5, r1
 8009c16:	462a      	mov	r2, r5
 8009c18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c1c:	5d06      	ldrb	r6, [r0, r4]
 8009c1e:	f016 0608 	ands.w	r6, r6, #8
 8009c22:	d1f8      	bne.n	8009c16 <_strtol_l.constprop.0+0x22>
 8009c24:	2c2d      	cmp	r4, #45	@ 0x2d
 8009c26:	d12d      	bne.n	8009c84 <_strtol_l.constprop.0+0x90>
 8009c28:	782c      	ldrb	r4, [r5, #0]
 8009c2a:	2601      	movs	r6, #1
 8009c2c:	1c95      	adds	r5, r2, #2
 8009c2e:	f033 0210 	bics.w	r2, r3, #16
 8009c32:	d109      	bne.n	8009c48 <_strtol_l.constprop.0+0x54>
 8009c34:	2c30      	cmp	r4, #48	@ 0x30
 8009c36:	d12a      	bne.n	8009c8e <_strtol_l.constprop.0+0x9a>
 8009c38:	782a      	ldrb	r2, [r5, #0]
 8009c3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009c3e:	2a58      	cmp	r2, #88	@ 0x58
 8009c40:	d125      	bne.n	8009c8e <_strtol_l.constprop.0+0x9a>
 8009c42:	786c      	ldrb	r4, [r5, #1]
 8009c44:	2310      	movs	r3, #16
 8009c46:	3502      	adds	r5, #2
 8009c48:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009c4c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c50:	2200      	movs	r2, #0
 8009c52:	fbbc f9f3 	udiv	r9, ip, r3
 8009c56:	4610      	mov	r0, r2
 8009c58:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c5c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009c60:	2f09      	cmp	r7, #9
 8009c62:	d81b      	bhi.n	8009c9c <_strtol_l.constprop.0+0xa8>
 8009c64:	463c      	mov	r4, r7
 8009c66:	42a3      	cmp	r3, r4
 8009c68:	dd27      	ble.n	8009cba <_strtol_l.constprop.0+0xc6>
 8009c6a:	1c57      	adds	r7, r2, #1
 8009c6c:	d007      	beq.n	8009c7e <_strtol_l.constprop.0+0x8a>
 8009c6e:	4581      	cmp	r9, r0
 8009c70:	d320      	bcc.n	8009cb4 <_strtol_l.constprop.0+0xc0>
 8009c72:	d101      	bne.n	8009c78 <_strtol_l.constprop.0+0x84>
 8009c74:	45a2      	cmp	sl, r4
 8009c76:	db1d      	blt.n	8009cb4 <_strtol_l.constprop.0+0xc0>
 8009c78:	fb00 4003 	mla	r0, r0, r3, r4
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c82:	e7eb      	b.n	8009c5c <_strtol_l.constprop.0+0x68>
 8009c84:	2c2b      	cmp	r4, #43	@ 0x2b
 8009c86:	bf04      	itt	eq
 8009c88:	782c      	ldrbeq	r4, [r5, #0]
 8009c8a:	1c95      	addeq	r5, r2, #2
 8009c8c:	e7cf      	b.n	8009c2e <_strtol_l.constprop.0+0x3a>
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1da      	bne.n	8009c48 <_strtol_l.constprop.0+0x54>
 8009c92:	2c30      	cmp	r4, #48	@ 0x30
 8009c94:	bf0c      	ite	eq
 8009c96:	2308      	moveq	r3, #8
 8009c98:	230a      	movne	r3, #10
 8009c9a:	e7d5      	b.n	8009c48 <_strtol_l.constprop.0+0x54>
 8009c9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ca0:	2f19      	cmp	r7, #25
 8009ca2:	d801      	bhi.n	8009ca8 <_strtol_l.constprop.0+0xb4>
 8009ca4:	3c37      	subs	r4, #55	@ 0x37
 8009ca6:	e7de      	b.n	8009c66 <_strtol_l.constprop.0+0x72>
 8009ca8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009cac:	2f19      	cmp	r7, #25
 8009cae:	d804      	bhi.n	8009cba <_strtol_l.constprop.0+0xc6>
 8009cb0:	3c57      	subs	r4, #87	@ 0x57
 8009cb2:	e7d8      	b.n	8009c66 <_strtol_l.constprop.0+0x72>
 8009cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb8:	e7e1      	b.n	8009c7e <_strtol_l.constprop.0+0x8a>
 8009cba:	1c53      	adds	r3, r2, #1
 8009cbc:	d108      	bne.n	8009cd0 <_strtol_l.constprop.0+0xdc>
 8009cbe:	2322      	movs	r3, #34	@ 0x22
 8009cc0:	f8ce 3000 	str.w	r3, [lr]
 8009cc4:	4660      	mov	r0, ip
 8009cc6:	f1b8 0f00 	cmp.w	r8, #0
 8009cca:	d0a0      	beq.n	8009c0e <_strtol_l.constprop.0+0x1a>
 8009ccc:	1e69      	subs	r1, r5, #1
 8009cce:	e006      	b.n	8009cde <_strtol_l.constprop.0+0xea>
 8009cd0:	b106      	cbz	r6, 8009cd4 <_strtol_l.constprop.0+0xe0>
 8009cd2:	4240      	negs	r0, r0
 8009cd4:	f1b8 0f00 	cmp.w	r8, #0
 8009cd8:	d099      	beq.n	8009c0e <_strtol_l.constprop.0+0x1a>
 8009cda:	2a00      	cmp	r2, #0
 8009cdc:	d1f6      	bne.n	8009ccc <_strtol_l.constprop.0+0xd8>
 8009cde:	f8c8 1000 	str.w	r1, [r8]
 8009ce2:	e794      	b.n	8009c0e <_strtol_l.constprop.0+0x1a>
 8009ce4:	0800b191 	.word	0x0800b191

08009ce8 <_strtol_r>:
 8009ce8:	f7ff bf84 	b.w	8009bf4 <_strtol_l.constprop.0>

08009cec <__ssputs_r>:
 8009cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf0:	688e      	ldr	r6, [r1, #8]
 8009cf2:	461f      	mov	r7, r3
 8009cf4:	42be      	cmp	r6, r7
 8009cf6:	680b      	ldr	r3, [r1, #0]
 8009cf8:	4682      	mov	sl, r0
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	4690      	mov	r8, r2
 8009cfe:	d82d      	bhi.n	8009d5c <__ssputs_r+0x70>
 8009d00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d08:	d026      	beq.n	8009d58 <__ssputs_r+0x6c>
 8009d0a:	6965      	ldr	r5, [r4, #20]
 8009d0c:	6909      	ldr	r1, [r1, #16]
 8009d0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d12:	eba3 0901 	sub.w	r9, r3, r1
 8009d16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d1a:	1c7b      	adds	r3, r7, #1
 8009d1c:	444b      	add	r3, r9
 8009d1e:	106d      	asrs	r5, r5, #1
 8009d20:	429d      	cmp	r5, r3
 8009d22:	bf38      	it	cc
 8009d24:	461d      	movcc	r5, r3
 8009d26:	0553      	lsls	r3, r2, #21
 8009d28:	d527      	bpl.n	8009d7a <__ssputs_r+0x8e>
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	f7fe fc1c 	bl	8008568 <_malloc_r>
 8009d30:	4606      	mov	r6, r0
 8009d32:	b360      	cbz	r0, 8009d8e <__ssputs_r+0xa2>
 8009d34:	6921      	ldr	r1, [r4, #16]
 8009d36:	464a      	mov	r2, r9
 8009d38:	f7fd fd3f 	bl	80077ba <memcpy>
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d46:	81a3      	strh	r3, [r4, #12]
 8009d48:	6126      	str	r6, [r4, #16]
 8009d4a:	6165      	str	r5, [r4, #20]
 8009d4c:	444e      	add	r6, r9
 8009d4e:	eba5 0509 	sub.w	r5, r5, r9
 8009d52:	6026      	str	r6, [r4, #0]
 8009d54:	60a5      	str	r5, [r4, #8]
 8009d56:	463e      	mov	r6, r7
 8009d58:	42be      	cmp	r6, r7
 8009d5a:	d900      	bls.n	8009d5e <__ssputs_r+0x72>
 8009d5c:	463e      	mov	r6, r7
 8009d5e:	6820      	ldr	r0, [r4, #0]
 8009d60:	4632      	mov	r2, r6
 8009d62:	4641      	mov	r1, r8
 8009d64:	f000 f9c6 	bl	800a0f4 <memmove>
 8009d68:	68a3      	ldr	r3, [r4, #8]
 8009d6a:	1b9b      	subs	r3, r3, r6
 8009d6c:	60a3      	str	r3, [r4, #8]
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	4433      	add	r3, r6
 8009d72:	6023      	str	r3, [r4, #0]
 8009d74:	2000      	movs	r0, #0
 8009d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7a:	462a      	mov	r2, r5
 8009d7c:	f000 fd7d 	bl	800a87a <_realloc_r>
 8009d80:	4606      	mov	r6, r0
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d1e0      	bne.n	8009d48 <__ssputs_r+0x5c>
 8009d86:	6921      	ldr	r1, [r4, #16]
 8009d88:	4650      	mov	r0, sl
 8009d8a:	f7fe fb79 	bl	8008480 <_free_r>
 8009d8e:	230c      	movs	r3, #12
 8009d90:	f8ca 3000 	str.w	r3, [sl]
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d9a:	81a3      	strh	r3, [r4, #12]
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009da0:	e7e9      	b.n	8009d76 <__ssputs_r+0x8a>
	...

08009da4 <_svfiprintf_r>:
 8009da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da8:	4698      	mov	r8, r3
 8009daa:	898b      	ldrh	r3, [r1, #12]
 8009dac:	061b      	lsls	r3, r3, #24
 8009dae:	b09d      	sub	sp, #116	@ 0x74
 8009db0:	4607      	mov	r7, r0
 8009db2:	460d      	mov	r5, r1
 8009db4:	4614      	mov	r4, r2
 8009db6:	d510      	bpl.n	8009dda <_svfiprintf_r+0x36>
 8009db8:	690b      	ldr	r3, [r1, #16]
 8009dba:	b973      	cbnz	r3, 8009dda <_svfiprintf_r+0x36>
 8009dbc:	2140      	movs	r1, #64	@ 0x40
 8009dbe:	f7fe fbd3 	bl	8008568 <_malloc_r>
 8009dc2:	6028      	str	r0, [r5, #0]
 8009dc4:	6128      	str	r0, [r5, #16]
 8009dc6:	b930      	cbnz	r0, 8009dd6 <_svfiprintf_r+0x32>
 8009dc8:	230c      	movs	r3, #12
 8009dca:	603b      	str	r3, [r7, #0]
 8009dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd0:	b01d      	add	sp, #116	@ 0x74
 8009dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd6:	2340      	movs	r3, #64	@ 0x40
 8009dd8:	616b      	str	r3, [r5, #20]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dde:	2320      	movs	r3, #32
 8009de0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009de8:	2330      	movs	r3, #48	@ 0x30
 8009dea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f88 <_svfiprintf_r+0x1e4>
 8009dee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009df2:	f04f 0901 	mov.w	r9, #1
 8009df6:	4623      	mov	r3, r4
 8009df8:	469a      	mov	sl, r3
 8009dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dfe:	b10a      	cbz	r2, 8009e04 <_svfiprintf_r+0x60>
 8009e00:	2a25      	cmp	r2, #37	@ 0x25
 8009e02:	d1f9      	bne.n	8009df8 <_svfiprintf_r+0x54>
 8009e04:	ebba 0b04 	subs.w	fp, sl, r4
 8009e08:	d00b      	beq.n	8009e22 <_svfiprintf_r+0x7e>
 8009e0a:	465b      	mov	r3, fp
 8009e0c:	4622      	mov	r2, r4
 8009e0e:	4629      	mov	r1, r5
 8009e10:	4638      	mov	r0, r7
 8009e12:	f7ff ff6b 	bl	8009cec <__ssputs_r>
 8009e16:	3001      	adds	r0, #1
 8009e18:	f000 80a7 	beq.w	8009f6a <_svfiprintf_r+0x1c6>
 8009e1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e1e:	445a      	add	r2, fp
 8009e20:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e22:	f89a 3000 	ldrb.w	r3, [sl]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 809f 	beq.w	8009f6a <_svfiprintf_r+0x1c6>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e36:	f10a 0a01 	add.w	sl, sl, #1
 8009e3a:	9304      	str	r3, [sp, #16]
 8009e3c:	9307      	str	r3, [sp, #28]
 8009e3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e42:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e44:	4654      	mov	r4, sl
 8009e46:	2205      	movs	r2, #5
 8009e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e4c:	484e      	ldr	r0, [pc, #312]	@ (8009f88 <_svfiprintf_r+0x1e4>)
 8009e4e:	f7f6 f9c7 	bl	80001e0 <memchr>
 8009e52:	9a04      	ldr	r2, [sp, #16]
 8009e54:	b9d8      	cbnz	r0, 8009e8e <_svfiprintf_r+0xea>
 8009e56:	06d0      	lsls	r0, r2, #27
 8009e58:	bf44      	itt	mi
 8009e5a:	2320      	movmi	r3, #32
 8009e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e60:	0711      	lsls	r1, r2, #28
 8009e62:	bf44      	itt	mi
 8009e64:	232b      	movmi	r3, #43	@ 0x2b
 8009e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e70:	d015      	beq.n	8009e9e <_svfiprintf_r+0xfa>
 8009e72:	9a07      	ldr	r2, [sp, #28]
 8009e74:	4654      	mov	r4, sl
 8009e76:	2000      	movs	r0, #0
 8009e78:	f04f 0c0a 	mov.w	ip, #10
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e82:	3b30      	subs	r3, #48	@ 0x30
 8009e84:	2b09      	cmp	r3, #9
 8009e86:	d94b      	bls.n	8009f20 <_svfiprintf_r+0x17c>
 8009e88:	b1b0      	cbz	r0, 8009eb8 <_svfiprintf_r+0x114>
 8009e8a:	9207      	str	r2, [sp, #28]
 8009e8c:	e014      	b.n	8009eb8 <_svfiprintf_r+0x114>
 8009e8e:	eba0 0308 	sub.w	r3, r0, r8
 8009e92:	fa09 f303 	lsl.w	r3, r9, r3
 8009e96:	4313      	orrs	r3, r2
 8009e98:	9304      	str	r3, [sp, #16]
 8009e9a:	46a2      	mov	sl, r4
 8009e9c:	e7d2      	b.n	8009e44 <_svfiprintf_r+0xa0>
 8009e9e:	9b03      	ldr	r3, [sp, #12]
 8009ea0:	1d19      	adds	r1, r3, #4
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	9103      	str	r1, [sp, #12]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bfbb      	ittet	lt
 8009eaa:	425b      	neglt	r3, r3
 8009eac:	f042 0202 	orrlt.w	r2, r2, #2
 8009eb0:	9307      	strge	r3, [sp, #28]
 8009eb2:	9307      	strlt	r3, [sp, #28]
 8009eb4:	bfb8      	it	lt
 8009eb6:	9204      	strlt	r2, [sp, #16]
 8009eb8:	7823      	ldrb	r3, [r4, #0]
 8009eba:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ebc:	d10a      	bne.n	8009ed4 <_svfiprintf_r+0x130>
 8009ebe:	7863      	ldrb	r3, [r4, #1]
 8009ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ec2:	d132      	bne.n	8009f2a <_svfiprintf_r+0x186>
 8009ec4:	9b03      	ldr	r3, [sp, #12]
 8009ec6:	1d1a      	adds	r2, r3, #4
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	9203      	str	r2, [sp, #12]
 8009ecc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ed0:	3402      	adds	r4, #2
 8009ed2:	9305      	str	r3, [sp, #20]
 8009ed4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f98 <_svfiprintf_r+0x1f4>
 8009ed8:	7821      	ldrb	r1, [r4, #0]
 8009eda:	2203      	movs	r2, #3
 8009edc:	4650      	mov	r0, sl
 8009ede:	f7f6 f97f 	bl	80001e0 <memchr>
 8009ee2:	b138      	cbz	r0, 8009ef4 <_svfiprintf_r+0x150>
 8009ee4:	9b04      	ldr	r3, [sp, #16]
 8009ee6:	eba0 000a 	sub.w	r0, r0, sl
 8009eea:	2240      	movs	r2, #64	@ 0x40
 8009eec:	4082      	lsls	r2, r0
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	3401      	adds	r4, #1
 8009ef2:	9304      	str	r3, [sp, #16]
 8009ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef8:	4824      	ldr	r0, [pc, #144]	@ (8009f8c <_svfiprintf_r+0x1e8>)
 8009efa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009efe:	2206      	movs	r2, #6
 8009f00:	f7f6 f96e 	bl	80001e0 <memchr>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d036      	beq.n	8009f76 <_svfiprintf_r+0x1d2>
 8009f08:	4b21      	ldr	r3, [pc, #132]	@ (8009f90 <_svfiprintf_r+0x1ec>)
 8009f0a:	bb1b      	cbnz	r3, 8009f54 <_svfiprintf_r+0x1b0>
 8009f0c:	9b03      	ldr	r3, [sp, #12]
 8009f0e:	3307      	adds	r3, #7
 8009f10:	f023 0307 	bic.w	r3, r3, #7
 8009f14:	3308      	adds	r3, #8
 8009f16:	9303      	str	r3, [sp, #12]
 8009f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f1a:	4433      	add	r3, r6
 8009f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f1e:	e76a      	b.n	8009df6 <_svfiprintf_r+0x52>
 8009f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f24:	460c      	mov	r4, r1
 8009f26:	2001      	movs	r0, #1
 8009f28:	e7a8      	b.n	8009e7c <_svfiprintf_r+0xd8>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	3401      	adds	r4, #1
 8009f2e:	9305      	str	r3, [sp, #20]
 8009f30:	4619      	mov	r1, r3
 8009f32:	f04f 0c0a 	mov.w	ip, #10
 8009f36:	4620      	mov	r0, r4
 8009f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f3c:	3a30      	subs	r2, #48	@ 0x30
 8009f3e:	2a09      	cmp	r2, #9
 8009f40:	d903      	bls.n	8009f4a <_svfiprintf_r+0x1a6>
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0c6      	beq.n	8009ed4 <_svfiprintf_r+0x130>
 8009f46:	9105      	str	r1, [sp, #20]
 8009f48:	e7c4      	b.n	8009ed4 <_svfiprintf_r+0x130>
 8009f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f4e:	4604      	mov	r4, r0
 8009f50:	2301      	movs	r3, #1
 8009f52:	e7f0      	b.n	8009f36 <_svfiprintf_r+0x192>
 8009f54:	ab03      	add	r3, sp, #12
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	462a      	mov	r2, r5
 8009f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f94 <_svfiprintf_r+0x1f0>)
 8009f5c:	a904      	add	r1, sp, #16
 8009f5e:	4638      	mov	r0, r7
 8009f60:	f7fc fcba 	bl	80068d8 <_printf_float>
 8009f64:	1c42      	adds	r2, r0, #1
 8009f66:	4606      	mov	r6, r0
 8009f68:	d1d6      	bne.n	8009f18 <_svfiprintf_r+0x174>
 8009f6a:	89ab      	ldrh	r3, [r5, #12]
 8009f6c:	065b      	lsls	r3, r3, #25
 8009f6e:	f53f af2d 	bmi.w	8009dcc <_svfiprintf_r+0x28>
 8009f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f74:	e72c      	b.n	8009dd0 <_svfiprintf_r+0x2c>
 8009f76:	ab03      	add	r3, sp, #12
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	462a      	mov	r2, r5
 8009f7c:	4b05      	ldr	r3, [pc, #20]	@ (8009f94 <_svfiprintf_r+0x1f0>)
 8009f7e:	a904      	add	r1, sp, #16
 8009f80:	4638      	mov	r0, r7
 8009f82:	f7fc ff41 	bl	8006e08 <_printf_i>
 8009f86:	e7ed      	b.n	8009f64 <_svfiprintf_r+0x1c0>
 8009f88:	0800b291 	.word	0x0800b291
 8009f8c:	0800b29b 	.word	0x0800b29b
 8009f90:	080068d9 	.word	0x080068d9
 8009f94:	08009ced 	.word	0x08009ced
 8009f98:	0800b297 	.word	0x0800b297

08009f9c <__sflush_r>:
 8009f9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa4:	0716      	lsls	r6, r2, #28
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	460c      	mov	r4, r1
 8009faa:	d454      	bmi.n	800a056 <__sflush_r+0xba>
 8009fac:	684b      	ldr	r3, [r1, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	dc02      	bgt.n	8009fb8 <__sflush_r+0x1c>
 8009fb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	dd48      	ble.n	800a04a <__sflush_r+0xae>
 8009fb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fba:	2e00      	cmp	r6, #0
 8009fbc:	d045      	beq.n	800a04a <__sflush_r+0xae>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009fc4:	682f      	ldr	r7, [r5, #0]
 8009fc6:	6a21      	ldr	r1, [r4, #32]
 8009fc8:	602b      	str	r3, [r5, #0]
 8009fca:	d030      	beq.n	800a02e <__sflush_r+0x92>
 8009fcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	0759      	lsls	r1, r3, #29
 8009fd2:	d505      	bpl.n	8009fe0 <__sflush_r+0x44>
 8009fd4:	6863      	ldr	r3, [r4, #4]
 8009fd6:	1ad2      	subs	r2, r2, r3
 8009fd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fda:	b10b      	cbz	r3, 8009fe0 <__sflush_r+0x44>
 8009fdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fde:	1ad2      	subs	r2, r2, r3
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fe4:	6a21      	ldr	r1, [r4, #32]
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	47b0      	blx	r6
 8009fea:	1c43      	adds	r3, r0, #1
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	d106      	bne.n	8009ffe <__sflush_r+0x62>
 8009ff0:	6829      	ldr	r1, [r5, #0]
 8009ff2:	291d      	cmp	r1, #29
 8009ff4:	d82b      	bhi.n	800a04e <__sflush_r+0xb2>
 8009ff6:	4a2a      	ldr	r2, [pc, #168]	@ (800a0a0 <__sflush_r+0x104>)
 8009ff8:	410a      	asrs	r2, r1
 8009ffa:	07d6      	lsls	r6, r2, #31
 8009ffc:	d427      	bmi.n	800a04e <__sflush_r+0xb2>
 8009ffe:	2200      	movs	r2, #0
 800a000:	6062      	str	r2, [r4, #4]
 800a002:	04d9      	lsls	r1, r3, #19
 800a004:	6922      	ldr	r2, [r4, #16]
 800a006:	6022      	str	r2, [r4, #0]
 800a008:	d504      	bpl.n	800a014 <__sflush_r+0x78>
 800a00a:	1c42      	adds	r2, r0, #1
 800a00c:	d101      	bne.n	800a012 <__sflush_r+0x76>
 800a00e:	682b      	ldr	r3, [r5, #0]
 800a010:	b903      	cbnz	r3, 800a014 <__sflush_r+0x78>
 800a012:	6560      	str	r0, [r4, #84]	@ 0x54
 800a014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a016:	602f      	str	r7, [r5, #0]
 800a018:	b1b9      	cbz	r1, 800a04a <__sflush_r+0xae>
 800a01a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a01e:	4299      	cmp	r1, r3
 800a020:	d002      	beq.n	800a028 <__sflush_r+0x8c>
 800a022:	4628      	mov	r0, r5
 800a024:	f7fe fa2c 	bl	8008480 <_free_r>
 800a028:	2300      	movs	r3, #0
 800a02a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a02c:	e00d      	b.n	800a04a <__sflush_r+0xae>
 800a02e:	2301      	movs	r3, #1
 800a030:	4628      	mov	r0, r5
 800a032:	47b0      	blx	r6
 800a034:	4602      	mov	r2, r0
 800a036:	1c50      	adds	r0, r2, #1
 800a038:	d1c9      	bne.n	8009fce <__sflush_r+0x32>
 800a03a:	682b      	ldr	r3, [r5, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d0c6      	beq.n	8009fce <__sflush_r+0x32>
 800a040:	2b1d      	cmp	r3, #29
 800a042:	d001      	beq.n	800a048 <__sflush_r+0xac>
 800a044:	2b16      	cmp	r3, #22
 800a046:	d11e      	bne.n	800a086 <__sflush_r+0xea>
 800a048:	602f      	str	r7, [r5, #0]
 800a04a:	2000      	movs	r0, #0
 800a04c:	e022      	b.n	800a094 <__sflush_r+0xf8>
 800a04e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a052:	b21b      	sxth	r3, r3
 800a054:	e01b      	b.n	800a08e <__sflush_r+0xf2>
 800a056:	690f      	ldr	r7, [r1, #16]
 800a058:	2f00      	cmp	r7, #0
 800a05a:	d0f6      	beq.n	800a04a <__sflush_r+0xae>
 800a05c:	0793      	lsls	r3, r2, #30
 800a05e:	680e      	ldr	r6, [r1, #0]
 800a060:	bf08      	it	eq
 800a062:	694b      	ldreq	r3, [r1, #20]
 800a064:	600f      	str	r7, [r1, #0]
 800a066:	bf18      	it	ne
 800a068:	2300      	movne	r3, #0
 800a06a:	eba6 0807 	sub.w	r8, r6, r7
 800a06e:	608b      	str	r3, [r1, #8]
 800a070:	f1b8 0f00 	cmp.w	r8, #0
 800a074:	dde9      	ble.n	800a04a <__sflush_r+0xae>
 800a076:	6a21      	ldr	r1, [r4, #32]
 800a078:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a07a:	4643      	mov	r3, r8
 800a07c:	463a      	mov	r2, r7
 800a07e:	4628      	mov	r0, r5
 800a080:	47b0      	blx	r6
 800a082:	2800      	cmp	r0, #0
 800a084:	dc08      	bgt.n	800a098 <__sflush_r+0xfc>
 800a086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a08a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a08e:	81a3      	strh	r3, [r4, #12]
 800a090:	f04f 30ff 	mov.w	r0, #4294967295
 800a094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a098:	4407      	add	r7, r0
 800a09a:	eba8 0800 	sub.w	r8, r8, r0
 800a09e:	e7e7      	b.n	800a070 <__sflush_r+0xd4>
 800a0a0:	dfbffffe 	.word	0xdfbffffe

0800a0a4 <_fflush_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	690b      	ldr	r3, [r1, #16]
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	b913      	cbnz	r3, 800a0b4 <_fflush_r+0x10>
 800a0ae:	2500      	movs	r5, #0
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	b118      	cbz	r0, 800a0be <_fflush_r+0x1a>
 800a0b6:	6a03      	ldr	r3, [r0, #32]
 800a0b8:	b90b      	cbnz	r3, 800a0be <_fflush_r+0x1a>
 800a0ba:	f7fd fa65 	bl	8007588 <__sinit>
 800a0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d0f3      	beq.n	800a0ae <_fflush_r+0xa>
 800a0c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a0c8:	07d0      	lsls	r0, r2, #31
 800a0ca:	d404      	bmi.n	800a0d6 <_fflush_r+0x32>
 800a0cc:	0599      	lsls	r1, r3, #22
 800a0ce:	d402      	bmi.n	800a0d6 <_fflush_r+0x32>
 800a0d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0d2:	f7fd fb70 	bl	80077b6 <__retarget_lock_acquire_recursive>
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	4621      	mov	r1, r4
 800a0da:	f7ff ff5f 	bl	8009f9c <__sflush_r>
 800a0de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0e0:	07da      	lsls	r2, r3, #31
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	d4e4      	bmi.n	800a0b0 <_fflush_r+0xc>
 800a0e6:	89a3      	ldrh	r3, [r4, #12]
 800a0e8:	059b      	lsls	r3, r3, #22
 800a0ea:	d4e1      	bmi.n	800a0b0 <_fflush_r+0xc>
 800a0ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0ee:	f7fd fb63 	bl	80077b8 <__retarget_lock_release_recursive>
 800a0f2:	e7dd      	b.n	800a0b0 <_fflush_r+0xc>

0800a0f4 <memmove>:
 800a0f4:	4288      	cmp	r0, r1
 800a0f6:	b510      	push	{r4, lr}
 800a0f8:	eb01 0402 	add.w	r4, r1, r2
 800a0fc:	d902      	bls.n	800a104 <memmove+0x10>
 800a0fe:	4284      	cmp	r4, r0
 800a100:	4623      	mov	r3, r4
 800a102:	d807      	bhi.n	800a114 <memmove+0x20>
 800a104:	1e43      	subs	r3, r0, #1
 800a106:	42a1      	cmp	r1, r4
 800a108:	d008      	beq.n	800a11c <memmove+0x28>
 800a10a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a10e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a112:	e7f8      	b.n	800a106 <memmove+0x12>
 800a114:	4402      	add	r2, r0
 800a116:	4601      	mov	r1, r0
 800a118:	428a      	cmp	r2, r1
 800a11a:	d100      	bne.n	800a11e <memmove+0x2a>
 800a11c:	bd10      	pop	{r4, pc}
 800a11e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a126:	e7f7      	b.n	800a118 <memmove+0x24>

0800a128 <strncmp>:
 800a128:	b510      	push	{r4, lr}
 800a12a:	b16a      	cbz	r2, 800a148 <strncmp+0x20>
 800a12c:	3901      	subs	r1, #1
 800a12e:	1884      	adds	r4, r0, r2
 800a130:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a134:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a138:	429a      	cmp	r2, r3
 800a13a:	d103      	bne.n	800a144 <strncmp+0x1c>
 800a13c:	42a0      	cmp	r0, r4
 800a13e:	d001      	beq.n	800a144 <strncmp+0x1c>
 800a140:	2a00      	cmp	r2, #0
 800a142:	d1f5      	bne.n	800a130 <strncmp+0x8>
 800a144:	1ad0      	subs	r0, r2, r3
 800a146:	bd10      	pop	{r4, pc}
 800a148:	4610      	mov	r0, r2
 800a14a:	e7fc      	b.n	800a146 <strncmp+0x1e>

0800a14c <_sbrk_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d06      	ldr	r5, [pc, #24]	@ (800a168 <_sbrk_r+0x1c>)
 800a150:	2300      	movs	r3, #0
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	602b      	str	r3, [r5, #0]
 800a158:	f7f7 fba4 	bl	80018a4 <_sbrk>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	d102      	bne.n	800a166 <_sbrk_r+0x1a>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	b103      	cbz	r3, 800a166 <_sbrk_r+0x1a>
 800a164:	6023      	str	r3, [r4, #0]
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	20004de8 	.word	0x20004de8
 800a16c:	00000000 	.word	0x00000000

0800a170 <nan>:
 800a170:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a178 <nan+0x8>
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	00000000 	.word	0x00000000
 800a17c:	7ff80000 	.word	0x7ff80000

0800a180 <__assert_func>:
 800a180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a182:	4614      	mov	r4, r2
 800a184:	461a      	mov	r2, r3
 800a186:	4b09      	ldr	r3, [pc, #36]	@ (800a1ac <__assert_func+0x2c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4605      	mov	r5, r0
 800a18c:	68d8      	ldr	r0, [r3, #12]
 800a18e:	b954      	cbnz	r4, 800a1a6 <__assert_func+0x26>
 800a190:	4b07      	ldr	r3, [pc, #28]	@ (800a1b0 <__assert_func+0x30>)
 800a192:	461c      	mov	r4, r3
 800a194:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a198:	9100      	str	r1, [sp, #0]
 800a19a:	462b      	mov	r3, r5
 800a19c:	4905      	ldr	r1, [pc, #20]	@ (800a1b4 <__assert_func+0x34>)
 800a19e:	f000 fba7 	bl	800a8f0 <fiprintf>
 800a1a2:	f000 fbb7 	bl	800a914 <abort>
 800a1a6:	4b04      	ldr	r3, [pc, #16]	@ (800a1b8 <__assert_func+0x38>)
 800a1a8:	e7f4      	b.n	800a194 <__assert_func+0x14>
 800a1aa:	bf00      	nop
 800a1ac:	2000001c 	.word	0x2000001c
 800a1b0:	0800b2e5 	.word	0x0800b2e5
 800a1b4:	0800b2b7 	.word	0x0800b2b7
 800a1b8:	0800b2aa 	.word	0x0800b2aa

0800a1bc <_calloc_r>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	fba1 5402 	umull	r5, r4, r1, r2
 800a1c2:	b93c      	cbnz	r4, 800a1d4 <_calloc_r+0x18>
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	f7fe f9cf 	bl	8008568 <_malloc_r>
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	b928      	cbnz	r0, 800a1da <_calloc_r+0x1e>
 800a1ce:	2600      	movs	r6, #0
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	220c      	movs	r2, #12
 800a1d6:	6002      	str	r2, [r0, #0]
 800a1d8:	e7f9      	b.n	800a1ce <_calloc_r+0x12>
 800a1da:	462a      	mov	r2, r5
 800a1dc:	4621      	mov	r1, r4
 800a1de:	f7fd fa6c 	bl	80076ba <memset>
 800a1e2:	e7f5      	b.n	800a1d0 <_calloc_r+0x14>

0800a1e4 <rshift>:
 800a1e4:	6903      	ldr	r3, [r0, #16]
 800a1e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a1ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a1f2:	f100 0414 	add.w	r4, r0, #20
 800a1f6:	dd45      	ble.n	800a284 <rshift+0xa0>
 800a1f8:	f011 011f 	ands.w	r1, r1, #31
 800a1fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a200:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a204:	d10c      	bne.n	800a220 <rshift+0x3c>
 800a206:	f100 0710 	add.w	r7, r0, #16
 800a20a:	4629      	mov	r1, r5
 800a20c:	42b1      	cmp	r1, r6
 800a20e:	d334      	bcc.n	800a27a <rshift+0x96>
 800a210:	1a9b      	subs	r3, r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	1eea      	subs	r2, r5, #3
 800a216:	4296      	cmp	r6, r2
 800a218:	bf38      	it	cc
 800a21a:	2300      	movcc	r3, #0
 800a21c:	4423      	add	r3, r4
 800a21e:	e015      	b.n	800a24c <rshift+0x68>
 800a220:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a224:	f1c1 0820 	rsb	r8, r1, #32
 800a228:	40cf      	lsrs	r7, r1
 800a22a:	f105 0e04 	add.w	lr, r5, #4
 800a22e:	46a1      	mov	r9, r4
 800a230:	4576      	cmp	r6, lr
 800a232:	46f4      	mov	ip, lr
 800a234:	d815      	bhi.n	800a262 <rshift+0x7e>
 800a236:	1a9a      	subs	r2, r3, r2
 800a238:	0092      	lsls	r2, r2, #2
 800a23a:	3a04      	subs	r2, #4
 800a23c:	3501      	adds	r5, #1
 800a23e:	42ae      	cmp	r6, r5
 800a240:	bf38      	it	cc
 800a242:	2200      	movcc	r2, #0
 800a244:	18a3      	adds	r3, r4, r2
 800a246:	50a7      	str	r7, [r4, r2]
 800a248:	b107      	cbz	r7, 800a24c <rshift+0x68>
 800a24a:	3304      	adds	r3, #4
 800a24c:	1b1a      	subs	r2, r3, r4
 800a24e:	42a3      	cmp	r3, r4
 800a250:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a254:	bf08      	it	eq
 800a256:	2300      	moveq	r3, #0
 800a258:	6102      	str	r2, [r0, #16]
 800a25a:	bf08      	it	eq
 800a25c:	6143      	streq	r3, [r0, #20]
 800a25e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a262:	f8dc c000 	ldr.w	ip, [ip]
 800a266:	fa0c fc08 	lsl.w	ip, ip, r8
 800a26a:	ea4c 0707 	orr.w	r7, ip, r7
 800a26e:	f849 7b04 	str.w	r7, [r9], #4
 800a272:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a276:	40cf      	lsrs	r7, r1
 800a278:	e7da      	b.n	800a230 <rshift+0x4c>
 800a27a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a27e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a282:	e7c3      	b.n	800a20c <rshift+0x28>
 800a284:	4623      	mov	r3, r4
 800a286:	e7e1      	b.n	800a24c <rshift+0x68>

0800a288 <__hexdig_fun>:
 800a288:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a28c:	2b09      	cmp	r3, #9
 800a28e:	d802      	bhi.n	800a296 <__hexdig_fun+0xe>
 800a290:	3820      	subs	r0, #32
 800a292:	b2c0      	uxtb	r0, r0
 800a294:	4770      	bx	lr
 800a296:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a29a:	2b05      	cmp	r3, #5
 800a29c:	d801      	bhi.n	800a2a2 <__hexdig_fun+0x1a>
 800a29e:	3847      	subs	r0, #71	@ 0x47
 800a2a0:	e7f7      	b.n	800a292 <__hexdig_fun+0xa>
 800a2a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a2a6:	2b05      	cmp	r3, #5
 800a2a8:	d801      	bhi.n	800a2ae <__hexdig_fun+0x26>
 800a2aa:	3827      	subs	r0, #39	@ 0x27
 800a2ac:	e7f1      	b.n	800a292 <__hexdig_fun+0xa>
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	4770      	bx	lr
	...

0800a2b4 <__gethex>:
 800a2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	468a      	mov	sl, r1
 800a2bc:	9302      	str	r3, [sp, #8]
 800a2be:	680b      	ldr	r3, [r1, #0]
 800a2c0:	9001      	str	r0, [sp, #4]
 800a2c2:	4690      	mov	r8, r2
 800a2c4:	1c9c      	adds	r4, r3, #2
 800a2c6:	46a1      	mov	r9, r4
 800a2c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a2cc:	2830      	cmp	r0, #48	@ 0x30
 800a2ce:	d0fa      	beq.n	800a2c6 <__gethex+0x12>
 800a2d0:	eba9 0303 	sub.w	r3, r9, r3
 800a2d4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a2d8:	f7ff ffd6 	bl	800a288 <__hexdig_fun>
 800a2dc:	4605      	mov	r5, r0
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d168      	bne.n	800a3b4 <__gethex+0x100>
 800a2e2:	49a0      	ldr	r1, [pc, #640]	@ (800a564 <__gethex+0x2b0>)
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	4648      	mov	r0, r9
 800a2e8:	f7ff ff1e 	bl	800a128 <strncmp>
 800a2ec:	4607      	mov	r7, r0
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d167      	bne.n	800a3c2 <__gethex+0x10e>
 800a2f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a2f6:	4626      	mov	r6, r4
 800a2f8:	f7ff ffc6 	bl	800a288 <__hexdig_fun>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d062      	beq.n	800a3c6 <__gethex+0x112>
 800a300:	4623      	mov	r3, r4
 800a302:	7818      	ldrb	r0, [r3, #0]
 800a304:	2830      	cmp	r0, #48	@ 0x30
 800a306:	4699      	mov	r9, r3
 800a308:	f103 0301 	add.w	r3, r3, #1
 800a30c:	d0f9      	beq.n	800a302 <__gethex+0x4e>
 800a30e:	f7ff ffbb 	bl	800a288 <__hexdig_fun>
 800a312:	fab0 f580 	clz	r5, r0
 800a316:	096d      	lsrs	r5, r5, #5
 800a318:	f04f 0b01 	mov.w	fp, #1
 800a31c:	464a      	mov	r2, r9
 800a31e:	4616      	mov	r6, r2
 800a320:	3201      	adds	r2, #1
 800a322:	7830      	ldrb	r0, [r6, #0]
 800a324:	f7ff ffb0 	bl	800a288 <__hexdig_fun>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d1f8      	bne.n	800a31e <__gethex+0x6a>
 800a32c:	498d      	ldr	r1, [pc, #564]	@ (800a564 <__gethex+0x2b0>)
 800a32e:	2201      	movs	r2, #1
 800a330:	4630      	mov	r0, r6
 800a332:	f7ff fef9 	bl	800a128 <strncmp>
 800a336:	2800      	cmp	r0, #0
 800a338:	d13f      	bne.n	800a3ba <__gethex+0x106>
 800a33a:	b944      	cbnz	r4, 800a34e <__gethex+0x9a>
 800a33c:	1c74      	adds	r4, r6, #1
 800a33e:	4622      	mov	r2, r4
 800a340:	4616      	mov	r6, r2
 800a342:	3201      	adds	r2, #1
 800a344:	7830      	ldrb	r0, [r6, #0]
 800a346:	f7ff ff9f 	bl	800a288 <__hexdig_fun>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d1f8      	bne.n	800a340 <__gethex+0x8c>
 800a34e:	1ba4      	subs	r4, r4, r6
 800a350:	00a7      	lsls	r7, r4, #2
 800a352:	7833      	ldrb	r3, [r6, #0]
 800a354:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a358:	2b50      	cmp	r3, #80	@ 0x50
 800a35a:	d13e      	bne.n	800a3da <__gethex+0x126>
 800a35c:	7873      	ldrb	r3, [r6, #1]
 800a35e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a360:	d033      	beq.n	800a3ca <__gethex+0x116>
 800a362:	2b2d      	cmp	r3, #45	@ 0x2d
 800a364:	d034      	beq.n	800a3d0 <__gethex+0x11c>
 800a366:	1c71      	adds	r1, r6, #1
 800a368:	2400      	movs	r4, #0
 800a36a:	7808      	ldrb	r0, [r1, #0]
 800a36c:	f7ff ff8c 	bl	800a288 <__hexdig_fun>
 800a370:	1e43      	subs	r3, r0, #1
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b18      	cmp	r3, #24
 800a376:	d830      	bhi.n	800a3da <__gethex+0x126>
 800a378:	f1a0 0210 	sub.w	r2, r0, #16
 800a37c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a380:	f7ff ff82 	bl	800a288 <__hexdig_fun>
 800a384:	f100 3cff 	add.w	ip, r0, #4294967295
 800a388:	fa5f fc8c 	uxtb.w	ip, ip
 800a38c:	f1bc 0f18 	cmp.w	ip, #24
 800a390:	f04f 030a 	mov.w	r3, #10
 800a394:	d91e      	bls.n	800a3d4 <__gethex+0x120>
 800a396:	b104      	cbz	r4, 800a39a <__gethex+0xe6>
 800a398:	4252      	negs	r2, r2
 800a39a:	4417      	add	r7, r2
 800a39c:	f8ca 1000 	str.w	r1, [sl]
 800a3a0:	b1ed      	cbz	r5, 800a3de <__gethex+0x12a>
 800a3a2:	f1bb 0f00 	cmp.w	fp, #0
 800a3a6:	bf0c      	ite	eq
 800a3a8:	2506      	moveq	r5, #6
 800a3aa:	2500      	movne	r5, #0
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	b005      	add	sp, #20
 800a3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b4:	2500      	movs	r5, #0
 800a3b6:	462c      	mov	r4, r5
 800a3b8:	e7b0      	b.n	800a31c <__gethex+0x68>
 800a3ba:	2c00      	cmp	r4, #0
 800a3bc:	d1c7      	bne.n	800a34e <__gethex+0x9a>
 800a3be:	4627      	mov	r7, r4
 800a3c0:	e7c7      	b.n	800a352 <__gethex+0x9e>
 800a3c2:	464e      	mov	r6, r9
 800a3c4:	462f      	mov	r7, r5
 800a3c6:	2501      	movs	r5, #1
 800a3c8:	e7c3      	b.n	800a352 <__gethex+0x9e>
 800a3ca:	2400      	movs	r4, #0
 800a3cc:	1cb1      	adds	r1, r6, #2
 800a3ce:	e7cc      	b.n	800a36a <__gethex+0xb6>
 800a3d0:	2401      	movs	r4, #1
 800a3d2:	e7fb      	b.n	800a3cc <__gethex+0x118>
 800a3d4:	fb03 0002 	mla	r0, r3, r2, r0
 800a3d8:	e7ce      	b.n	800a378 <__gethex+0xc4>
 800a3da:	4631      	mov	r1, r6
 800a3dc:	e7de      	b.n	800a39c <__gethex+0xe8>
 800a3de:	eba6 0309 	sub.w	r3, r6, r9
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	2b07      	cmp	r3, #7
 800a3e8:	dc0a      	bgt.n	800a400 <__gethex+0x14c>
 800a3ea:	9801      	ldr	r0, [sp, #4]
 800a3ec:	f7fe f948 	bl	8008680 <_Balloc>
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	b940      	cbnz	r0, 800a406 <__gethex+0x152>
 800a3f4:	4b5c      	ldr	r3, [pc, #368]	@ (800a568 <__gethex+0x2b4>)
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	21e4      	movs	r1, #228	@ 0xe4
 800a3fa:	485c      	ldr	r0, [pc, #368]	@ (800a56c <__gethex+0x2b8>)
 800a3fc:	f7ff fec0 	bl	800a180 <__assert_func>
 800a400:	3101      	adds	r1, #1
 800a402:	105b      	asrs	r3, r3, #1
 800a404:	e7ef      	b.n	800a3e6 <__gethex+0x132>
 800a406:	f100 0a14 	add.w	sl, r0, #20
 800a40a:	2300      	movs	r3, #0
 800a40c:	4655      	mov	r5, sl
 800a40e:	469b      	mov	fp, r3
 800a410:	45b1      	cmp	r9, r6
 800a412:	d337      	bcc.n	800a484 <__gethex+0x1d0>
 800a414:	f845 bb04 	str.w	fp, [r5], #4
 800a418:	eba5 050a 	sub.w	r5, r5, sl
 800a41c:	10ad      	asrs	r5, r5, #2
 800a41e:	6125      	str	r5, [r4, #16]
 800a420:	4658      	mov	r0, fp
 800a422:	f7fe fa1f 	bl	8008864 <__hi0bits>
 800a426:	016d      	lsls	r5, r5, #5
 800a428:	f8d8 6000 	ldr.w	r6, [r8]
 800a42c:	1a2d      	subs	r5, r5, r0
 800a42e:	42b5      	cmp	r5, r6
 800a430:	dd54      	ble.n	800a4dc <__gethex+0x228>
 800a432:	1bad      	subs	r5, r5, r6
 800a434:	4629      	mov	r1, r5
 800a436:	4620      	mov	r0, r4
 800a438:	f7fe fdb3 	bl	8008fa2 <__any_on>
 800a43c:	4681      	mov	r9, r0
 800a43e:	b178      	cbz	r0, 800a460 <__gethex+0x1ac>
 800a440:	1e6b      	subs	r3, r5, #1
 800a442:	1159      	asrs	r1, r3, #5
 800a444:	f003 021f 	and.w	r2, r3, #31
 800a448:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a44c:	f04f 0901 	mov.w	r9, #1
 800a450:	fa09 f202 	lsl.w	r2, r9, r2
 800a454:	420a      	tst	r2, r1
 800a456:	d003      	beq.n	800a460 <__gethex+0x1ac>
 800a458:	454b      	cmp	r3, r9
 800a45a:	dc36      	bgt.n	800a4ca <__gethex+0x216>
 800a45c:	f04f 0902 	mov.w	r9, #2
 800a460:	4629      	mov	r1, r5
 800a462:	4620      	mov	r0, r4
 800a464:	f7ff febe 	bl	800a1e4 <rshift>
 800a468:	442f      	add	r7, r5
 800a46a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a46e:	42bb      	cmp	r3, r7
 800a470:	da42      	bge.n	800a4f8 <__gethex+0x244>
 800a472:	9801      	ldr	r0, [sp, #4]
 800a474:	4621      	mov	r1, r4
 800a476:	f7fe f943 	bl	8008700 <_Bfree>
 800a47a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a47c:	2300      	movs	r3, #0
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	25a3      	movs	r5, #163	@ 0xa3
 800a482:	e793      	b.n	800a3ac <__gethex+0xf8>
 800a484:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a488:	2a2e      	cmp	r2, #46	@ 0x2e
 800a48a:	d012      	beq.n	800a4b2 <__gethex+0x1fe>
 800a48c:	2b20      	cmp	r3, #32
 800a48e:	d104      	bne.n	800a49a <__gethex+0x1e6>
 800a490:	f845 bb04 	str.w	fp, [r5], #4
 800a494:	f04f 0b00 	mov.w	fp, #0
 800a498:	465b      	mov	r3, fp
 800a49a:	7830      	ldrb	r0, [r6, #0]
 800a49c:	9303      	str	r3, [sp, #12]
 800a49e:	f7ff fef3 	bl	800a288 <__hexdig_fun>
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	f000 000f 	and.w	r0, r0, #15
 800a4a8:	4098      	lsls	r0, r3
 800a4aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	e7ae      	b.n	800a410 <__gethex+0x15c>
 800a4b2:	45b1      	cmp	r9, r6
 800a4b4:	d8ea      	bhi.n	800a48c <__gethex+0x1d8>
 800a4b6:	492b      	ldr	r1, [pc, #172]	@ (800a564 <__gethex+0x2b0>)
 800a4b8:	9303      	str	r3, [sp, #12]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f7ff fe33 	bl	800a128 <strncmp>
 800a4c2:	9b03      	ldr	r3, [sp, #12]
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d1e1      	bne.n	800a48c <__gethex+0x1d8>
 800a4c8:	e7a2      	b.n	800a410 <__gethex+0x15c>
 800a4ca:	1ea9      	subs	r1, r5, #2
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f7fe fd68 	bl	8008fa2 <__any_on>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d0c2      	beq.n	800a45c <__gethex+0x1a8>
 800a4d6:	f04f 0903 	mov.w	r9, #3
 800a4da:	e7c1      	b.n	800a460 <__gethex+0x1ac>
 800a4dc:	da09      	bge.n	800a4f2 <__gethex+0x23e>
 800a4de:	1b75      	subs	r5, r6, r5
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	9801      	ldr	r0, [sp, #4]
 800a4e4:	462a      	mov	r2, r5
 800a4e6:	f7fe fb23 	bl	8008b30 <__lshift>
 800a4ea:	1b7f      	subs	r7, r7, r5
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	f100 0a14 	add.w	sl, r0, #20
 800a4f2:	f04f 0900 	mov.w	r9, #0
 800a4f6:	e7b8      	b.n	800a46a <__gethex+0x1b6>
 800a4f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a4fc:	42bd      	cmp	r5, r7
 800a4fe:	dd6f      	ble.n	800a5e0 <__gethex+0x32c>
 800a500:	1bed      	subs	r5, r5, r7
 800a502:	42ae      	cmp	r6, r5
 800a504:	dc34      	bgt.n	800a570 <__gethex+0x2bc>
 800a506:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d022      	beq.n	800a554 <__gethex+0x2a0>
 800a50e:	2b03      	cmp	r3, #3
 800a510:	d024      	beq.n	800a55c <__gethex+0x2a8>
 800a512:	2b01      	cmp	r3, #1
 800a514:	d115      	bne.n	800a542 <__gethex+0x28e>
 800a516:	42ae      	cmp	r6, r5
 800a518:	d113      	bne.n	800a542 <__gethex+0x28e>
 800a51a:	2e01      	cmp	r6, #1
 800a51c:	d10b      	bne.n	800a536 <__gethex+0x282>
 800a51e:	9a02      	ldr	r2, [sp, #8]
 800a520:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a524:	6013      	str	r3, [r2, #0]
 800a526:	2301      	movs	r3, #1
 800a528:	6123      	str	r3, [r4, #16]
 800a52a:	f8ca 3000 	str.w	r3, [sl]
 800a52e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a530:	2562      	movs	r5, #98	@ 0x62
 800a532:	601c      	str	r4, [r3, #0]
 800a534:	e73a      	b.n	800a3ac <__gethex+0xf8>
 800a536:	1e71      	subs	r1, r6, #1
 800a538:	4620      	mov	r0, r4
 800a53a:	f7fe fd32 	bl	8008fa2 <__any_on>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d1ed      	bne.n	800a51e <__gethex+0x26a>
 800a542:	9801      	ldr	r0, [sp, #4]
 800a544:	4621      	mov	r1, r4
 800a546:	f7fe f8db 	bl	8008700 <_Bfree>
 800a54a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a54c:	2300      	movs	r3, #0
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	2550      	movs	r5, #80	@ 0x50
 800a552:	e72b      	b.n	800a3ac <__gethex+0xf8>
 800a554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1f3      	bne.n	800a542 <__gethex+0x28e>
 800a55a:	e7e0      	b.n	800a51e <__gethex+0x26a>
 800a55c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1dd      	bne.n	800a51e <__gethex+0x26a>
 800a562:	e7ee      	b.n	800a542 <__gethex+0x28e>
 800a564:	0800b138 	.word	0x0800b138
 800a568:	0800afd1 	.word	0x0800afd1
 800a56c:	0800b2e6 	.word	0x0800b2e6
 800a570:	1e6f      	subs	r7, r5, #1
 800a572:	f1b9 0f00 	cmp.w	r9, #0
 800a576:	d130      	bne.n	800a5da <__gethex+0x326>
 800a578:	b127      	cbz	r7, 800a584 <__gethex+0x2d0>
 800a57a:	4639      	mov	r1, r7
 800a57c:	4620      	mov	r0, r4
 800a57e:	f7fe fd10 	bl	8008fa2 <__any_on>
 800a582:	4681      	mov	r9, r0
 800a584:	117a      	asrs	r2, r7, #5
 800a586:	2301      	movs	r3, #1
 800a588:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a58c:	f007 071f 	and.w	r7, r7, #31
 800a590:	40bb      	lsls	r3, r7
 800a592:	4213      	tst	r3, r2
 800a594:	4629      	mov	r1, r5
 800a596:	4620      	mov	r0, r4
 800a598:	bf18      	it	ne
 800a59a:	f049 0902 	orrne.w	r9, r9, #2
 800a59e:	f7ff fe21 	bl	800a1e4 <rshift>
 800a5a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a5a6:	1b76      	subs	r6, r6, r5
 800a5a8:	2502      	movs	r5, #2
 800a5aa:	f1b9 0f00 	cmp.w	r9, #0
 800a5ae:	d047      	beq.n	800a640 <__gethex+0x38c>
 800a5b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d015      	beq.n	800a5e4 <__gethex+0x330>
 800a5b8:	2b03      	cmp	r3, #3
 800a5ba:	d017      	beq.n	800a5ec <__gethex+0x338>
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d109      	bne.n	800a5d4 <__gethex+0x320>
 800a5c0:	f019 0f02 	tst.w	r9, #2
 800a5c4:	d006      	beq.n	800a5d4 <__gethex+0x320>
 800a5c6:	f8da 3000 	ldr.w	r3, [sl]
 800a5ca:	ea49 0903 	orr.w	r9, r9, r3
 800a5ce:	f019 0f01 	tst.w	r9, #1
 800a5d2:	d10e      	bne.n	800a5f2 <__gethex+0x33e>
 800a5d4:	f045 0510 	orr.w	r5, r5, #16
 800a5d8:	e032      	b.n	800a640 <__gethex+0x38c>
 800a5da:	f04f 0901 	mov.w	r9, #1
 800a5de:	e7d1      	b.n	800a584 <__gethex+0x2d0>
 800a5e0:	2501      	movs	r5, #1
 800a5e2:	e7e2      	b.n	800a5aa <__gethex+0x2f6>
 800a5e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5e6:	f1c3 0301 	rsb	r3, r3, #1
 800a5ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0f0      	beq.n	800a5d4 <__gethex+0x320>
 800a5f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a5f6:	f104 0314 	add.w	r3, r4, #20
 800a5fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a5fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a602:	f04f 0c00 	mov.w	ip, #0
 800a606:	4618      	mov	r0, r3
 800a608:	f853 2b04 	ldr.w	r2, [r3], #4
 800a60c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a610:	d01b      	beq.n	800a64a <__gethex+0x396>
 800a612:	3201      	adds	r2, #1
 800a614:	6002      	str	r2, [r0, #0]
 800a616:	2d02      	cmp	r5, #2
 800a618:	f104 0314 	add.w	r3, r4, #20
 800a61c:	d13c      	bne.n	800a698 <__gethex+0x3e4>
 800a61e:	f8d8 2000 	ldr.w	r2, [r8]
 800a622:	3a01      	subs	r2, #1
 800a624:	42b2      	cmp	r2, r6
 800a626:	d109      	bne.n	800a63c <__gethex+0x388>
 800a628:	1171      	asrs	r1, r6, #5
 800a62a:	2201      	movs	r2, #1
 800a62c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a630:	f006 061f 	and.w	r6, r6, #31
 800a634:	fa02 f606 	lsl.w	r6, r2, r6
 800a638:	421e      	tst	r6, r3
 800a63a:	d13a      	bne.n	800a6b2 <__gethex+0x3fe>
 800a63c:	f045 0520 	orr.w	r5, r5, #32
 800a640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a642:	601c      	str	r4, [r3, #0]
 800a644:	9b02      	ldr	r3, [sp, #8]
 800a646:	601f      	str	r7, [r3, #0]
 800a648:	e6b0      	b.n	800a3ac <__gethex+0xf8>
 800a64a:	4299      	cmp	r1, r3
 800a64c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a650:	d8d9      	bhi.n	800a606 <__gethex+0x352>
 800a652:	68a3      	ldr	r3, [r4, #8]
 800a654:	459b      	cmp	fp, r3
 800a656:	db17      	blt.n	800a688 <__gethex+0x3d4>
 800a658:	6861      	ldr	r1, [r4, #4]
 800a65a:	9801      	ldr	r0, [sp, #4]
 800a65c:	3101      	adds	r1, #1
 800a65e:	f7fe f80f 	bl	8008680 <_Balloc>
 800a662:	4681      	mov	r9, r0
 800a664:	b918      	cbnz	r0, 800a66e <__gethex+0x3ba>
 800a666:	4b1a      	ldr	r3, [pc, #104]	@ (800a6d0 <__gethex+0x41c>)
 800a668:	4602      	mov	r2, r0
 800a66a:	2184      	movs	r1, #132	@ 0x84
 800a66c:	e6c5      	b.n	800a3fa <__gethex+0x146>
 800a66e:	6922      	ldr	r2, [r4, #16]
 800a670:	3202      	adds	r2, #2
 800a672:	f104 010c 	add.w	r1, r4, #12
 800a676:	0092      	lsls	r2, r2, #2
 800a678:	300c      	adds	r0, #12
 800a67a:	f7fd f89e 	bl	80077ba <memcpy>
 800a67e:	4621      	mov	r1, r4
 800a680:	9801      	ldr	r0, [sp, #4]
 800a682:	f7fe f83d 	bl	8008700 <_Bfree>
 800a686:	464c      	mov	r4, r9
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	1c5a      	adds	r2, r3, #1
 800a68c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a690:	6122      	str	r2, [r4, #16]
 800a692:	2201      	movs	r2, #1
 800a694:	615a      	str	r2, [r3, #20]
 800a696:	e7be      	b.n	800a616 <__gethex+0x362>
 800a698:	6922      	ldr	r2, [r4, #16]
 800a69a:	455a      	cmp	r2, fp
 800a69c:	dd0b      	ble.n	800a6b6 <__gethex+0x402>
 800a69e:	2101      	movs	r1, #1
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f7ff fd9f 	bl	800a1e4 <rshift>
 800a6a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6aa:	3701      	adds	r7, #1
 800a6ac:	42bb      	cmp	r3, r7
 800a6ae:	f6ff aee0 	blt.w	800a472 <__gethex+0x1be>
 800a6b2:	2501      	movs	r5, #1
 800a6b4:	e7c2      	b.n	800a63c <__gethex+0x388>
 800a6b6:	f016 061f 	ands.w	r6, r6, #31
 800a6ba:	d0fa      	beq.n	800a6b2 <__gethex+0x3fe>
 800a6bc:	4453      	add	r3, sl
 800a6be:	f1c6 0620 	rsb	r6, r6, #32
 800a6c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a6c6:	f7fe f8cd 	bl	8008864 <__hi0bits>
 800a6ca:	42b0      	cmp	r0, r6
 800a6cc:	dbe7      	blt.n	800a69e <__gethex+0x3ea>
 800a6ce:	e7f0      	b.n	800a6b2 <__gethex+0x3fe>
 800a6d0:	0800afd1 	.word	0x0800afd1

0800a6d4 <L_shift>:
 800a6d4:	f1c2 0208 	rsb	r2, r2, #8
 800a6d8:	0092      	lsls	r2, r2, #2
 800a6da:	b570      	push	{r4, r5, r6, lr}
 800a6dc:	f1c2 0620 	rsb	r6, r2, #32
 800a6e0:	6843      	ldr	r3, [r0, #4]
 800a6e2:	6804      	ldr	r4, [r0, #0]
 800a6e4:	fa03 f506 	lsl.w	r5, r3, r6
 800a6e8:	432c      	orrs	r4, r5
 800a6ea:	40d3      	lsrs	r3, r2
 800a6ec:	6004      	str	r4, [r0, #0]
 800a6ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800a6f2:	4288      	cmp	r0, r1
 800a6f4:	d3f4      	bcc.n	800a6e0 <L_shift+0xc>
 800a6f6:	bd70      	pop	{r4, r5, r6, pc}

0800a6f8 <__match>:
 800a6f8:	b530      	push	{r4, r5, lr}
 800a6fa:	6803      	ldr	r3, [r0, #0]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a702:	b914      	cbnz	r4, 800a70a <__match+0x12>
 800a704:	6003      	str	r3, [r0, #0]
 800a706:	2001      	movs	r0, #1
 800a708:	bd30      	pop	{r4, r5, pc}
 800a70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a70e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a712:	2d19      	cmp	r5, #25
 800a714:	bf98      	it	ls
 800a716:	3220      	addls	r2, #32
 800a718:	42a2      	cmp	r2, r4
 800a71a:	d0f0      	beq.n	800a6fe <__match+0x6>
 800a71c:	2000      	movs	r0, #0
 800a71e:	e7f3      	b.n	800a708 <__match+0x10>

0800a720 <__hexnan>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	680b      	ldr	r3, [r1, #0]
 800a726:	6801      	ldr	r1, [r0, #0]
 800a728:	115e      	asrs	r6, r3, #5
 800a72a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a72e:	f013 031f 	ands.w	r3, r3, #31
 800a732:	b087      	sub	sp, #28
 800a734:	bf18      	it	ne
 800a736:	3604      	addne	r6, #4
 800a738:	2500      	movs	r5, #0
 800a73a:	1f37      	subs	r7, r6, #4
 800a73c:	4682      	mov	sl, r0
 800a73e:	4690      	mov	r8, r2
 800a740:	9301      	str	r3, [sp, #4]
 800a742:	f846 5c04 	str.w	r5, [r6, #-4]
 800a746:	46b9      	mov	r9, r7
 800a748:	463c      	mov	r4, r7
 800a74a:	9502      	str	r5, [sp, #8]
 800a74c:	46ab      	mov	fp, r5
 800a74e:	784a      	ldrb	r2, [r1, #1]
 800a750:	1c4b      	adds	r3, r1, #1
 800a752:	9303      	str	r3, [sp, #12]
 800a754:	b342      	cbz	r2, 800a7a8 <__hexnan+0x88>
 800a756:	4610      	mov	r0, r2
 800a758:	9105      	str	r1, [sp, #20]
 800a75a:	9204      	str	r2, [sp, #16]
 800a75c:	f7ff fd94 	bl	800a288 <__hexdig_fun>
 800a760:	2800      	cmp	r0, #0
 800a762:	d151      	bne.n	800a808 <__hexnan+0xe8>
 800a764:	9a04      	ldr	r2, [sp, #16]
 800a766:	9905      	ldr	r1, [sp, #20]
 800a768:	2a20      	cmp	r2, #32
 800a76a:	d818      	bhi.n	800a79e <__hexnan+0x7e>
 800a76c:	9b02      	ldr	r3, [sp, #8]
 800a76e:	459b      	cmp	fp, r3
 800a770:	dd13      	ble.n	800a79a <__hexnan+0x7a>
 800a772:	454c      	cmp	r4, r9
 800a774:	d206      	bcs.n	800a784 <__hexnan+0x64>
 800a776:	2d07      	cmp	r5, #7
 800a778:	dc04      	bgt.n	800a784 <__hexnan+0x64>
 800a77a:	462a      	mov	r2, r5
 800a77c:	4649      	mov	r1, r9
 800a77e:	4620      	mov	r0, r4
 800a780:	f7ff ffa8 	bl	800a6d4 <L_shift>
 800a784:	4544      	cmp	r4, r8
 800a786:	d952      	bls.n	800a82e <__hexnan+0x10e>
 800a788:	2300      	movs	r3, #0
 800a78a:	f1a4 0904 	sub.w	r9, r4, #4
 800a78e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a792:	f8cd b008 	str.w	fp, [sp, #8]
 800a796:	464c      	mov	r4, r9
 800a798:	461d      	mov	r5, r3
 800a79a:	9903      	ldr	r1, [sp, #12]
 800a79c:	e7d7      	b.n	800a74e <__hexnan+0x2e>
 800a79e:	2a29      	cmp	r2, #41	@ 0x29
 800a7a0:	d157      	bne.n	800a852 <__hexnan+0x132>
 800a7a2:	3102      	adds	r1, #2
 800a7a4:	f8ca 1000 	str.w	r1, [sl]
 800a7a8:	f1bb 0f00 	cmp.w	fp, #0
 800a7ac:	d051      	beq.n	800a852 <__hexnan+0x132>
 800a7ae:	454c      	cmp	r4, r9
 800a7b0:	d206      	bcs.n	800a7c0 <__hexnan+0xa0>
 800a7b2:	2d07      	cmp	r5, #7
 800a7b4:	dc04      	bgt.n	800a7c0 <__hexnan+0xa0>
 800a7b6:	462a      	mov	r2, r5
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f7ff ff8a 	bl	800a6d4 <L_shift>
 800a7c0:	4544      	cmp	r4, r8
 800a7c2:	d936      	bls.n	800a832 <__hexnan+0x112>
 800a7c4:	f1a8 0204 	sub.w	r2, r8, #4
 800a7c8:	4623      	mov	r3, r4
 800a7ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800a7ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800a7d2:	429f      	cmp	r7, r3
 800a7d4:	d2f9      	bcs.n	800a7ca <__hexnan+0xaa>
 800a7d6:	1b3b      	subs	r3, r7, r4
 800a7d8:	f023 0303 	bic.w	r3, r3, #3
 800a7dc:	3304      	adds	r3, #4
 800a7de:	3401      	adds	r4, #1
 800a7e0:	3e03      	subs	r6, #3
 800a7e2:	42b4      	cmp	r4, r6
 800a7e4:	bf88      	it	hi
 800a7e6:	2304      	movhi	r3, #4
 800a7e8:	4443      	add	r3, r8
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f843 2b04 	str.w	r2, [r3], #4
 800a7f0:	429f      	cmp	r7, r3
 800a7f2:	d2fb      	bcs.n	800a7ec <__hexnan+0xcc>
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	b91b      	cbnz	r3, 800a800 <__hexnan+0xe0>
 800a7f8:	4547      	cmp	r7, r8
 800a7fa:	d128      	bne.n	800a84e <__hexnan+0x12e>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	603b      	str	r3, [r7, #0]
 800a800:	2005      	movs	r0, #5
 800a802:	b007      	add	sp, #28
 800a804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a808:	3501      	adds	r5, #1
 800a80a:	2d08      	cmp	r5, #8
 800a80c:	f10b 0b01 	add.w	fp, fp, #1
 800a810:	dd06      	ble.n	800a820 <__hexnan+0x100>
 800a812:	4544      	cmp	r4, r8
 800a814:	d9c1      	bls.n	800a79a <__hexnan+0x7a>
 800a816:	2300      	movs	r3, #0
 800a818:	f844 3c04 	str.w	r3, [r4, #-4]
 800a81c:	2501      	movs	r5, #1
 800a81e:	3c04      	subs	r4, #4
 800a820:	6822      	ldr	r2, [r4, #0]
 800a822:	f000 000f 	and.w	r0, r0, #15
 800a826:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a82a:	6020      	str	r0, [r4, #0]
 800a82c:	e7b5      	b.n	800a79a <__hexnan+0x7a>
 800a82e:	2508      	movs	r5, #8
 800a830:	e7b3      	b.n	800a79a <__hexnan+0x7a>
 800a832:	9b01      	ldr	r3, [sp, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d0dd      	beq.n	800a7f4 <__hexnan+0xd4>
 800a838:	f1c3 0320 	rsb	r3, r3, #32
 800a83c:	f04f 32ff 	mov.w	r2, #4294967295
 800a840:	40da      	lsrs	r2, r3
 800a842:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a846:	4013      	ands	r3, r2
 800a848:	f846 3c04 	str.w	r3, [r6, #-4]
 800a84c:	e7d2      	b.n	800a7f4 <__hexnan+0xd4>
 800a84e:	3f04      	subs	r7, #4
 800a850:	e7d0      	b.n	800a7f4 <__hexnan+0xd4>
 800a852:	2004      	movs	r0, #4
 800a854:	e7d5      	b.n	800a802 <__hexnan+0xe2>

0800a856 <__ascii_mbtowc>:
 800a856:	b082      	sub	sp, #8
 800a858:	b901      	cbnz	r1, 800a85c <__ascii_mbtowc+0x6>
 800a85a:	a901      	add	r1, sp, #4
 800a85c:	b142      	cbz	r2, 800a870 <__ascii_mbtowc+0x1a>
 800a85e:	b14b      	cbz	r3, 800a874 <__ascii_mbtowc+0x1e>
 800a860:	7813      	ldrb	r3, [r2, #0]
 800a862:	600b      	str	r3, [r1, #0]
 800a864:	7812      	ldrb	r2, [r2, #0]
 800a866:	1e10      	subs	r0, r2, #0
 800a868:	bf18      	it	ne
 800a86a:	2001      	movne	r0, #1
 800a86c:	b002      	add	sp, #8
 800a86e:	4770      	bx	lr
 800a870:	4610      	mov	r0, r2
 800a872:	e7fb      	b.n	800a86c <__ascii_mbtowc+0x16>
 800a874:	f06f 0001 	mvn.w	r0, #1
 800a878:	e7f8      	b.n	800a86c <__ascii_mbtowc+0x16>

0800a87a <_realloc_r>:
 800a87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a87e:	4680      	mov	r8, r0
 800a880:	4615      	mov	r5, r2
 800a882:	460c      	mov	r4, r1
 800a884:	b921      	cbnz	r1, 800a890 <_realloc_r+0x16>
 800a886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a88a:	4611      	mov	r1, r2
 800a88c:	f7fd be6c 	b.w	8008568 <_malloc_r>
 800a890:	b92a      	cbnz	r2, 800a89e <_realloc_r+0x24>
 800a892:	f7fd fdf5 	bl	8008480 <_free_r>
 800a896:	2400      	movs	r4, #0
 800a898:	4620      	mov	r0, r4
 800a89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a89e:	f000 f840 	bl	800a922 <_malloc_usable_size_r>
 800a8a2:	4285      	cmp	r5, r0
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	d802      	bhi.n	800a8ae <_realloc_r+0x34>
 800a8a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8ac:	d8f4      	bhi.n	800a898 <_realloc_r+0x1e>
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	f7fd fe59 	bl	8008568 <_malloc_r>
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d0ec      	beq.n	800a896 <_realloc_r+0x1c>
 800a8bc:	42b5      	cmp	r5, r6
 800a8be:	462a      	mov	r2, r5
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	bf28      	it	cs
 800a8c4:	4632      	movcs	r2, r6
 800a8c6:	f7fc ff78 	bl	80077ba <memcpy>
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	4640      	mov	r0, r8
 800a8ce:	f7fd fdd7 	bl	8008480 <_free_r>
 800a8d2:	463c      	mov	r4, r7
 800a8d4:	e7e0      	b.n	800a898 <_realloc_r+0x1e>

0800a8d6 <__ascii_wctomb>:
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	b141      	cbz	r1, 800a8ee <__ascii_wctomb+0x18>
 800a8dc:	2aff      	cmp	r2, #255	@ 0xff
 800a8de:	d904      	bls.n	800a8ea <__ascii_wctomb+0x14>
 800a8e0:	228a      	movs	r2, #138	@ 0x8a
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e8:	4770      	bx	lr
 800a8ea:	700a      	strb	r2, [r1, #0]
 800a8ec:	2001      	movs	r0, #1
 800a8ee:	4770      	bx	lr

0800a8f0 <fiprintf>:
 800a8f0:	b40e      	push	{r1, r2, r3}
 800a8f2:	b503      	push	{r0, r1, lr}
 800a8f4:	4601      	mov	r1, r0
 800a8f6:	ab03      	add	r3, sp, #12
 800a8f8:	4805      	ldr	r0, [pc, #20]	@ (800a910 <fiprintf+0x20>)
 800a8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8fe:	6800      	ldr	r0, [r0, #0]
 800a900:	9301      	str	r3, [sp, #4]
 800a902:	f000 f83f 	bl	800a984 <_vfiprintf_r>
 800a906:	b002      	add	sp, #8
 800a908:	f85d eb04 	ldr.w	lr, [sp], #4
 800a90c:	b003      	add	sp, #12
 800a90e:	4770      	bx	lr
 800a910:	2000001c 	.word	0x2000001c

0800a914 <abort>:
 800a914:	b508      	push	{r3, lr}
 800a916:	2006      	movs	r0, #6
 800a918:	f000 fa08 	bl	800ad2c <raise>
 800a91c:	2001      	movs	r0, #1
 800a91e:	f7f6 ff49 	bl	80017b4 <_exit>

0800a922 <_malloc_usable_size_r>:
 800a922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a926:	1f18      	subs	r0, r3, #4
 800a928:	2b00      	cmp	r3, #0
 800a92a:	bfbc      	itt	lt
 800a92c:	580b      	ldrlt	r3, [r1, r0]
 800a92e:	18c0      	addlt	r0, r0, r3
 800a930:	4770      	bx	lr

0800a932 <__sfputc_r>:
 800a932:	6893      	ldr	r3, [r2, #8]
 800a934:	3b01      	subs	r3, #1
 800a936:	2b00      	cmp	r3, #0
 800a938:	b410      	push	{r4}
 800a93a:	6093      	str	r3, [r2, #8]
 800a93c:	da08      	bge.n	800a950 <__sfputc_r+0x1e>
 800a93e:	6994      	ldr	r4, [r2, #24]
 800a940:	42a3      	cmp	r3, r4
 800a942:	db01      	blt.n	800a948 <__sfputc_r+0x16>
 800a944:	290a      	cmp	r1, #10
 800a946:	d103      	bne.n	800a950 <__sfputc_r+0x1e>
 800a948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a94c:	f000 b932 	b.w	800abb4 <__swbuf_r>
 800a950:	6813      	ldr	r3, [r2, #0]
 800a952:	1c58      	adds	r0, r3, #1
 800a954:	6010      	str	r0, [r2, #0]
 800a956:	7019      	strb	r1, [r3, #0]
 800a958:	4608      	mov	r0, r1
 800a95a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <__sfputs_r>:
 800a960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a962:	4606      	mov	r6, r0
 800a964:	460f      	mov	r7, r1
 800a966:	4614      	mov	r4, r2
 800a968:	18d5      	adds	r5, r2, r3
 800a96a:	42ac      	cmp	r4, r5
 800a96c:	d101      	bne.n	800a972 <__sfputs_r+0x12>
 800a96e:	2000      	movs	r0, #0
 800a970:	e007      	b.n	800a982 <__sfputs_r+0x22>
 800a972:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a976:	463a      	mov	r2, r7
 800a978:	4630      	mov	r0, r6
 800a97a:	f7ff ffda 	bl	800a932 <__sfputc_r>
 800a97e:	1c43      	adds	r3, r0, #1
 800a980:	d1f3      	bne.n	800a96a <__sfputs_r+0xa>
 800a982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a984 <_vfiprintf_r>:
 800a984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a988:	460d      	mov	r5, r1
 800a98a:	b09d      	sub	sp, #116	@ 0x74
 800a98c:	4614      	mov	r4, r2
 800a98e:	4698      	mov	r8, r3
 800a990:	4606      	mov	r6, r0
 800a992:	b118      	cbz	r0, 800a99c <_vfiprintf_r+0x18>
 800a994:	6a03      	ldr	r3, [r0, #32]
 800a996:	b90b      	cbnz	r3, 800a99c <_vfiprintf_r+0x18>
 800a998:	f7fc fdf6 	bl	8007588 <__sinit>
 800a99c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a99e:	07d9      	lsls	r1, r3, #31
 800a9a0:	d405      	bmi.n	800a9ae <_vfiprintf_r+0x2a>
 800a9a2:	89ab      	ldrh	r3, [r5, #12]
 800a9a4:	059a      	lsls	r2, r3, #22
 800a9a6:	d402      	bmi.n	800a9ae <_vfiprintf_r+0x2a>
 800a9a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9aa:	f7fc ff04 	bl	80077b6 <__retarget_lock_acquire_recursive>
 800a9ae:	89ab      	ldrh	r3, [r5, #12]
 800a9b0:	071b      	lsls	r3, r3, #28
 800a9b2:	d501      	bpl.n	800a9b8 <_vfiprintf_r+0x34>
 800a9b4:	692b      	ldr	r3, [r5, #16]
 800a9b6:	b99b      	cbnz	r3, 800a9e0 <_vfiprintf_r+0x5c>
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f000 f938 	bl	800ac30 <__swsetup_r>
 800a9c0:	b170      	cbz	r0, 800a9e0 <_vfiprintf_r+0x5c>
 800a9c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9c4:	07dc      	lsls	r4, r3, #31
 800a9c6:	d504      	bpl.n	800a9d2 <_vfiprintf_r+0x4e>
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9cc:	b01d      	add	sp, #116	@ 0x74
 800a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d2:	89ab      	ldrh	r3, [r5, #12]
 800a9d4:	0598      	lsls	r0, r3, #22
 800a9d6:	d4f7      	bmi.n	800a9c8 <_vfiprintf_r+0x44>
 800a9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9da:	f7fc feed 	bl	80077b8 <__retarget_lock_release_recursive>
 800a9de:	e7f3      	b.n	800a9c8 <_vfiprintf_r+0x44>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e4:	2320      	movs	r3, #32
 800a9e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9ee:	2330      	movs	r3, #48	@ 0x30
 800a9f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aba0 <_vfiprintf_r+0x21c>
 800a9f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9f8:	f04f 0901 	mov.w	r9, #1
 800a9fc:	4623      	mov	r3, r4
 800a9fe:	469a      	mov	sl, r3
 800aa00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa04:	b10a      	cbz	r2, 800aa0a <_vfiprintf_r+0x86>
 800aa06:	2a25      	cmp	r2, #37	@ 0x25
 800aa08:	d1f9      	bne.n	800a9fe <_vfiprintf_r+0x7a>
 800aa0a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa0e:	d00b      	beq.n	800aa28 <_vfiprintf_r+0xa4>
 800aa10:	465b      	mov	r3, fp
 800aa12:	4622      	mov	r2, r4
 800aa14:	4629      	mov	r1, r5
 800aa16:	4630      	mov	r0, r6
 800aa18:	f7ff ffa2 	bl	800a960 <__sfputs_r>
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	f000 80a7 	beq.w	800ab70 <_vfiprintf_r+0x1ec>
 800aa22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa24:	445a      	add	r2, fp
 800aa26:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa28:	f89a 3000 	ldrb.w	r3, [sl]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 809f 	beq.w	800ab70 <_vfiprintf_r+0x1ec>
 800aa32:	2300      	movs	r3, #0
 800aa34:	f04f 32ff 	mov.w	r2, #4294967295
 800aa38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa3c:	f10a 0a01 	add.w	sl, sl, #1
 800aa40:	9304      	str	r3, [sp, #16]
 800aa42:	9307      	str	r3, [sp, #28]
 800aa44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa48:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa4a:	4654      	mov	r4, sl
 800aa4c:	2205      	movs	r2, #5
 800aa4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa52:	4853      	ldr	r0, [pc, #332]	@ (800aba0 <_vfiprintf_r+0x21c>)
 800aa54:	f7f5 fbc4 	bl	80001e0 <memchr>
 800aa58:	9a04      	ldr	r2, [sp, #16]
 800aa5a:	b9d8      	cbnz	r0, 800aa94 <_vfiprintf_r+0x110>
 800aa5c:	06d1      	lsls	r1, r2, #27
 800aa5e:	bf44      	itt	mi
 800aa60:	2320      	movmi	r3, #32
 800aa62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa66:	0713      	lsls	r3, r2, #28
 800aa68:	bf44      	itt	mi
 800aa6a:	232b      	movmi	r3, #43	@ 0x2b
 800aa6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa70:	f89a 3000 	ldrb.w	r3, [sl]
 800aa74:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa76:	d015      	beq.n	800aaa4 <_vfiprintf_r+0x120>
 800aa78:	9a07      	ldr	r2, [sp, #28]
 800aa7a:	4654      	mov	r4, sl
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	f04f 0c0a 	mov.w	ip, #10
 800aa82:	4621      	mov	r1, r4
 800aa84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa88:	3b30      	subs	r3, #48	@ 0x30
 800aa8a:	2b09      	cmp	r3, #9
 800aa8c:	d94b      	bls.n	800ab26 <_vfiprintf_r+0x1a2>
 800aa8e:	b1b0      	cbz	r0, 800aabe <_vfiprintf_r+0x13a>
 800aa90:	9207      	str	r2, [sp, #28]
 800aa92:	e014      	b.n	800aabe <_vfiprintf_r+0x13a>
 800aa94:	eba0 0308 	sub.w	r3, r0, r8
 800aa98:	fa09 f303 	lsl.w	r3, r9, r3
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	9304      	str	r3, [sp, #16]
 800aaa0:	46a2      	mov	sl, r4
 800aaa2:	e7d2      	b.n	800aa4a <_vfiprintf_r+0xc6>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	1d19      	adds	r1, r3, #4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	9103      	str	r1, [sp, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bfbb      	ittet	lt
 800aab0:	425b      	neglt	r3, r3
 800aab2:	f042 0202 	orrlt.w	r2, r2, #2
 800aab6:	9307      	strge	r3, [sp, #28]
 800aab8:	9307      	strlt	r3, [sp, #28]
 800aaba:	bfb8      	it	lt
 800aabc:	9204      	strlt	r2, [sp, #16]
 800aabe:	7823      	ldrb	r3, [r4, #0]
 800aac0:	2b2e      	cmp	r3, #46	@ 0x2e
 800aac2:	d10a      	bne.n	800aada <_vfiprintf_r+0x156>
 800aac4:	7863      	ldrb	r3, [r4, #1]
 800aac6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aac8:	d132      	bne.n	800ab30 <_vfiprintf_r+0x1ac>
 800aaca:	9b03      	ldr	r3, [sp, #12]
 800aacc:	1d1a      	adds	r2, r3, #4
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	9203      	str	r2, [sp, #12]
 800aad2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aad6:	3402      	adds	r4, #2
 800aad8:	9305      	str	r3, [sp, #20]
 800aada:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abb0 <_vfiprintf_r+0x22c>
 800aade:	7821      	ldrb	r1, [r4, #0]
 800aae0:	2203      	movs	r2, #3
 800aae2:	4650      	mov	r0, sl
 800aae4:	f7f5 fb7c 	bl	80001e0 <memchr>
 800aae8:	b138      	cbz	r0, 800aafa <_vfiprintf_r+0x176>
 800aaea:	9b04      	ldr	r3, [sp, #16]
 800aaec:	eba0 000a 	sub.w	r0, r0, sl
 800aaf0:	2240      	movs	r2, #64	@ 0x40
 800aaf2:	4082      	lsls	r2, r0
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	3401      	adds	r4, #1
 800aaf8:	9304      	str	r3, [sp, #16]
 800aafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafe:	4829      	ldr	r0, [pc, #164]	@ (800aba4 <_vfiprintf_r+0x220>)
 800ab00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab04:	2206      	movs	r2, #6
 800ab06:	f7f5 fb6b 	bl	80001e0 <memchr>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d03f      	beq.n	800ab8e <_vfiprintf_r+0x20a>
 800ab0e:	4b26      	ldr	r3, [pc, #152]	@ (800aba8 <_vfiprintf_r+0x224>)
 800ab10:	bb1b      	cbnz	r3, 800ab5a <_vfiprintf_r+0x1d6>
 800ab12:	9b03      	ldr	r3, [sp, #12]
 800ab14:	3307      	adds	r3, #7
 800ab16:	f023 0307 	bic.w	r3, r3, #7
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	9303      	str	r3, [sp, #12]
 800ab1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab20:	443b      	add	r3, r7
 800ab22:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab24:	e76a      	b.n	800a9fc <_vfiprintf_r+0x78>
 800ab26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	2001      	movs	r0, #1
 800ab2e:	e7a8      	b.n	800aa82 <_vfiprintf_r+0xfe>
 800ab30:	2300      	movs	r3, #0
 800ab32:	3401      	adds	r4, #1
 800ab34:	9305      	str	r3, [sp, #20]
 800ab36:	4619      	mov	r1, r3
 800ab38:	f04f 0c0a 	mov.w	ip, #10
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab42:	3a30      	subs	r2, #48	@ 0x30
 800ab44:	2a09      	cmp	r2, #9
 800ab46:	d903      	bls.n	800ab50 <_vfiprintf_r+0x1cc>
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d0c6      	beq.n	800aada <_vfiprintf_r+0x156>
 800ab4c:	9105      	str	r1, [sp, #20]
 800ab4e:	e7c4      	b.n	800aada <_vfiprintf_r+0x156>
 800ab50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab54:	4604      	mov	r4, r0
 800ab56:	2301      	movs	r3, #1
 800ab58:	e7f0      	b.n	800ab3c <_vfiprintf_r+0x1b8>
 800ab5a:	ab03      	add	r3, sp, #12
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	462a      	mov	r2, r5
 800ab60:	4b12      	ldr	r3, [pc, #72]	@ (800abac <_vfiprintf_r+0x228>)
 800ab62:	a904      	add	r1, sp, #16
 800ab64:	4630      	mov	r0, r6
 800ab66:	f7fb feb7 	bl	80068d8 <_printf_float>
 800ab6a:	4607      	mov	r7, r0
 800ab6c:	1c78      	adds	r0, r7, #1
 800ab6e:	d1d6      	bne.n	800ab1e <_vfiprintf_r+0x19a>
 800ab70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab72:	07d9      	lsls	r1, r3, #31
 800ab74:	d405      	bmi.n	800ab82 <_vfiprintf_r+0x1fe>
 800ab76:	89ab      	ldrh	r3, [r5, #12]
 800ab78:	059a      	lsls	r2, r3, #22
 800ab7a:	d402      	bmi.n	800ab82 <_vfiprintf_r+0x1fe>
 800ab7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab7e:	f7fc fe1b 	bl	80077b8 <__retarget_lock_release_recursive>
 800ab82:	89ab      	ldrh	r3, [r5, #12]
 800ab84:	065b      	lsls	r3, r3, #25
 800ab86:	f53f af1f 	bmi.w	800a9c8 <_vfiprintf_r+0x44>
 800ab8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab8c:	e71e      	b.n	800a9cc <_vfiprintf_r+0x48>
 800ab8e:	ab03      	add	r3, sp, #12
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	462a      	mov	r2, r5
 800ab94:	4b05      	ldr	r3, [pc, #20]	@ (800abac <_vfiprintf_r+0x228>)
 800ab96:	a904      	add	r1, sp, #16
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f7fc f935 	bl	8006e08 <_printf_i>
 800ab9e:	e7e4      	b.n	800ab6a <_vfiprintf_r+0x1e6>
 800aba0:	0800b291 	.word	0x0800b291
 800aba4:	0800b29b 	.word	0x0800b29b
 800aba8:	080068d9 	.word	0x080068d9
 800abac:	0800a961 	.word	0x0800a961
 800abb0:	0800b297 	.word	0x0800b297

0800abb4 <__swbuf_r>:
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb6:	460e      	mov	r6, r1
 800abb8:	4614      	mov	r4, r2
 800abba:	4605      	mov	r5, r0
 800abbc:	b118      	cbz	r0, 800abc6 <__swbuf_r+0x12>
 800abbe:	6a03      	ldr	r3, [r0, #32]
 800abc0:	b90b      	cbnz	r3, 800abc6 <__swbuf_r+0x12>
 800abc2:	f7fc fce1 	bl	8007588 <__sinit>
 800abc6:	69a3      	ldr	r3, [r4, #24]
 800abc8:	60a3      	str	r3, [r4, #8]
 800abca:	89a3      	ldrh	r3, [r4, #12]
 800abcc:	071a      	lsls	r2, r3, #28
 800abce:	d501      	bpl.n	800abd4 <__swbuf_r+0x20>
 800abd0:	6923      	ldr	r3, [r4, #16]
 800abd2:	b943      	cbnz	r3, 800abe6 <__swbuf_r+0x32>
 800abd4:	4621      	mov	r1, r4
 800abd6:	4628      	mov	r0, r5
 800abd8:	f000 f82a 	bl	800ac30 <__swsetup_r>
 800abdc:	b118      	cbz	r0, 800abe6 <__swbuf_r+0x32>
 800abde:	f04f 37ff 	mov.w	r7, #4294967295
 800abe2:	4638      	mov	r0, r7
 800abe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	6922      	ldr	r2, [r4, #16]
 800abea:	1a98      	subs	r0, r3, r2
 800abec:	6963      	ldr	r3, [r4, #20]
 800abee:	b2f6      	uxtb	r6, r6
 800abf0:	4283      	cmp	r3, r0
 800abf2:	4637      	mov	r7, r6
 800abf4:	dc05      	bgt.n	800ac02 <__swbuf_r+0x4e>
 800abf6:	4621      	mov	r1, r4
 800abf8:	4628      	mov	r0, r5
 800abfa:	f7ff fa53 	bl	800a0a4 <_fflush_r>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d1ed      	bne.n	800abde <__swbuf_r+0x2a>
 800ac02:	68a3      	ldr	r3, [r4, #8]
 800ac04:	3b01      	subs	r3, #1
 800ac06:	60a3      	str	r3, [r4, #8]
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	1c5a      	adds	r2, r3, #1
 800ac0c:	6022      	str	r2, [r4, #0]
 800ac0e:	701e      	strb	r6, [r3, #0]
 800ac10:	6962      	ldr	r2, [r4, #20]
 800ac12:	1c43      	adds	r3, r0, #1
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d004      	beq.n	800ac22 <__swbuf_r+0x6e>
 800ac18:	89a3      	ldrh	r3, [r4, #12]
 800ac1a:	07db      	lsls	r3, r3, #31
 800ac1c:	d5e1      	bpl.n	800abe2 <__swbuf_r+0x2e>
 800ac1e:	2e0a      	cmp	r6, #10
 800ac20:	d1df      	bne.n	800abe2 <__swbuf_r+0x2e>
 800ac22:	4621      	mov	r1, r4
 800ac24:	4628      	mov	r0, r5
 800ac26:	f7ff fa3d 	bl	800a0a4 <_fflush_r>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d0d9      	beq.n	800abe2 <__swbuf_r+0x2e>
 800ac2e:	e7d6      	b.n	800abde <__swbuf_r+0x2a>

0800ac30 <__swsetup_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4b29      	ldr	r3, [pc, #164]	@ (800acd8 <__swsetup_r+0xa8>)
 800ac34:	4605      	mov	r5, r0
 800ac36:	6818      	ldr	r0, [r3, #0]
 800ac38:	460c      	mov	r4, r1
 800ac3a:	b118      	cbz	r0, 800ac44 <__swsetup_r+0x14>
 800ac3c:	6a03      	ldr	r3, [r0, #32]
 800ac3e:	b90b      	cbnz	r3, 800ac44 <__swsetup_r+0x14>
 800ac40:	f7fc fca2 	bl	8007588 <__sinit>
 800ac44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac48:	0719      	lsls	r1, r3, #28
 800ac4a:	d422      	bmi.n	800ac92 <__swsetup_r+0x62>
 800ac4c:	06da      	lsls	r2, r3, #27
 800ac4e:	d407      	bmi.n	800ac60 <__swsetup_r+0x30>
 800ac50:	2209      	movs	r2, #9
 800ac52:	602a      	str	r2, [r5, #0]
 800ac54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac58:	81a3      	strh	r3, [r4, #12]
 800ac5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5e:	e033      	b.n	800acc8 <__swsetup_r+0x98>
 800ac60:	0758      	lsls	r0, r3, #29
 800ac62:	d512      	bpl.n	800ac8a <__swsetup_r+0x5a>
 800ac64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac66:	b141      	cbz	r1, 800ac7a <__swsetup_r+0x4a>
 800ac68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac6c:	4299      	cmp	r1, r3
 800ac6e:	d002      	beq.n	800ac76 <__swsetup_r+0x46>
 800ac70:	4628      	mov	r0, r5
 800ac72:	f7fd fc05 	bl	8008480 <_free_r>
 800ac76:	2300      	movs	r3, #0
 800ac78:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac80:	81a3      	strh	r3, [r4, #12]
 800ac82:	2300      	movs	r3, #0
 800ac84:	6063      	str	r3, [r4, #4]
 800ac86:	6923      	ldr	r3, [r4, #16]
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	89a3      	ldrh	r3, [r4, #12]
 800ac8c:	f043 0308 	orr.w	r3, r3, #8
 800ac90:	81a3      	strh	r3, [r4, #12]
 800ac92:	6923      	ldr	r3, [r4, #16]
 800ac94:	b94b      	cbnz	r3, 800acaa <__swsetup_r+0x7a>
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aca0:	d003      	beq.n	800acaa <__swsetup_r+0x7a>
 800aca2:	4621      	mov	r1, r4
 800aca4:	4628      	mov	r0, r5
 800aca6:	f000 f883 	bl	800adb0 <__smakebuf_r>
 800acaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acae:	f013 0201 	ands.w	r2, r3, #1
 800acb2:	d00a      	beq.n	800acca <__swsetup_r+0x9a>
 800acb4:	2200      	movs	r2, #0
 800acb6:	60a2      	str	r2, [r4, #8]
 800acb8:	6962      	ldr	r2, [r4, #20]
 800acba:	4252      	negs	r2, r2
 800acbc:	61a2      	str	r2, [r4, #24]
 800acbe:	6922      	ldr	r2, [r4, #16]
 800acc0:	b942      	cbnz	r2, 800acd4 <__swsetup_r+0xa4>
 800acc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800acc6:	d1c5      	bne.n	800ac54 <__swsetup_r+0x24>
 800acc8:	bd38      	pop	{r3, r4, r5, pc}
 800acca:	0799      	lsls	r1, r3, #30
 800accc:	bf58      	it	pl
 800acce:	6962      	ldrpl	r2, [r4, #20]
 800acd0:	60a2      	str	r2, [r4, #8]
 800acd2:	e7f4      	b.n	800acbe <__swsetup_r+0x8e>
 800acd4:	2000      	movs	r0, #0
 800acd6:	e7f7      	b.n	800acc8 <__swsetup_r+0x98>
 800acd8:	2000001c 	.word	0x2000001c

0800acdc <_raise_r>:
 800acdc:	291f      	cmp	r1, #31
 800acde:	b538      	push	{r3, r4, r5, lr}
 800ace0:	4605      	mov	r5, r0
 800ace2:	460c      	mov	r4, r1
 800ace4:	d904      	bls.n	800acf0 <_raise_r+0x14>
 800ace6:	2316      	movs	r3, #22
 800ace8:	6003      	str	r3, [r0, #0]
 800acea:	f04f 30ff 	mov.w	r0, #4294967295
 800acee:	bd38      	pop	{r3, r4, r5, pc}
 800acf0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800acf2:	b112      	cbz	r2, 800acfa <_raise_r+0x1e>
 800acf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acf8:	b94b      	cbnz	r3, 800ad0e <_raise_r+0x32>
 800acfa:	4628      	mov	r0, r5
 800acfc:	f000 f830 	bl	800ad60 <_getpid_r>
 800ad00:	4622      	mov	r2, r4
 800ad02:	4601      	mov	r1, r0
 800ad04:	4628      	mov	r0, r5
 800ad06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad0a:	f000 b817 	b.w	800ad3c <_kill_r>
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d00a      	beq.n	800ad28 <_raise_r+0x4c>
 800ad12:	1c59      	adds	r1, r3, #1
 800ad14:	d103      	bne.n	800ad1e <_raise_r+0x42>
 800ad16:	2316      	movs	r3, #22
 800ad18:	6003      	str	r3, [r0, #0]
 800ad1a:	2001      	movs	r0, #1
 800ad1c:	e7e7      	b.n	800acee <_raise_r+0x12>
 800ad1e:	2100      	movs	r1, #0
 800ad20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad24:	4620      	mov	r0, r4
 800ad26:	4798      	blx	r3
 800ad28:	2000      	movs	r0, #0
 800ad2a:	e7e0      	b.n	800acee <_raise_r+0x12>

0800ad2c <raise>:
 800ad2c:	4b02      	ldr	r3, [pc, #8]	@ (800ad38 <raise+0xc>)
 800ad2e:	4601      	mov	r1, r0
 800ad30:	6818      	ldr	r0, [r3, #0]
 800ad32:	f7ff bfd3 	b.w	800acdc <_raise_r>
 800ad36:	bf00      	nop
 800ad38:	2000001c 	.word	0x2000001c

0800ad3c <_kill_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d07      	ldr	r5, [pc, #28]	@ (800ad5c <_kill_r+0x20>)
 800ad40:	2300      	movs	r3, #0
 800ad42:	4604      	mov	r4, r0
 800ad44:	4608      	mov	r0, r1
 800ad46:	4611      	mov	r1, r2
 800ad48:	602b      	str	r3, [r5, #0]
 800ad4a:	f7f6 fd23 	bl	8001794 <_kill>
 800ad4e:	1c43      	adds	r3, r0, #1
 800ad50:	d102      	bne.n	800ad58 <_kill_r+0x1c>
 800ad52:	682b      	ldr	r3, [r5, #0]
 800ad54:	b103      	cbz	r3, 800ad58 <_kill_r+0x1c>
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	bd38      	pop	{r3, r4, r5, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20004de8 	.word	0x20004de8

0800ad60 <_getpid_r>:
 800ad60:	f7f6 bd10 	b.w	8001784 <_getpid>

0800ad64 <__swhatbuf_r>:
 800ad64:	b570      	push	{r4, r5, r6, lr}
 800ad66:	460c      	mov	r4, r1
 800ad68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad6c:	2900      	cmp	r1, #0
 800ad6e:	b096      	sub	sp, #88	@ 0x58
 800ad70:	4615      	mov	r5, r2
 800ad72:	461e      	mov	r6, r3
 800ad74:	da0d      	bge.n	800ad92 <__swhatbuf_r+0x2e>
 800ad76:	89a3      	ldrh	r3, [r4, #12]
 800ad78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad7c:	f04f 0100 	mov.w	r1, #0
 800ad80:	bf14      	ite	ne
 800ad82:	2340      	movne	r3, #64	@ 0x40
 800ad84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad88:	2000      	movs	r0, #0
 800ad8a:	6031      	str	r1, [r6, #0]
 800ad8c:	602b      	str	r3, [r5, #0]
 800ad8e:	b016      	add	sp, #88	@ 0x58
 800ad90:	bd70      	pop	{r4, r5, r6, pc}
 800ad92:	466a      	mov	r2, sp
 800ad94:	f000 f848 	bl	800ae28 <_fstat_r>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	dbec      	blt.n	800ad76 <__swhatbuf_r+0x12>
 800ad9c:	9901      	ldr	r1, [sp, #4]
 800ad9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ada2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ada6:	4259      	negs	r1, r3
 800ada8:	4159      	adcs	r1, r3
 800adaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adae:	e7eb      	b.n	800ad88 <__swhatbuf_r+0x24>

0800adb0 <__smakebuf_r>:
 800adb0:	898b      	ldrh	r3, [r1, #12]
 800adb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adb4:	079d      	lsls	r5, r3, #30
 800adb6:	4606      	mov	r6, r0
 800adb8:	460c      	mov	r4, r1
 800adba:	d507      	bpl.n	800adcc <__smakebuf_r+0x1c>
 800adbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	6123      	str	r3, [r4, #16]
 800adc4:	2301      	movs	r3, #1
 800adc6:	6163      	str	r3, [r4, #20]
 800adc8:	b003      	add	sp, #12
 800adca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adcc:	ab01      	add	r3, sp, #4
 800adce:	466a      	mov	r2, sp
 800add0:	f7ff ffc8 	bl	800ad64 <__swhatbuf_r>
 800add4:	9f00      	ldr	r7, [sp, #0]
 800add6:	4605      	mov	r5, r0
 800add8:	4639      	mov	r1, r7
 800adda:	4630      	mov	r0, r6
 800addc:	f7fd fbc4 	bl	8008568 <_malloc_r>
 800ade0:	b948      	cbnz	r0, 800adf6 <__smakebuf_r+0x46>
 800ade2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade6:	059a      	lsls	r2, r3, #22
 800ade8:	d4ee      	bmi.n	800adc8 <__smakebuf_r+0x18>
 800adea:	f023 0303 	bic.w	r3, r3, #3
 800adee:	f043 0302 	orr.w	r3, r3, #2
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	e7e2      	b.n	800adbc <__smakebuf_r+0xc>
 800adf6:	89a3      	ldrh	r3, [r4, #12]
 800adf8:	6020      	str	r0, [r4, #0]
 800adfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adfe:	81a3      	strh	r3, [r4, #12]
 800ae00:	9b01      	ldr	r3, [sp, #4]
 800ae02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae06:	b15b      	cbz	r3, 800ae20 <__smakebuf_r+0x70>
 800ae08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f000 f81d 	bl	800ae4c <_isatty_r>
 800ae12:	b128      	cbz	r0, 800ae20 <__smakebuf_r+0x70>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f023 0303 	bic.w	r3, r3, #3
 800ae1a:	f043 0301 	orr.w	r3, r3, #1
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	89a3      	ldrh	r3, [r4, #12]
 800ae22:	431d      	orrs	r5, r3
 800ae24:	81a5      	strh	r5, [r4, #12]
 800ae26:	e7cf      	b.n	800adc8 <__smakebuf_r+0x18>

0800ae28 <_fstat_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4d07      	ldr	r5, [pc, #28]	@ (800ae48 <_fstat_r+0x20>)
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	4604      	mov	r4, r0
 800ae30:	4608      	mov	r0, r1
 800ae32:	4611      	mov	r1, r2
 800ae34:	602b      	str	r3, [r5, #0]
 800ae36:	f7f6 fd0d 	bl	8001854 <_fstat>
 800ae3a:	1c43      	adds	r3, r0, #1
 800ae3c:	d102      	bne.n	800ae44 <_fstat_r+0x1c>
 800ae3e:	682b      	ldr	r3, [r5, #0]
 800ae40:	b103      	cbz	r3, 800ae44 <_fstat_r+0x1c>
 800ae42:	6023      	str	r3, [r4, #0]
 800ae44:	bd38      	pop	{r3, r4, r5, pc}
 800ae46:	bf00      	nop
 800ae48:	20004de8 	.word	0x20004de8

0800ae4c <_isatty_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4d06      	ldr	r5, [pc, #24]	@ (800ae68 <_isatty_r+0x1c>)
 800ae50:	2300      	movs	r3, #0
 800ae52:	4604      	mov	r4, r0
 800ae54:	4608      	mov	r0, r1
 800ae56:	602b      	str	r3, [r5, #0]
 800ae58:	f7f6 fd0c 	bl	8001874 <_isatty>
 800ae5c:	1c43      	adds	r3, r0, #1
 800ae5e:	d102      	bne.n	800ae66 <_isatty_r+0x1a>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	b103      	cbz	r3, 800ae66 <_isatty_r+0x1a>
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	20004de8 	.word	0x20004de8

0800ae6c <_init>:
 800ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6e:	bf00      	nop
 800ae70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae72:	bc08      	pop	{r3}
 800ae74:	469e      	mov	lr, r3
 800ae76:	4770      	bx	lr

0800ae78 <_fini>:
 800ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7a:	bf00      	nop
 800ae7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7e:	bc08      	pop	{r3}
 800ae80:	469e      	mov	lr, r3
 800ae82:	4770      	bx	lr
