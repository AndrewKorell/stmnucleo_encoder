
411RE_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad04  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800aea8  0800aea8  0000bea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b380  0800b380  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b380  0800b380  0000c380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b388  0800b388  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b388  0800b388  0000c388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b38c  0800b38c  0000c38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b390  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c4c  200001d8  0800b568  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e24  0800b568  0000de24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017239  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033f9  00000000  00000000  00024441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00027840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001002  00000000  00000000  00028ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000460a  00000000  00000000  00029ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016969  00000000  00000000  0002e2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b5a9  00000000  00000000  00044c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e01fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bdc  00000000  00000000  000e0244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e6e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae8c 	.word	0x0800ae8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800ae8c 	.word	0x0800ae8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff8:	f000 fcd6 	bl	80019a8 <HAL_Init>
  /* USER CODE BEGIN Init */
  //enc_init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffc:	f000 f822 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001000:	f000 f944 	bl	800128c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001004:	f000 f918 	bl	8001238 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8001008:	f000 f8da 	bl	80011c0 <MX_TIM9_Init>
  MX_TIM2_Init();
 800100c:	f000 f884 	bl	8001118 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001010:	213c      	movs	r1, #60	@ 0x3c
 8001012:	4808      	ldr	r0, [pc, #32]	@ (8001034 <main+0x40>)
 8001014:	f001 fdd0 	bl	8002bb8 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001018:	f002 fe4a 	bl	8003cb0 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800101c:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <main+0x44>)
 800101e:	2100      	movs	r1, #0
 8001020:	4806      	ldr	r0, [pc, #24]	@ (800103c <main+0x48>)
 8001022:	f002 fe8f 	bl	8003d44 <osThreadNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <main+0x4c>)
 800102a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800102c:	f002 fe64 	bl	8003cf8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <main+0x3c>
 8001034:	200001f4 	.word	0x200001f4
 8001038:	0800af14 	.word	0x0800af14
 800103c:	080013a5 	.word	0x080013a5
 8001040:	200002cc 	.word	0x200002cc

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	@ 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2230      	movs	r2, #48	@ 0x30
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f006 fb41 	bl	80076da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <SystemClock_Config+0xcc>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	4a27      	ldr	r2, [pc, #156]	@ (8001110 <SystemClock_Config+0xcc>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	@ 0x40
 8001078:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <SystemClock_Config+0xcc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <SystemClock_Config+0xd0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <SystemClock_Config+0xd0>)
 800108e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <SystemClock_Config+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a8:	2310      	movs	r3, #16
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2302      	movs	r3, #2
 80010ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010b4:	2310      	movs	r3, #16
 80010b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010be:	2304      	movs	r3, #4
 80010c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c2:	2304      	movs	r3, #4
 80010c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 ff52 	bl	8001f74 <HAL_RCC_OscConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010d6:	f000 f9cb 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010da:	230f      	movs	r3, #15
 80010dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010de:	2302      	movs	r3, #2
 80010e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2102      	movs	r1, #2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 f9b4 	bl	8002464 <HAL_RCC_ClockConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001102:	f000 f9b5 	bl	8001470 <Error_Handler>
  }
}
 8001106:	bf00      	nop
 8001108:	3750      	adds	r7, #80	@ 0x50
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40007000 	.word	0x40007000

08001118 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	@ 0x30
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2224      	movs	r2, #36	@ 0x24
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f006 fad7 	bl	80076da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001134:	4b21      	ldr	r3, [pc, #132]	@ (80011bc <MX_TIM2_Init+0xa4>)
 8001136:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800113a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800113c:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <MX_TIM2_Init+0xa4>)
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b1e      	ldr	r3, [pc, #120]	@ (80011bc <MX_TIM2_Init+0xa4>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001148:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <MX_TIM2_Init+0xa4>)
 800114a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800114e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_TIM2_Init+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001156:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <MX_TIM2_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800115c:	2303      	movs	r3, #3
 800115e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001160:	2302      	movs	r3, #2
 8001162:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001164:	2301      	movs	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001170:	2302      	movs	r3, #2
 8001172:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001174:	2301      	movs	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4619      	mov	r1, r3
 8001186:	480d      	ldr	r0, [pc, #52]	@ (80011bc <MX_TIM2_Init+0xa4>)
 8001188:	f001 fc70 	bl	8002a6c <HAL_TIM_Encoder_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001192:	f000 f96d 	bl	8001470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001196:	2320      	movs	r3, #32
 8001198:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	@ (80011bc <MX_TIM2_Init+0xa4>)
 80011a4:	f002 f8b2 	bl	800330c <HAL_TIMEx_MasterConfigSynchronization>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011ae:	f000 f95f 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3730      	adds	r7, #48	@ 0x30
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001f4 	.word	0x200001f4

080011c0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <MX_TIM9_Init+0x74>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80011e6:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ec:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80011fa:	480d      	ldr	r0, [pc, #52]	@ (8001230 <MX_TIM9_Init+0x70>)
 80011fc:	f001 fb84 	bl	8002908 <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001206:	f000 f933 	bl	8001470 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	@ (8001230 <MX_TIM9_Init+0x70>)
 8001218:	f001 fe4c 	bl	8002eb4 <HAL_TIM_SlaveConfigSynchro>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM9_Init+0x66>
  {
    Error_Handler();
 8001222:	f000 f925 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000023c 	.word	0x2000023c
 8001234:	40014000 	.word	0x40014000

08001238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <MX_USART2_UART_Init+0x50>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001270:	f002 f8ce 	bl	8003410 <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800127a:	f000 f8f9 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000284 	.word	0x20000284
 8001288:	40004400 	.word	0x40004400

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b39      	ldr	r3, [pc, #228]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b35      	ldr	r3, [pc, #212]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a34      	ldr	r2, [pc, #208]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b32      	ldr	r3, [pc, #200]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b2e      	ldr	r3, [pc, #184]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <MX_GPIO_Init+0x10c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a26      	ldr	r2, [pc, #152]	@ (8001398 <MX_GPIO_Init+0x10c>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <MX_GPIO_Init+0x10c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2120      	movs	r1, #32
 8001316:	4821      	ldr	r0, [pc, #132]	@ (800139c <MX_GPIO_Init+0x110>)
 8001318:	f000 fdee 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800131c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001322:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	481b      	ldr	r0, [pc, #108]	@ (80013a0 <MX_GPIO_Init+0x114>)
 8001334:	f000 fc5c 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001338:	2320      	movs	r3, #32
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4813      	ldr	r0, [pc, #76]	@ (800139c <MX_GPIO_Init+0x110>)
 8001350:	f000 fc4e 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_Z_Pin */
  GPIO_InitStruct.Pin = ENC_Z_Pin;
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001358:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_Z_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <MX_GPIO_Init+0x114>)
 800136a:	f000 fc41 	bl	8001bf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2106      	movs	r1, #6
 8001372:	2017      	movs	r0, #23
 8001374:	f000 fc12 	bl	8001b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001378:	2017      	movs	r0, #23
 800137a:	f000 fc2b 	bl	8001bd4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2106      	movs	r1, #6
 8001382:	2028      	movs	r0, #40	@ 0x28
 8001384:	f000 fc0a 	bl	8001b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001388:	2028      	movs	r0, #40	@ 0x28
 800138a:	f000 fc23 	bl	8001bd4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	@ 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020800 	.word	0x40020800

080013a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint32_t raw_cnt = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
	uint32_t prv_cnt = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
	int32_t delta = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
	//uint32_t tracking[10];
	int32_t full_cnt = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
	uint8_t p_cnt = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	74fb      	strb	r3, [r7, #19]

  for(;;)
  {

	  raw_cnt = TIM2->CNT;
 80013c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	60fb      	str	r3, [r7, #12]

	  delta = (int32_t)(raw_cnt - prv_cnt);
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	61bb      	str	r3, [r7, #24]
	  //we should be able to assume that 1500 counts in 10ms can
	  //only happen if there is a zero crossing.
	  if(delta < -1500) delta += 2000;
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	4a19      	ldr	r2, [pc, #100]	@ (8001438 <StartDefaultTask+0x94>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	da03      	bge.n	80013e0 <StartDefaultTask+0x3c>
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80013de:	61bb      	str	r3, [r7, #24]
	  if(delta > 1500) delta -= 2000;
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80013e6:	4293      	cmp	r3, r2
 80013e8:	dd03      	ble.n	80013f2 <StartDefaultTask+0x4e>
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80013f0:	61bb      	str	r3, [r7, #24]

	  full_cnt += delta;
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	4413      	add	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]

	  if(p_cnt++ > 10)
 80013fa:	7cfb      	ldrb	r3, [r7, #19]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	74fa      	strb	r2, [r7, #19]
 8001400:	2b0a      	cmp	r3, #10
 8001402:	d912      	bls.n	800142a <StartDefaultTask+0x86>
	  {
	      sprintf((char *) MSG, "Encoder Raw Counts = %lu, Index Offset = %lu, Encoder Tracking = %ld\r\n", (long) raw_cnt, (long) enc_index_offset, (long) full_cnt);
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <StartDefaultTask+0x98>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4619      	mov	r1, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	460b      	mov	r3, r1
 8001412:	490b      	ldr	r1, [pc, #44]	@ (8001440 <StartDefaultTask+0x9c>)
 8001414:	480b      	ldr	r0, [pc, #44]	@ (8001444 <StartDefaultTask+0xa0>)
 8001416:	f006 f8fd 	bl	8007614 <siprintf>
	      HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 800141a:	2364      	movs	r3, #100	@ 0x64
 800141c:	2264      	movs	r2, #100	@ 0x64
 800141e:	4909      	ldr	r1, [pc, #36]	@ (8001444 <StartDefaultTask+0xa0>)
 8001420:	4809      	ldr	r0, [pc, #36]	@ (8001448 <StartDefaultTask+0xa4>)
 8001422:	f002 f845 	bl	80034b0 <HAL_UART_Transmit>
	      p_cnt = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	74fb      	strb	r3, [r7, #19]
	  }
	  prv_cnt = raw_cnt;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	61fb      	str	r3, [r7, #28]
      osDelay(10);
 800142e:	200a      	movs	r0, #10
 8001430:	f002 fd1a 	bl	8003e68 <osDelay>
	  raw_cnt = TIM2->CNT;
 8001434:	e7c4      	b.n	80013c0 <StartDefaultTask+0x1c>
 8001436:	bf00      	nop
 8001438:	fffffa24 	.word	0xfffffa24
 800143c:	200002d0 	.word	0x200002d0
 8001440:	0800aeb4 	.word	0x0800aeb4
 8001444:	200002d4 	.word	0x200002d4
 8001448:	20000284 	.word	0x20000284

0800144c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a04      	ldr	r2, [pc, #16]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800145e:	f000 fac5 	bl	80019ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40000c00 	.word	0x40000c00

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <Error_Handler+0x8>

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_MspInit+0x54>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	4a11      	ldr	r2, [pc, #68]	@ (80014d0 <HAL_MspInit+0x54>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001490:	6453      	str	r3, [r2, #68]	@ 0x44
 8001492:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <HAL_MspInit+0x54>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <HAL_MspInit+0x54>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <HAL_MspInit+0x54>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <HAL_MspInit+0x54>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	210f      	movs	r1, #15
 80014be:	f06f 0001 	mvn.w	r0, #1
 80014c2:	f000 fb6b 	bl	8001b9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014f4:	d12b      	bne.n	800154e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <HAL_TIM_Encoder_MspInit+0x84>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	4a16      	ldr	r2, [pc, #88]	@ (8001558 <HAL_TIM_Encoder_MspInit+0x84>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6413      	str	r3, [r2, #64]	@ 0x40
 8001506:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <HAL_TIM_Encoder_MspInit+0x84>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <HAL_TIM_Encoder_MspInit+0x84>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a0f      	ldr	r2, [pc, #60]	@ (8001558 <HAL_TIM_Encoder_MspInit+0x84>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <HAL_TIM_Encoder_MspInit+0x84>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 800152e:	2303      	movs	r3, #3
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001536:	2302      	movs	r3, #2
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800153e:	2301      	movs	r3, #1
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4804      	ldr	r0, [pc, #16]	@ (800155c <HAL_TIM_Encoder_MspInit+0x88>)
 800154a:	f000 fb51 	bl	8001bf0 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	@ 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40020000 	.word	0x40020000

08001560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <HAL_TIM_Base_MspInit+0x3c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d10d      	bne.n	800158e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_TIM_Base_MspInit+0x40>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	4a09      	ldr	r2, [pc, #36]	@ (80015a0 <HAL_TIM_Base_MspInit+0x40>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001580:	6453      	str	r3, [r2, #68]	@ 0x44
 8001582:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <HAL_TIM_Base_MspInit+0x40>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40014000 	.word	0x40014000
 80015a0:	40023800 	.word	0x40023800

080015a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a19      	ldr	r2, [pc, #100]	@ (8001628 <HAL_UART_MspInit+0x84>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d12b      	bne.n	800161e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	4a17      	ldr	r2, [pc, #92]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a10      	ldr	r2, [pc, #64]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015fe:	230c      	movs	r3, #12
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800160e:	2307      	movs	r3, #7
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <HAL_UART_MspInit+0x8c>)
 800161a:	f000 fae9 	bl	8001bf0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40004400 	.word	0x40004400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	@ 0x38
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	4b33      	ldr	r3, [pc, #204]	@ (8001718 <HAL_InitTick+0xe4>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	4a32      	ldr	r2, [pc, #200]	@ (8001718 <HAL_InitTick+0xe4>)
 800164e:	f043 0308 	orr.w	r3, r3, #8
 8001652:	6413      	str	r3, [r2, #64]	@ 0x40
 8001654:	4b30      	ldr	r3, [pc, #192]	@ (8001718 <HAL_InitTick+0xe4>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001660:	f107 0210 	add.w	r2, r7, #16
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f001 f91a 	bl	80028a4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001676:	2b00      	cmp	r3, #0
 8001678:	d103      	bne.n	8001682 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800167a:	f001 f8eb 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 800167e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001680:	e004      	b.n	800168c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001682:	f001 f8e7 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 8001686:	4603      	mov	r3, r0
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800168c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800168e:	4a23      	ldr	r2, [pc, #140]	@ (800171c <HAL_InitTick+0xe8>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	0c9b      	lsrs	r3, r3, #18
 8001696:	3b01      	subs	r3, #1
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800169a:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <HAL_InitTick+0xec>)
 800169c:	4a21      	ldr	r2, [pc, #132]	@ (8001724 <HAL_InitTick+0xf0>)
 800169e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80016a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <HAL_InitTick+0xec>)
 80016a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016a6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80016a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <HAL_InitTick+0xec>)
 80016aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ac:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <HAL_InitTick+0xec>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <HAL_InitTick+0xec>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_InitTick+0xec>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80016c0:	4817      	ldr	r0, [pc, #92]	@ (8001720 <HAL_InitTick+0xec>)
 80016c2:	f001 f921 	bl	8002908 <HAL_TIM_Base_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11b      	bne.n	800170c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80016d4:	4812      	ldr	r0, [pc, #72]	@ (8001720 <HAL_InitTick+0xec>)
 80016d6:	f001 f967 	bl	80029a8 <HAL_TIM_Base_Start_IT>
 80016da:	4603      	mov	r3, r0
 80016dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d111      	bne.n	800170c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80016e8:	2032      	movs	r0, #50	@ 0x32
 80016ea:	f000 fa73 	bl	8001bd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d808      	bhi.n	8001706 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	2032      	movs	r0, #50	@ 0x32
 80016fa:	f000 fa4f 	bl	8001b9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <HAL_InitTick+0xf4>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	e002      	b.n	800170c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800170c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001710:	4618      	mov	r0, r3
 8001712:	3738      	adds	r7, #56	@ 0x38
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	431bde83 	.word	0x431bde83
 8001720:	20000338 	.word	0x20000338
 8001724:	40000c00 	.word	0x40000c00
 8001728:	20000004 	.word	0x20000004

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <NMI_Handler+0x4>

08001734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <MemManage_Handler+0x4>

08001744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <UsageFault_Handler+0x4>

08001754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  enc_index_offset = TIM2->CNT;
 8001768:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176e:	4a03      	ldr	r2, [pc, #12]	@ (800177c <EXTI9_5_IRQHandler+0x18>)
 8001770:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_Z_Pin);
 8001772:	2080      	movs	r0, #128	@ 0x80
 8001774:	f000 fbda 	bl	8001f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200002d0 	.word	0x200002d0

08001780 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001784:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001788:	f000 fbd0 	bl	8001f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <TIM5_IRQHandler+0x10>)
 8001796:	f001 fa9d 	bl	8002cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000338 	.word	0x20000338

080017a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return 1;
 80017a8:	2301      	movs	r3, #1
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <_kill>:

int _kill(int pid, int sig)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017be:	f005 ffdf 	bl	8007780 <__errno>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2216      	movs	r2, #22
 80017c6:	601a      	str	r2, [r3, #0]
  return -1;
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_exit>:

void _exit (int status)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ffe7 	bl	80017b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017e6:	bf00      	nop
 80017e8:	e7fd      	b.n	80017e6 <_exit+0x12>

080017ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e00a      	b.n	8001812 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017fc:	f3af 8000 	nop.w
 8001800:	4601      	mov	r1, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	60ba      	str	r2, [r7, #8]
 8001808:	b2ca      	uxtb	r2, r1
 800180a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	dbf0      	blt.n	80017fc <_read+0x12>
  }

  return len;
 800181a:	687b      	ldr	r3, [r7, #4]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e009      	b.n	800184a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	60ba      	str	r2, [r7, #8]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	dbf1      	blt.n	8001836 <_write+0x12>
  }
  return len;
 8001852:	687b      	ldr	r3, [r7, #4]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_close>:

int _close(int file)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001884:	605a      	str	r2, [r3, #4]
  return 0;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_isatty>:

int _isatty(int file)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800189c:	2301      	movs	r3, #1
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b085      	sub	sp, #20
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018cc:	4a14      	ldr	r2, [pc, #80]	@ (8001920 <_sbrk+0x5c>)
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <_sbrk+0x60>)
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d8:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <_sbrk+0x64>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	@ (800192c <_sbrk+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d207      	bcs.n	8001904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f4:	f005 ff44 	bl	8007780 <__errno>
 80018f8:	4603      	mov	r3, r0
 80018fa:	220c      	movs	r2, #12
 80018fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	e009      	b.n	8001918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190a:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <_sbrk+0x64>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	4a05      	ldr	r2, [pc, #20]	@ (8001928 <_sbrk+0x64>)
 8001914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20020000 	.word	0x20020000
 8001924:	00000400 	.word	0x00000400
 8001928:	20000380 	.word	0x20000380
 800192c:	20004e28 	.word	0x20004e28

08001930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <SystemInit+0x20>)
 8001936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800193a:	4a05      	ldr	r2, [pc, #20]	@ (8001950 <SystemInit+0x20>)
 800193c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001954:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800198c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001958:	f7ff ffea 	bl	8001930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800195c:	480c      	ldr	r0, [pc, #48]	@ (8001990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195e:	490d      	ldr	r1, [pc, #52]	@ (8001994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001960:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001974:	4c0a      	ldr	r4, [pc, #40]	@ (80019a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001982:	f005 ff03 	bl	800778c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001986:	f7ff fb35 	bl	8000ff4 <main>
  bx  lr    
 800198a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800198c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001994:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001998:	0800b390 	.word	0x0800b390
  ldr r2, =_sbss
 800199c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019a0:	20004e24 	.word	0x20004e24

080019a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC_IRQHandler>
	...

080019a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ac:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <HAL_Init+0x40>)
 80019b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <HAL_Init+0x40>)
 80019be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a07      	ldr	r2, [pc, #28]	@ (80019e8 <HAL_Init+0x40>)
 80019ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f8d8 	bl	8001b86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d6:	200f      	movs	r0, #15
 80019d8:	f7ff fe2c 	bl	8001634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019dc:	f7ff fd4e 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023c00 	.word	0x40023c00

080019ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <HAL_IncTick+0x20>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_IncTick+0x24>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <HAL_IncTick+0x24>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	20000384 	.word	0x20000384

08001a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return uwTick;
 8001a18:	4b03      	ldr	r3, [pc, #12]	@ (8001a28 <HAL_GetTick+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000384 	.word	0x20000384

08001a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db0b      	blt.n	8001aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4907      	ldr	r1, [pc, #28]	@ (8001ac8 <__NVIC_EnableIRQ+0x38>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db0a      	blt.n	8001af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	490c      	ldr	r1, [pc, #48]	@ (8001b18 <__NVIC_SetPriority+0x4c>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af4:	e00a      	b.n	8001b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4908      	ldr	r1, [pc, #32]	@ (8001b1c <__NVIC_SetPriority+0x50>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3b04      	subs	r3, #4
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	761a      	strb	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	@ 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f1c3 0307 	rsb	r3, r3, #7
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2304      	movcs	r3, #4
 8001b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d902      	bls.n	8001b50 <NVIC_EncodePriority+0x30>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3b03      	subs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <NVIC_EncodePriority+0x32>
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	4313      	orrs	r3, r2
         );
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	@ 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ff4c 	bl	8001a2c <__NVIC_SetPriorityGrouping>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bae:	f7ff ff61 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8001bb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	6978      	ldr	r0, [r7, #20]
 8001bba:	f7ff ffb1 	bl	8001b20 <NVIC_EncodePriority>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff80 	bl	8001acc <__NVIC_SetPriority>
}
 8001bcc:	bf00      	nop
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff54 	bl	8001a90 <__NVIC_EnableIRQ>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	e159      	b.n	8001ec0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	f040 8148 	bne.w	8001eba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d005      	beq.n	8001c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d130      	bne.n	8001ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 0201 	and.w	r2, r3, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d017      	beq.n	8001ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d123      	bne.n	8001d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	08da      	lsrs	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3208      	adds	r2, #8
 8001cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	69b9      	ldr	r1, [r7, #24]
 8001d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a2 	beq.w	8001eba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b57      	ldr	r3, [pc, #348]	@ (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	4a56      	ldr	r2, [pc, #344]	@ (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d86:	4b54      	ldr	r3, [pc, #336]	@ (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d92:	4a52      	ldr	r2, [pc, #328]	@ (8001edc <HAL_GPIO_Init+0x2ec>)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a49      	ldr	r2, [pc, #292]	@ (8001ee0 <HAL_GPIO_Init+0x2f0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_Init+0x202>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a48      	ldr	r2, [pc, #288]	@ (8001ee4 <HAL_GPIO_Init+0x2f4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_Init+0x1fe>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a47      	ldr	r2, [pc, #284]	@ (8001ee8 <HAL_GPIO_Init+0x2f8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_GPIO_Init+0x1fa>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a46      	ldr	r2, [pc, #280]	@ (8001eec <HAL_GPIO_Init+0x2fc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_GPIO_Init+0x1f6>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a45      	ldr	r2, [pc, #276]	@ (8001ef0 <HAL_GPIO_Init+0x300>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_Init+0x1f2>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e008      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001df2:	2300      	movs	r3, #0
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	f002 0203 	and.w	r2, r2, #3
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e04:	4935      	ldr	r1, [pc, #212]	@ (8001edc <HAL_GPIO_Init+0x2ec>)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e12:	4b38      	ldr	r3, [pc, #224]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e36:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e60:	4a24      	ldr	r2, [pc, #144]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e66:	4b23      	ldr	r3, [pc, #140]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e90:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	f67f aea2 	bls.w	8001c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3724      	adds	r7, #36	@ 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40013800 	.word	0x40013800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40013c00 	.word	0x40013c00

08001ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
 8001f04:	4613      	mov	r3, r2
 8001f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f14:	e003      	b.n	8001f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	041a      	lsls	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	619a      	str	r2, [r3, #24]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f36:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f42:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f806 	bl	8001f5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40013c00 	.word	0x40013c00

08001f5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e267      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d075      	beq.n	800207e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f92:	4b88      	ldr	r3, [pc, #544]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9e:	4b85      	ldr	r3, [pc, #532]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d112      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001faa:	4b82      	ldr	r3, [pc, #520]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	4b7e      	ldr	r3, [pc, #504]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d05b      	beq.n	800207c <HAL_RCC_OscConfig+0x108>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d157      	bne.n	800207c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e242      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd8:	d106      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x74>
 8001fda:	4b76      	ldr	r3, [pc, #472]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a75      	ldr	r2, [pc, #468]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e01d      	b.n	8002024 <HAL_RCC_OscConfig+0xb0>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x98>
 8001ff2:	4b70      	ldr	r3, [pc, #448]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a6f      	ldr	r2, [pc, #444]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b6d      	ldr	r3, [pc, #436]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6c      	ldr	r2, [pc, #432]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0xb0>
 800200c:	4b69      	ldr	r3, [pc, #420]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a68      	ldr	r2, [pc, #416]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b66      	ldr	r3, [pc, #408]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a65      	ldr	r2, [pc, #404]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 800201e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fcf2 	bl	8001a14 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff fcee 	bl	8001a14 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	@ 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e207      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b5b      	ldr	r3, [pc, #364]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0xc0>
 8002052:	e014      	b.n	800207e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fcde 	bl	8001a14 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff fcda 	bl	8001a14 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	@ 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1f3      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	4b51      	ldr	r3, [pc, #324]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0xe8>
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d063      	beq.n	8002152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800208a:	4b4a      	ldr	r3, [pc, #296]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002096:	4b47      	ldr	r3, [pc, #284]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d11c      	bne.n	80020dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a2:	4b44      	ldr	r3, [pc, #272]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d116      	bne.n	80020dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	4b41      	ldr	r3, [pc, #260]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x152>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e1c7      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c6:	4b3b      	ldr	r3, [pc, #236]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4937      	ldr	r1, [pc, #220]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	e03a      	b.n	8002152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e4:	4b34      	ldr	r3, [pc, #208]	@ (80021b8 <HAL_RCC_OscConfig+0x244>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7ff fc93 	bl	8001a14 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f2:	f7ff fc8f 	bl	8001a14 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1a8      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	4b2b      	ldr	r3, [pc, #172]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b28      	ldr	r3, [pc, #160]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4925      	ldr	r1, [pc, #148]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
 8002124:	e015      	b.n	8002152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002126:	4b24      	ldr	r3, [pc, #144]	@ (80021b8 <HAL_RCC_OscConfig+0x244>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7ff fc72 	bl	8001a14 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002134:	f7ff fc6e 	bl	8001a14 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e187      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d036      	beq.n	80021cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d016      	beq.n	8002194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002166:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <HAL_RCC_OscConfig+0x248>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7ff fc52 	bl	8001a14 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002174:	f7ff fc4e 	bl	8001a14 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e167      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x200>
 8002192:	e01b      	b.n	80021cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002194:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <HAL_RCC_OscConfig+0x248>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7ff fc3b 	bl	8001a14 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	e00e      	b.n	80021c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a2:	f7ff fc37 	bl	8001a14 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d907      	bls.n	80021c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e150      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
 80021b4:	40023800 	.word	0x40023800
 80021b8:	42470000 	.word	0x42470000
 80021bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	4b88      	ldr	r3, [pc, #544]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1ea      	bne.n	80021a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 8097 	beq.w	8002308 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021de:	4b81      	ldr	r3, [pc, #516]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10f      	bne.n	800220a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	4b7d      	ldr	r3, [pc, #500]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	4a7c      	ldr	r2, [pc, #496]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fa:	4b7a      	ldr	r3, [pc, #488]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002206:	2301      	movs	r3, #1
 8002208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4b77      	ldr	r3, [pc, #476]	@ (80023e8 <HAL_RCC_OscConfig+0x474>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d118      	bne.n	8002248 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002216:	4b74      	ldr	r3, [pc, #464]	@ (80023e8 <HAL_RCC_OscConfig+0x474>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a73      	ldr	r2, [pc, #460]	@ (80023e8 <HAL_RCC_OscConfig+0x474>)
 800221c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002222:	f7ff fbf7 	bl	8001a14 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222a:	f7ff fbf3 	bl	8001a14 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e10c      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	4b6a      	ldr	r3, [pc, #424]	@ (80023e8 <HAL_RCC_OscConfig+0x474>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d106      	bne.n	800225e <HAL_RCC_OscConfig+0x2ea>
 8002250:	4b64      	ldr	r3, [pc, #400]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002254:	4a63      	ldr	r2, [pc, #396]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6713      	str	r3, [r2, #112]	@ 0x70
 800225c:	e01c      	b.n	8002298 <HAL_RCC_OscConfig+0x324>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b05      	cmp	r3, #5
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x30c>
 8002266:	4b5f      	ldr	r3, [pc, #380]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226a:	4a5e      	ldr	r2, [pc, #376]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6713      	str	r3, [r2, #112]	@ 0x70
 8002272:	4b5c      	ldr	r3, [pc, #368]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002276:	4a5b      	ldr	r2, [pc, #364]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6713      	str	r3, [r2, #112]	@ 0x70
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0x324>
 8002280:	4b58      	ldr	r3, [pc, #352]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002284:	4a57      	ldr	r2, [pc, #348]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	@ 0x70
 800228c:	4b55      	ldr	r3, [pc, #340]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002290:	4a54      	ldr	r2, [pc, #336]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002292:	f023 0304 	bic.w	r3, r3, #4
 8002296:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d015      	beq.n	80022cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a0:	f7ff fbb8 	bl	8001a14 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a6:	e00a      	b.n	80022be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7ff fbb4 	bl	8001a14 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0cb      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022be:	4b49      	ldr	r3, [pc, #292]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0ee      	beq.n	80022a8 <HAL_RCC_OscConfig+0x334>
 80022ca:	e014      	b.n	80022f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7ff fba2 	bl	8001a14 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d2:	e00a      	b.n	80022ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f7ff fb9e 	bl	8001a14 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e0b5      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ea:	4b3e      	ldr	r3, [pc, #248]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1ee      	bne.n	80022d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fc:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	4a38      	ldr	r2, [pc, #224]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002306:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a1 	beq.w	8002454 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002312:	4b34      	ldr	r3, [pc, #208]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b08      	cmp	r3, #8
 800231c:	d05c      	beq.n	80023d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d141      	bne.n	80023aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b31      	ldr	r3, [pc, #196]	@ (80023ec <HAL_RCC_OscConfig+0x478>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff fb72 	bl	8001a14 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002334:	f7ff fb6e 	bl	8001a14 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e087      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002346:	4b27      	ldr	r3, [pc, #156]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	019b      	lsls	r3, r3, #6
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	3b01      	subs	r3, #1
 800236c:	041b      	lsls	r3, r3, #16
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	491b      	ldr	r1, [pc, #108]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <HAL_RCC_OscConfig+0x478>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7ff fb47 	bl	8001a14 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238a:	f7ff fb43 	bl	8001a14 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e05c      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x416>
 80023a8:	e054      	b.n	8002454 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <HAL_RCC_OscConfig+0x478>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff fb30 	bl	8001a14 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b8:	f7ff fb2c 	bl	8001a14 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e045      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_RCC_OscConfig+0x470>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x444>
 80023d6:	e03d      	b.n	8002454 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e038      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40007000 	.word	0x40007000
 80023ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002460 <HAL_RCC_OscConfig+0x4ec>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d028      	beq.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d121      	bne.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d11a      	bne.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002420:	4013      	ands	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002428:	4293      	cmp	r3, r2
 800242a:	d111      	bne.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002436:	085b      	lsrs	r3, r3, #1
 8002438:	3b01      	subs	r3, #1
 800243a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d107      	bne.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800

08002464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0cc      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002478:	4b68      	ldr	r3, [pc, #416]	@ (800261c <HAL_RCC_ClockConfig+0x1b8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d90c      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b65      	ldr	r3, [pc, #404]	@ (800261c <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b63      	ldr	r3, [pc, #396]	@ (800261c <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0b8      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b8:	4b59      	ldr	r3, [pc, #356]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a58      	ldr	r2, [pc, #352]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d0:	4b53      	ldr	r3, [pc, #332]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a52      	ldr	r2, [pc, #328]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4b50      	ldr	r3, [pc, #320]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	494d      	ldr	r1, [pc, #308]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d044      	beq.n	8002584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b47      	ldr	r3, [pc, #284]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d119      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e07f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d003      	beq.n	8002522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800251e:	2b03      	cmp	r3, #3
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002522:	4b3f      	ldr	r3, [pc, #252]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e06f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002532:	4b3b      	ldr	r3, [pc, #236]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e067      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002542:	4b37      	ldr	r3, [pc, #220]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f023 0203 	bic.w	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4934      	ldr	r1, [pc, #208]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	4313      	orrs	r3, r2
 8002552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002554:	f7ff fa5e 	bl	8001a14 <HAL_GetTick>
 8002558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	e00a      	b.n	8002572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255c:	f7ff fa5a 	bl	8001a14 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e04f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	4b2b      	ldr	r3, [pc, #172]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 020c 	and.w	r2, r3, #12
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	429a      	cmp	r2, r3
 8002582:	d1eb      	bne.n	800255c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002584:	4b25      	ldr	r3, [pc, #148]	@ (800261c <HAL_RCC_ClockConfig+0x1b8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d20c      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b22      	ldr	r3, [pc, #136]	@ (800261c <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b20      	ldr	r3, [pc, #128]	@ (800261c <HAL_RCC_ClockConfig+0x1b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e032      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b8:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4916      	ldr	r1, [pc, #88]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d6:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	490e      	ldr	r1, [pc, #56]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ea:	f000 f821 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	490a      	ldr	r1, [pc, #40]	@ (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	5ccb      	ldrb	r3, [r1, r3]
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	4a09      	ldr	r2, [pc, #36]	@ (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f812 	bl	8001634 <HAL_InitTick>

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023c00 	.word	0x40023c00
 8002620:	40023800 	.word	0x40023800
 8002624:	0800af38 	.word	0x0800af38
 8002628:	20000000 	.word	0x20000000
 800262c:	20000004 	.word	0x20000004

08002630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002634:	b094      	sub	sp, #80	@ 0x50
 8002636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	647b      	str	r3, [r7, #68]	@ 0x44
 800263c:	2300      	movs	r3, #0
 800263e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002640:	2300      	movs	r3, #0
 8002642:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002648:	4b79      	ldr	r3, [pc, #484]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b08      	cmp	r3, #8
 8002652:	d00d      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x40>
 8002654:	2b08      	cmp	r3, #8
 8002656:	f200 80e1 	bhi.w	800281c <HAL_RCC_GetSysClockFreq+0x1ec>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x34>
 800265e:	2b04      	cmp	r3, #4
 8002660:	d003      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0x3a>
 8002662:	e0db      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b73      	ldr	r3, [pc, #460]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x204>)
 8002666:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002668:	e0db      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800266a:	4b73      	ldr	r3, [pc, #460]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x208>)
 800266c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800266e:	e0d8      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002670:	4b6f      	ldr	r3, [pc, #444]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002678:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800267a:	4b6d      	ldr	r3, [pc, #436]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d063      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002686:	4b6a      	ldr	r3, [pc, #424]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	099b      	lsrs	r3, r3, #6
 800268c:	2200      	movs	r2, #0
 800268e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002690:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002698:	633b      	str	r3, [r7, #48]	@ 0x30
 800269a:	2300      	movs	r3, #0
 800269c:	637b      	str	r3, [r7, #52]	@ 0x34
 800269e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80026a2:	4622      	mov	r2, r4
 80026a4:	462b      	mov	r3, r5
 80026a6:	f04f 0000 	mov.w	r0, #0
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	0159      	lsls	r1, r3, #5
 80026b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b4:	0150      	lsls	r0, r2, #5
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4621      	mov	r1, r4
 80026bc:	1a51      	subs	r1, r2, r1
 80026be:	6139      	str	r1, [r7, #16]
 80026c0:	4629      	mov	r1, r5
 80026c2:	eb63 0301 	sbc.w	r3, r3, r1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026d4:	4659      	mov	r1, fp
 80026d6:	018b      	lsls	r3, r1, #6
 80026d8:	4651      	mov	r1, sl
 80026da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026de:	4651      	mov	r1, sl
 80026e0:	018a      	lsls	r2, r1, #6
 80026e2:	4651      	mov	r1, sl
 80026e4:	ebb2 0801 	subs.w	r8, r2, r1
 80026e8:	4659      	mov	r1, fp
 80026ea:	eb63 0901 	sbc.w	r9, r3, r1
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002702:	4690      	mov	r8, r2
 8002704:	4699      	mov	r9, r3
 8002706:	4623      	mov	r3, r4
 8002708:	eb18 0303 	adds.w	r3, r8, r3
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	462b      	mov	r3, r5
 8002710:	eb49 0303 	adc.w	r3, r9, r3
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002722:	4629      	mov	r1, r5
 8002724:	024b      	lsls	r3, r1, #9
 8002726:	4621      	mov	r1, r4
 8002728:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800272c:	4621      	mov	r1, r4
 800272e:	024a      	lsls	r2, r1, #9
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002736:	2200      	movs	r2, #0
 8002738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800273a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800273c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002740:	f7fe faaa 	bl	8000c98 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800274c:	e058      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274e:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	2200      	movs	r2, #0
 8002756:	4618      	mov	r0, r3
 8002758:	4611      	mov	r1, r2
 800275a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800275e:	623b      	str	r3, [r7, #32]
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
 8002764:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002768:	4642      	mov	r2, r8
 800276a:	464b      	mov	r3, r9
 800276c:	f04f 0000 	mov.w	r0, #0
 8002770:	f04f 0100 	mov.w	r1, #0
 8002774:	0159      	lsls	r1, r3, #5
 8002776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800277a:	0150      	lsls	r0, r2, #5
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4641      	mov	r1, r8
 8002782:	ebb2 0a01 	subs.w	sl, r2, r1
 8002786:	4649      	mov	r1, r9
 8002788:	eb63 0b01 	sbc.w	fp, r3, r1
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002798:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800279c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027a0:	ebb2 040a 	subs.w	r4, r2, sl
 80027a4:	eb63 050b 	sbc.w	r5, r3, fp
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	00eb      	lsls	r3, r5, #3
 80027b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b6:	00e2      	lsls	r2, r4, #3
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
 80027bc:	4643      	mov	r3, r8
 80027be:	18e3      	adds	r3, r4, r3
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	464b      	mov	r3, r9
 80027c4:	eb45 0303 	adc.w	r3, r5, r3
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027d6:	4629      	mov	r1, r5
 80027d8:	028b      	lsls	r3, r1, #10
 80027da:	4621      	mov	r1, r4
 80027dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e0:	4621      	mov	r1, r4
 80027e2:	028a      	lsls	r2, r1, #10
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ea:	2200      	movs	r2, #0
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	61fa      	str	r2, [r7, #28]
 80027f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f4:	f7fe fa50 	bl	8000c98 <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4613      	mov	r3, r2
 80027fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	0c1b      	lsrs	r3, r3, #16
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	3301      	adds	r3, #1
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002810:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800281a:	e002      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x204>)
 800281e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002824:	4618      	mov	r0, r3
 8002826:	3750      	adds	r7, #80	@ 0x50
 8002828:	46bd      	mov	sp, r7
 800282a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	00f42400 	.word	0x00f42400
 8002838:	007a1200 	.word	0x007a1200

0800283c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002840:	4b03      	ldr	r3, [pc, #12]	@ (8002850 <HAL_RCC_GetHCLKFreq+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000000 	.word	0x20000000

08002854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002858:	f7ff fff0 	bl	800283c <HAL_RCC_GetHCLKFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	0a9b      	lsrs	r3, r3, #10
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	4903      	ldr	r1, [pc, #12]	@ (8002878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40023800 	.word	0x40023800
 8002878:	0800af48 	.word	0x0800af48

0800287c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002880:	f7ff ffdc 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b05      	ldr	r3, [pc, #20]	@ (800289c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0b5b      	lsrs	r3, r3, #13
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4903      	ldr	r1, [pc, #12]	@ (80028a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	0800af48 	.word	0x0800af48

080028a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	220f      	movs	r2, #15
 80028b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028b4:	4b12      	ldr	r3, [pc, #72]	@ (8002900 <HAL_RCC_GetClockConfig+0x5c>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <HAL_RCC_GetClockConfig+0x5c>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <HAL_RCC_GetClockConfig+0x5c>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028d8:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <HAL_RCC_GetClockConfig+0x5c>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	08db      	lsrs	r3, r3, #3
 80028de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028e6:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <HAL_RCC_GetClockConfig+0x60>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0207 	and.w	r2, r3, #7
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	601a      	str	r2, [r3, #0]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	40023c00 	.word	0x40023c00

08002908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e041      	b.n	800299e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe fe16 	bl	8001560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f000 fb1e 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d001      	beq.n	80029c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e044      	b.n	8002a4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a58 <HAL_TIM_Base_Start_IT+0xb0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d018      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0x6c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ea:	d013      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0x6c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a5c <HAL_TIM_Base_Start_IT+0xb4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00e      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0x6c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a19      	ldr	r2, [pc, #100]	@ (8002a60 <HAL_TIM_Base_Start_IT+0xb8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d009      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0x6c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a17      	ldr	r2, [pc, #92]	@ (8002a64 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d004      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0x6c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a16      	ldr	r2, [pc, #88]	@ (8002a68 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d111      	bne.n	8002a38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d010      	beq.n	8002a48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0201 	orr.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a36:	e007      	b.n	8002a48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40010000 	.word	0x40010000
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40000800 	.word	0x40000800
 8002a64:	40000c00 	.word	0x40000c00
 8002a68:	40014000 	.word	0x40014000

08002a6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e097      	b.n	8002bb0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d106      	bne.n	8002a9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7fe fd1d 	bl	80014d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ab0:	f023 0307 	bic.w	r3, r3, #7
 8002ab4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f000 fa61 	bl	8002f88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aee:	f023 0303 	bic.w	r3, r3, #3
 8002af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	4313      	orrs	r3, r2
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002b0c:	f023 030c 	bic.w	r3, r3, #12
 8002b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	011a      	lsls	r2, r3, #4
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	031b      	lsls	r3, r3, #12
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002b4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002b52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bc8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bd0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bd8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002be0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d110      	bne.n	8002c0a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d102      	bne.n	8002bf4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bee:	7b7b      	ldrb	r3, [r7, #13]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d001      	beq.n	8002bf8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e069      	b.n	8002ccc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c08:	e031      	b.n	8002c6e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d110      	bne.n	8002c32 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c10:	7bbb      	ldrb	r3, [r7, #14]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d102      	bne.n	8002c1c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c16:	7b3b      	ldrb	r3, [r7, #12]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d001      	beq.n	8002c20 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e055      	b.n	8002ccc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c30:	e01d      	b.n	8002c6e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d108      	bne.n	8002c4a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c38:	7bbb      	ldrb	r3, [r7, #14]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d105      	bne.n	8002c4a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c3e:	7b7b      	ldrb	r3, [r7, #13]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d102      	bne.n	8002c4a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c44:	7b3b      	ldrb	r3, [r7, #12]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d001      	beq.n	8002c4e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e03e      	b.n	8002ccc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2202      	movs	r2, #2
 8002c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_TIM_Encoder_Start+0xc4>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d008      	beq.n	8002c8c <HAL_TIM_Encoder_Start+0xd4>
 8002c7a:	e00f      	b.n	8002c9c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2201      	movs	r2, #1
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fb1b 	bl	80032c0 <TIM_CCxChannelCmd>
      break;
 8002c8a:	e016      	b.n	8002cba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2201      	movs	r2, #1
 8002c92:	2104      	movs	r1, #4
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fb13 	bl	80032c0 <TIM_CCxChannelCmd>
      break;
 8002c9a:	e00e      	b.n	8002cba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fb0b 	bl	80032c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	2104      	movs	r1, #4
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fb04 	bl	80032c0 <TIM_CCxChannelCmd>
      break;
 8002cb8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0201 	orr.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d020      	beq.n	8002d38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01b      	beq.n	8002d38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0202 	mvn.w	r2, #2
 8002d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f914 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002d24:	e005      	b.n	8002d32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f906 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f917 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d020      	beq.n	8002d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01b      	beq.n	8002d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0204 	mvn.w	r2, #4
 8002d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f8ee 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002d70:	e005      	b.n	8002d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f8e0 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f8f1 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d020      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01b      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0208 	mvn.w	r2, #8
 8002da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2204      	movs	r2, #4
 8002da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f8c8 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002dbc:	e005      	b.n	8002dca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f8ba 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f8cb 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d020      	beq.n	8002e1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01b      	beq.n	8002e1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0210 	mvn.w	r2, #16
 8002dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2208      	movs	r2, #8
 8002df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f8a2 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8002e08:	e005      	b.n	8002e16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f894 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f8a5 	bl	8002f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00c      	beq.n	8002e40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0201 	mvn.w	r2, #1
 8002e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe fb06 	bl	800144c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00c      	beq.n	8002e64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 facc 	bl	80033fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00c      	beq.n	8002e88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f876 	bl	8002f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00c      	beq.n	8002eac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0220 	mvn.w	r2, #32
 8002ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa9e 	bl	80033e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eac:	bf00      	nop
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_TIM_SlaveConfigSynchro+0x18>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e031      	b.n	8002f30 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002edc:	6839      	ldr	r1, [r7, #0]
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f8de 	bl	80030a0 <TIM_SlaveTimer_SetConfig>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e018      	b.n	8002f30 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f0c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f1c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3a      	ldr	r2, [pc, #232]	@ (8003084 <TIM_Base_SetConfig+0xfc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00f      	beq.n	8002fc0 <TIM_Base_SetConfig+0x38>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa6:	d00b      	beq.n	8002fc0 <TIM_Base_SetConfig+0x38>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a37      	ldr	r2, [pc, #220]	@ (8003088 <TIM_Base_SetConfig+0x100>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d007      	beq.n	8002fc0 <TIM_Base_SetConfig+0x38>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a36      	ldr	r2, [pc, #216]	@ (800308c <TIM_Base_SetConfig+0x104>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <TIM_Base_SetConfig+0x38>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a35      	ldr	r2, [pc, #212]	@ (8003090 <TIM_Base_SetConfig+0x108>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d108      	bne.n	8002fd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8003084 <TIM_Base_SetConfig+0xfc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01b      	beq.n	8003012 <TIM_Base_SetConfig+0x8a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe0:	d017      	beq.n	8003012 <TIM_Base_SetConfig+0x8a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a28      	ldr	r2, [pc, #160]	@ (8003088 <TIM_Base_SetConfig+0x100>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <TIM_Base_SetConfig+0x8a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a27      	ldr	r2, [pc, #156]	@ (800308c <TIM_Base_SetConfig+0x104>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00f      	beq.n	8003012 <TIM_Base_SetConfig+0x8a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a26      	ldr	r2, [pc, #152]	@ (8003090 <TIM_Base_SetConfig+0x108>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00b      	beq.n	8003012 <TIM_Base_SetConfig+0x8a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a25      	ldr	r2, [pc, #148]	@ (8003094 <TIM_Base_SetConfig+0x10c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d007      	beq.n	8003012 <TIM_Base_SetConfig+0x8a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a24      	ldr	r2, [pc, #144]	@ (8003098 <TIM_Base_SetConfig+0x110>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d003      	beq.n	8003012 <TIM_Base_SetConfig+0x8a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a23      	ldr	r2, [pc, #140]	@ (800309c <TIM_Base_SetConfig+0x114>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d108      	bne.n	8003024 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a0e      	ldr	r2, [pc, #56]	@ (8003084 <TIM_Base_SetConfig+0xfc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d103      	bne.n	8003058 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d105      	bne.n	8003076 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f023 0201 	bic.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	611a      	str	r2, [r3, #16]
  }
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40010000 	.word	0x40010000
 8003088:	40000400 	.word	0x40000400
 800308c:	40000800 	.word	0x40000800
 8003090:	40000c00 	.word	0x40000c00
 8003094:	40014000 	.word	0x40014000
 8003098:	40014400 	.word	0x40014400
 800309c:	40014800 	.word	0x40014800

080030a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030bc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f023 0307 	bic.w	r3, r3, #7
 80030ce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b70      	cmp	r3, #112	@ 0x70
 80030e8:	d01a      	beq.n	8003120 <TIM_SlaveTimer_SetConfig+0x80>
 80030ea:	2b70      	cmp	r3, #112	@ 0x70
 80030ec:	d860      	bhi.n	80031b0 <TIM_SlaveTimer_SetConfig+0x110>
 80030ee:	2b60      	cmp	r3, #96	@ 0x60
 80030f0:	d054      	beq.n	800319c <TIM_SlaveTimer_SetConfig+0xfc>
 80030f2:	2b60      	cmp	r3, #96	@ 0x60
 80030f4:	d85c      	bhi.n	80031b0 <TIM_SlaveTimer_SetConfig+0x110>
 80030f6:	2b50      	cmp	r3, #80	@ 0x50
 80030f8:	d046      	beq.n	8003188 <TIM_SlaveTimer_SetConfig+0xe8>
 80030fa:	2b50      	cmp	r3, #80	@ 0x50
 80030fc:	d858      	bhi.n	80031b0 <TIM_SlaveTimer_SetConfig+0x110>
 80030fe:	2b40      	cmp	r3, #64	@ 0x40
 8003100:	d019      	beq.n	8003136 <TIM_SlaveTimer_SetConfig+0x96>
 8003102:	2b40      	cmp	r3, #64	@ 0x40
 8003104:	d854      	bhi.n	80031b0 <TIM_SlaveTimer_SetConfig+0x110>
 8003106:	2b30      	cmp	r3, #48	@ 0x30
 8003108:	d055      	beq.n	80031b6 <TIM_SlaveTimer_SetConfig+0x116>
 800310a:	2b30      	cmp	r3, #48	@ 0x30
 800310c:	d850      	bhi.n	80031b0 <TIM_SlaveTimer_SetConfig+0x110>
 800310e:	2b20      	cmp	r3, #32
 8003110:	d051      	beq.n	80031b6 <TIM_SlaveTimer_SetConfig+0x116>
 8003112:	2b20      	cmp	r3, #32
 8003114:	d84c      	bhi.n	80031b0 <TIM_SlaveTimer_SetConfig+0x110>
 8003116:	2b00      	cmp	r3, #0
 8003118:	d04d      	beq.n	80031b6 <TIM_SlaveTimer_SetConfig+0x116>
 800311a:	2b10      	cmp	r3, #16
 800311c:	d04b      	beq.n	80031b6 <TIM_SlaveTimer_SetConfig+0x116>
 800311e:	e047      	b.n	80031b0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003130:	f000 f8a6 	bl	8003280 <TIM_ETR_SetConfig>
      break;
 8003134:	e040      	b.n	80031b8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b05      	cmp	r3, #5
 800313c:	d101      	bne.n	8003142 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e03b      	b.n	80031ba <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003168:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	4313      	orrs	r3, r2
 8003174:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	621a      	str	r2, [r3, #32]
      break;
 8003186:	e017      	b.n	80031b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003194:	461a      	mov	r2, r3
 8003196:	f000 f814 	bl	80031c2 <TIM_TI1_ConfigInputStage>
      break;
 800319a:	e00d      	b.n	80031b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031a8:	461a      	mov	r2, r3
 80031aa:	f000 f839 	bl	8003220 <TIM_TI2_ConfigInputStage>
      break;
 80031ae:	e003      	b.n	80031b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	75fb      	strb	r3, [r7, #23]
      break;
 80031b4:	e000      	b.n	80031b8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80031b6:	bf00      	nop
  }

  return status;
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b087      	sub	sp, #28
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	f023 0201 	bic.w	r2, r3, #1
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f023 030a 	bic.w	r3, r3, #10
 80031fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	621a      	str	r2, [r3, #32]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f023 0210 	bic.w	r2, r3, #16
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800324a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	031b      	lsls	r3, r3, #12
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800325c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	621a      	str	r2, [r3, #32]
}
 8003274:	bf00      	nop
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800329a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	021a      	lsls	r2, r3, #8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	609a      	str	r2, [r3, #8]
}
 80032b4:	bf00      	nop
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	2201      	movs	r2, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a1a      	ldr	r2, [r3, #32]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	401a      	ands	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a1a      	ldr	r2, [r3, #32]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	fa01 f303 	lsl.w	r3, r1, r3
 80032f8:	431a      	orrs	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	621a      	str	r2, [r3, #32]
}
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003320:	2302      	movs	r3, #2
 8003322:	e050      	b.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1c      	ldr	r2, [pc, #112]	@ (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d018      	beq.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003370:	d013      	beq.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a18      	ldr	r2, [pc, #96]	@ (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00e      	beq.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a16      	ldr	r2, [pc, #88]	@ (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d009      	beq.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a15      	ldr	r2, [pc, #84]	@ (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d004      	beq.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a13      	ldr	r2, [pc, #76]	@ (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d10c      	bne.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40010000 	.word	0x40010000
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40000800 	.word	0x40000800
 80033e0:	40000c00 	.word	0x40000c00
 80033e4:	40014000 	.word	0x40014000

080033e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e042      	b.n	80034a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe f8b4 	bl	80015a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2224      	movs	r2, #36	@ 0x24
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f973 	bl	8003740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	@ 0x28
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d175      	bne.n	80035bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_UART_Transmit+0x2c>
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e06e      	b.n	80035be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2221      	movs	r2, #33	@ 0x21
 80034ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ee:	f7fe fa91 	bl	8001a14 <HAL_GetTick>
 80034f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003508:	d108      	bne.n	800351c <HAL_UART_Transmit+0x6c>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	e003      	b.n	8003524 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003520:	2300      	movs	r3, #0
 8003522:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003524:	e02e      	b.n	8003584 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2200      	movs	r2, #0
 800352e:	2180      	movs	r1, #128	@ 0x80
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f848 	bl	80035c6 <UART_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e03a      	b.n	80035be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10b      	bne.n	8003566 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800355c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	3302      	adds	r3, #2
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	e007      	b.n	8003576 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	781a      	ldrb	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	3301      	adds	r3, #1
 8003574:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1cb      	bne.n	8003526 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2200      	movs	r2, #0
 8003596:	2140      	movs	r1, #64	@ 0x40
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f814 	bl	80035c6 <UART_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e006      	b.n	80035be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	4613      	mov	r3, r2
 80035d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d6:	e03b      	b.n	8003650 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d037      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e0:	f7fe fa18 	bl	8001a14 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	6a3a      	ldr	r2, [r7, #32]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e03a      	b.n	8003670 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d023      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b80      	cmp	r3, #128	@ 0x80
 800360c:	d020      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout+0x8a>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b40      	cmp	r3, #64	@ 0x40
 8003612:	d01d      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b08      	cmp	r3, #8
 8003620:	d116      	bne.n	8003650 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f81d 	bl	8003678 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2208      	movs	r2, #8
 8003642:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e00f      	b.n	8003670 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4013      	ands	r3, r2
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	429a      	cmp	r2, r3
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	429a      	cmp	r2, r3
 800366c:	d0b4      	beq.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003678:	b480      	push	{r7}
 800367a:	b095      	sub	sp, #84	@ 0x54
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	330c      	adds	r3, #12
 8003686:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368a:	e853 3f00 	ldrex	r3, [r3]
 800368e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003692:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	330c      	adds	r3, #12
 800369e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80036a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036a8:	e841 2300 	strex	r3, r2, [r1]
 80036ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e5      	bne.n	8003680 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3314      	adds	r3, #20
 80036ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3314      	adds	r3, #20
 80036d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e5      	bne.n	80036b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d119      	bne.n	8003724 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	330c      	adds	r3, #12
 80036f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	e853 3f00 	ldrex	r3, [r3]
 80036fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f023 0310 	bic.w	r3, r3, #16
 8003706:	647b      	str	r3, [r7, #68]	@ 0x44
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	330c      	adds	r3, #12
 800370e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003710:	61ba      	str	r2, [r7, #24]
 8003712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003714:	6979      	ldr	r1, [r7, #20]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	e841 2300 	strex	r3, r2, [r1]
 800371c:	613b      	str	r3, [r7, #16]
   return(result);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e5      	bne.n	80036f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003732:	bf00      	nop
 8003734:	3754      	adds	r7, #84	@ 0x54
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003744:	b0c0      	sub	sp, #256	@ 0x100
 8003746:	af00      	add	r7, sp, #0
 8003748:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375c:	68d9      	ldr	r1, [r3, #12]
 800375e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	ea40 0301 	orr.w	r3, r0, r1
 8003768:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	431a      	orrs	r2, r3
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	431a      	orrs	r2, r3
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003798:	f021 010c 	bic.w	r1, r1, #12
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037a6:	430b      	orrs	r3, r1
 80037a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ba:	6999      	ldr	r1, [r3, #24]
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	ea40 0301 	orr.w	r3, r0, r1
 80037c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	4b8f      	ldr	r3, [pc, #572]	@ (8003a0c <UART_SetConfig+0x2cc>)
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d005      	beq.n	80037e0 <UART_SetConfig+0xa0>
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4b8d      	ldr	r3, [pc, #564]	@ (8003a10 <UART_SetConfig+0x2d0>)
 80037dc:	429a      	cmp	r2, r3
 80037de:	d104      	bne.n	80037ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037e0:	f7ff f84c 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 80037e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037e8:	e003      	b.n	80037f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037ea:	f7ff f833 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 80037ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037fc:	f040 810c 	bne.w	8003a18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003804:	2200      	movs	r2, #0
 8003806:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800380a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800380e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003812:	4622      	mov	r2, r4
 8003814:	462b      	mov	r3, r5
 8003816:	1891      	adds	r1, r2, r2
 8003818:	65b9      	str	r1, [r7, #88]	@ 0x58
 800381a:	415b      	adcs	r3, r3
 800381c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800381e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003822:	4621      	mov	r1, r4
 8003824:	eb12 0801 	adds.w	r8, r2, r1
 8003828:	4629      	mov	r1, r5
 800382a:	eb43 0901 	adc.w	r9, r3, r1
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800383a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800383e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003842:	4690      	mov	r8, r2
 8003844:	4699      	mov	r9, r3
 8003846:	4623      	mov	r3, r4
 8003848:	eb18 0303 	adds.w	r3, r8, r3
 800384c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003850:	462b      	mov	r3, r5
 8003852:	eb49 0303 	adc.w	r3, r9, r3
 8003856:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800385a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003866:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800386a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800386e:	460b      	mov	r3, r1
 8003870:	18db      	adds	r3, r3, r3
 8003872:	653b      	str	r3, [r7, #80]	@ 0x50
 8003874:	4613      	mov	r3, r2
 8003876:	eb42 0303 	adc.w	r3, r2, r3
 800387a:	657b      	str	r3, [r7, #84]	@ 0x54
 800387c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003880:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003884:	f7fd fa08 	bl	8000c98 <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4b61      	ldr	r3, [pc, #388]	@ (8003a14 <UART_SetConfig+0x2d4>)
 800388e:	fba3 2302 	umull	r2, r3, r3, r2
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	011c      	lsls	r4, r3, #4
 8003896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800389a:	2200      	movs	r2, #0
 800389c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038a8:	4642      	mov	r2, r8
 80038aa:	464b      	mov	r3, r9
 80038ac:	1891      	adds	r1, r2, r2
 80038ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038b0:	415b      	adcs	r3, r3
 80038b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038b8:	4641      	mov	r1, r8
 80038ba:	eb12 0a01 	adds.w	sl, r2, r1
 80038be:	4649      	mov	r1, r9
 80038c0:	eb43 0b01 	adc.w	fp, r3, r1
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038d8:	4692      	mov	sl, r2
 80038da:	469b      	mov	fp, r3
 80038dc:	4643      	mov	r3, r8
 80038de:	eb1a 0303 	adds.w	r3, sl, r3
 80038e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038e6:	464b      	mov	r3, r9
 80038e8:	eb4b 0303 	adc.w	r3, fp, r3
 80038ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003900:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003904:	460b      	mov	r3, r1
 8003906:	18db      	adds	r3, r3, r3
 8003908:	643b      	str	r3, [r7, #64]	@ 0x40
 800390a:	4613      	mov	r3, r2
 800390c:	eb42 0303 	adc.w	r3, r2, r3
 8003910:	647b      	str	r3, [r7, #68]	@ 0x44
 8003912:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003916:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800391a:	f7fd f9bd 	bl	8000c98 <__aeabi_uldivmod>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4611      	mov	r1, r2
 8003924:	4b3b      	ldr	r3, [pc, #236]	@ (8003a14 <UART_SetConfig+0x2d4>)
 8003926:	fba3 2301 	umull	r2, r3, r3, r1
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	2264      	movs	r2, #100	@ 0x64
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	1acb      	subs	r3, r1, r3
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800393a:	4b36      	ldr	r3, [pc, #216]	@ (8003a14 <UART_SetConfig+0x2d4>)
 800393c:	fba3 2302 	umull	r2, r3, r3, r2
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003948:	441c      	add	r4, r3
 800394a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800394e:	2200      	movs	r2, #0
 8003950:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003954:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003958:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800395c:	4642      	mov	r2, r8
 800395e:	464b      	mov	r3, r9
 8003960:	1891      	adds	r1, r2, r2
 8003962:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003964:	415b      	adcs	r3, r3
 8003966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003968:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800396c:	4641      	mov	r1, r8
 800396e:	1851      	adds	r1, r2, r1
 8003970:	6339      	str	r1, [r7, #48]	@ 0x30
 8003972:	4649      	mov	r1, r9
 8003974:	414b      	adcs	r3, r1
 8003976:	637b      	str	r3, [r7, #52]	@ 0x34
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003984:	4659      	mov	r1, fp
 8003986:	00cb      	lsls	r3, r1, #3
 8003988:	4651      	mov	r1, sl
 800398a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398e:	4651      	mov	r1, sl
 8003990:	00ca      	lsls	r2, r1, #3
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	4603      	mov	r3, r0
 8003998:	4642      	mov	r2, r8
 800399a:	189b      	adds	r3, r3, r2
 800399c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039a0:	464b      	mov	r3, r9
 80039a2:	460a      	mov	r2, r1
 80039a4:	eb42 0303 	adc.w	r3, r2, r3
 80039a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039c0:	460b      	mov	r3, r1
 80039c2:	18db      	adds	r3, r3, r3
 80039c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039c6:	4613      	mov	r3, r2
 80039c8:	eb42 0303 	adc.w	r3, r2, r3
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039d6:	f7fd f95f 	bl	8000c98 <__aeabi_uldivmod>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4b0d      	ldr	r3, [pc, #52]	@ (8003a14 <UART_SetConfig+0x2d4>)
 80039e0:	fba3 1302 	umull	r1, r3, r3, r2
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	2164      	movs	r1, #100	@ 0x64
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	3332      	adds	r3, #50	@ 0x32
 80039f2:	4a08      	ldr	r2, [pc, #32]	@ (8003a14 <UART_SetConfig+0x2d4>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	f003 0207 	and.w	r2, r3, #7
 80039fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4422      	add	r2, r4
 8003a06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a08:	e106      	b.n	8003c18 <UART_SetConfig+0x4d8>
 8003a0a:	bf00      	nop
 8003a0c:	40011000 	.word	0x40011000
 8003a10:	40011400 	.word	0x40011400
 8003a14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a2a:	4642      	mov	r2, r8
 8003a2c:	464b      	mov	r3, r9
 8003a2e:	1891      	adds	r1, r2, r2
 8003a30:	6239      	str	r1, [r7, #32]
 8003a32:	415b      	adcs	r3, r3
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a3a:	4641      	mov	r1, r8
 8003a3c:	1854      	adds	r4, r2, r1
 8003a3e:	4649      	mov	r1, r9
 8003a40:	eb43 0501 	adc.w	r5, r3, r1
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	00eb      	lsls	r3, r5, #3
 8003a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a52:	00e2      	lsls	r2, r4, #3
 8003a54:	4614      	mov	r4, r2
 8003a56:	461d      	mov	r5, r3
 8003a58:	4643      	mov	r3, r8
 8003a5a:	18e3      	adds	r3, r4, r3
 8003a5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a60:	464b      	mov	r3, r9
 8003a62:	eb45 0303 	adc.w	r3, r5, r3
 8003a66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a86:	4629      	mov	r1, r5
 8003a88:	008b      	lsls	r3, r1, #2
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a90:	4621      	mov	r1, r4
 8003a92:	008a      	lsls	r2, r1, #2
 8003a94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a98:	f7fd f8fe 	bl	8000c98 <__aeabi_uldivmod>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4b60      	ldr	r3, [pc, #384]	@ (8003c24 <UART_SetConfig+0x4e4>)
 8003aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	011c      	lsls	r4, r3, #4
 8003aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ab4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ab8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003abc:	4642      	mov	r2, r8
 8003abe:	464b      	mov	r3, r9
 8003ac0:	1891      	adds	r1, r2, r2
 8003ac2:	61b9      	str	r1, [r7, #24]
 8003ac4:	415b      	adcs	r3, r3
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003acc:	4641      	mov	r1, r8
 8003ace:	1851      	adds	r1, r2, r1
 8003ad0:	6139      	str	r1, [r7, #16]
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	414b      	adcs	r3, r1
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ae4:	4659      	mov	r1, fp
 8003ae6:	00cb      	lsls	r3, r1, #3
 8003ae8:	4651      	mov	r1, sl
 8003aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aee:	4651      	mov	r1, sl
 8003af0:	00ca      	lsls	r2, r1, #3
 8003af2:	4610      	mov	r0, r2
 8003af4:	4619      	mov	r1, r3
 8003af6:	4603      	mov	r3, r0
 8003af8:	4642      	mov	r2, r8
 8003afa:	189b      	adds	r3, r3, r2
 8003afc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b00:	464b      	mov	r3, r9
 8003b02:	460a      	mov	r2, r1
 8003b04:	eb42 0303 	adc.w	r3, r2, r3
 8003b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b24:	4649      	mov	r1, r9
 8003b26:	008b      	lsls	r3, r1, #2
 8003b28:	4641      	mov	r1, r8
 8003b2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b2e:	4641      	mov	r1, r8
 8003b30:	008a      	lsls	r2, r1, #2
 8003b32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b36:	f7fd f8af 	bl	8000c98 <__aeabi_uldivmod>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4b38      	ldr	r3, [pc, #224]	@ (8003c24 <UART_SetConfig+0x4e4>)
 8003b42:	fba3 2301 	umull	r2, r3, r3, r1
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	2264      	movs	r2, #100	@ 0x64
 8003b4a:	fb02 f303 	mul.w	r3, r2, r3
 8003b4e:	1acb      	subs	r3, r1, r3
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	3332      	adds	r3, #50	@ 0x32
 8003b54:	4a33      	ldr	r2, [pc, #204]	@ (8003c24 <UART_SetConfig+0x4e4>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b60:	441c      	add	r4, r3
 8003b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b66:	2200      	movs	r2, #0
 8003b68:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b70:	4642      	mov	r2, r8
 8003b72:	464b      	mov	r3, r9
 8003b74:	1891      	adds	r1, r2, r2
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	415b      	adcs	r3, r3
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b80:	4641      	mov	r1, r8
 8003b82:	1851      	adds	r1, r2, r1
 8003b84:	6039      	str	r1, [r7, #0]
 8003b86:	4649      	mov	r1, r9
 8003b88:	414b      	adcs	r3, r1
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b98:	4659      	mov	r1, fp
 8003b9a:	00cb      	lsls	r3, r1, #3
 8003b9c:	4651      	mov	r1, sl
 8003b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ba2:	4651      	mov	r1, sl
 8003ba4:	00ca      	lsls	r2, r1, #3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	4642      	mov	r2, r8
 8003bae:	189b      	adds	r3, r3, r2
 8003bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bb2:	464b      	mov	r3, r9
 8003bb4:	460a      	mov	r2, r1
 8003bb6:	eb42 0303 	adc.w	r3, r2, r3
 8003bba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	008b      	lsls	r3, r1, #2
 8003bd8:	4641      	mov	r1, r8
 8003bda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bde:	4641      	mov	r1, r8
 8003be0:	008a      	lsls	r2, r1, #2
 8003be2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003be6:	f7fd f857 	bl	8000c98 <__aeabi_uldivmod>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4b0d      	ldr	r3, [pc, #52]	@ (8003c24 <UART_SetConfig+0x4e4>)
 8003bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	2164      	movs	r1, #100	@ 0x64
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	3332      	adds	r3, #50	@ 0x32
 8003c02:	4a08      	ldr	r2, [pc, #32]	@ (8003c24 <UART_SetConfig+0x4e4>)
 8003c04:	fba2 2303 	umull	r2, r3, r2, r3
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	f003 020f 	and.w	r2, r3, #15
 8003c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4422      	add	r2, r4
 8003c16:	609a      	str	r2, [r3, #8]
}
 8003c18:	bf00      	nop
 8003c1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c24:	51eb851f 	.word	0x51eb851f

08003c28 <__NVIC_SetPriority>:
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	6039      	str	r1, [r7, #0]
 8003c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	db0a      	blt.n	8003c52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	490c      	ldr	r1, [pc, #48]	@ (8003c74 <__NVIC_SetPriority+0x4c>)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	0112      	lsls	r2, r2, #4
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c50:	e00a      	b.n	8003c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	4908      	ldr	r1, [pc, #32]	@ (8003c78 <__NVIC_SetPriority+0x50>)
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	3b04      	subs	r3, #4
 8003c60:	0112      	lsls	r2, r2, #4
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	440b      	add	r3, r1
 8003c66:	761a      	strb	r2, [r3, #24]
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	e000e100 	.word	0xe000e100
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003c80:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <SysTick_Handler+0x1c>)
 8003c82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003c84:	f001 fd18 	bl	80056b8 <xTaskGetSchedulerState>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d001      	beq.n	8003c92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003c8e:	f002 fb13 	bl	80062b8 <xPortSysTickHandler>
  }
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	e000e010 	.word	0xe000e010

08003c9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	f06f 0004 	mvn.w	r0, #4
 8003ca6:	f7ff ffbf 	bl	8003c28 <__NVIC_SetPriority>
#endif
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cb6:	f3ef 8305 	mrs	r3, IPSR
 8003cba:	603b      	str	r3, [r7, #0]
  return(result);
 8003cbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003cc2:	f06f 0305 	mvn.w	r3, #5
 8003cc6:	607b      	str	r3, [r7, #4]
 8003cc8:	e00c      	b.n	8003ce4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003cca:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <osKernelInitialize+0x44>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d105      	bne.n	8003cde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003cd2:	4b08      	ldr	r3, [pc, #32]	@ (8003cf4 <osKernelInitialize+0x44>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	607b      	str	r3, [r7, #4]
 8003cdc:	e002      	b.n	8003ce4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ce4:	687b      	ldr	r3, [r7, #4]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000388 	.word	0x20000388

08003cf8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cfe:	f3ef 8305 	mrs	r3, IPSR
 8003d02:	603b      	str	r3, [r7, #0]
  return(result);
 8003d04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003d0a:	f06f 0305 	mvn.w	r3, #5
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	e010      	b.n	8003d34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d12:	4b0b      	ldr	r3, [pc, #44]	@ (8003d40 <osKernelStart+0x48>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d109      	bne.n	8003d2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003d1a:	f7ff ffbf 	bl	8003c9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003d1e:	4b08      	ldr	r3, [pc, #32]	@ (8003d40 <osKernelStart+0x48>)
 8003d20:	2202      	movs	r2, #2
 8003d22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d24:	f001 f87a 	bl	8004e1c <vTaskStartScheduler>
      stat = osOK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	e002      	b.n	8003d34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d34:	687b      	ldr	r3, [r7, #4]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000388 	.word	0x20000388

08003d44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08e      	sub	sp, #56	@ 0x38
 8003d48:	af04      	add	r7, sp, #16
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d54:	f3ef 8305 	mrs	r3, IPSR
 8003d58:	617b      	str	r3, [r7, #20]
  return(result);
 8003d5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d17e      	bne.n	8003e5e <osThreadNew+0x11a>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d07b      	beq.n	8003e5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003d66:	2380      	movs	r3, #128	@ 0x80
 8003d68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003d6a:	2318      	movs	r3, #24
 8003d6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295
 8003d76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d045      	beq.n	8003e0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <osThreadNew+0x48>
        name = attr->name;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <osThreadNew+0x6e>
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b38      	cmp	r3, #56	@ 0x38
 8003da4:	d805      	bhi.n	8003db2 <osThreadNew+0x6e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <osThreadNew+0x72>
        return (NULL);
 8003db2:	2300      	movs	r3, #0
 8003db4:	e054      	b.n	8003e60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00e      	beq.n	8003dec <osThreadNew+0xa8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2b5b      	cmp	r3, #91	@ 0x5b
 8003dd4:	d90a      	bls.n	8003dec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d006      	beq.n	8003dec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <osThreadNew+0xa8>
        mem = 1;
 8003de6:	2301      	movs	r3, #1
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	e010      	b.n	8003e0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10c      	bne.n	8003e0e <osThreadNew+0xca>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d108      	bne.n	8003e0e <osThreadNew+0xca>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d104      	bne.n	8003e0e <osThreadNew+0xca>
          mem = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	e001      	b.n	8003e0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d110      	bne.n	8003e36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e1c:	9202      	str	r2, [sp, #8]
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6a3a      	ldr	r2, [r7, #32]
 8003e28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 fe1a 	bl	8004a64 <xTaskCreateStatic>
 8003e30:	4603      	mov	r3, r0
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	e013      	b.n	8003e5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d110      	bne.n	8003e5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	f107 0310 	add.w	r3, r7, #16
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fe68 	bl	8004b24 <xTaskCreate>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <osThreadNew+0x11a>
            hTask = NULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e5e:	693b      	ldr	r3, [r7, #16]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3728      	adds	r7, #40	@ 0x28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e70:	f3ef 8305 	mrs	r3, IPSR
 8003e74:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <osDelay+0x1c>
    stat = osErrorISR;
 8003e7c:	f06f 0305 	mvn.w	r3, #5
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	e007      	b.n	8003e94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 ff8e 	bl	8004db0 <vTaskDelay>
    }
  }

  return (stat);
 8003e94:	68fb      	ldr	r3, [r7, #12]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a07      	ldr	r2, [pc, #28]	@ (8003ecc <vApplicationGetIdleTaskMemory+0x2c>)
 8003eb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4a06      	ldr	r2, [pc, #24]	@ (8003ed0 <vApplicationGetIdleTaskMemory+0x30>)
 8003eb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2280      	movs	r2, #128	@ 0x80
 8003ebc:	601a      	str	r2, [r3, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	2000038c 	.word	0x2000038c
 8003ed0:	200003e8 	.word	0x200003e8

08003ed4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4a07      	ldr	r2, [pc, #28]	@ (8003f00 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ee4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4a06      	ldr	r2, [pc, #24]	@ (8003f04 <vApplicationGetTimerTaskMemory+0x30>)
 8003eea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ef2:	601a      	str	r2, [r3, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	200005e8 	.word	0x200005e8
 8003f04:	20000644 	.word	0x20000644

08003f08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f103 0208 	add.w	r2, r3, #8
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f103 0208 	add.w	r2, r3, #8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f103 0208 	add.w	r2, r3, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	601a      	str	r2, [r3, #0]
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d103      	bne.n	8003fca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e00c      	b.n	8003fe4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3308      	adds	r3, #8
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e002      	b.n	8003fd8 <vListInsert+0x2e>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d2f6      	bcs.n	8003fd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	601a      	str	r2, [r3, #0]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6892      	ldr	r2, [r2, #8]
 8004032:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6852      	ldr	r2, [r2, #4]
 800403c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d103      	bne.n	8004050 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	1e5a      	subs	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10b      	bne.n	800409c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	e7fd      	b.n	8004098 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800409c:	f002 f87c 	bl	8006198 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a8:	68f9      	ldr	r1, [r7, #12]
 80040aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	441a      	add	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040cc:	3b01      	subs	r3, #1
 80040ce:	68f9      	ldr	r1, [r7, #12]
 80040d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80040d2:	fb01 f303 	mul.w	r3, r1, r3
 80040d6:	441a      	add	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	22ff      	movs	r2, #255	@ 0xff
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	22ff      	movs	r2, #255	@ 0xff
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d114      	bne.n	800411c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01a      	beq.n	8004130 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3310      	adds	r3, #16
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 f91a 	bl	8005338 <xTaskRemoveFromEventList>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d012      	beq.n	8004130 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800410a:	4b0d      	ldr	r3, [pc, #52]	@ (8004140 <xQueueGenericReset+0xd0>)
 800410c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	e009      	b.n	8004130 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3310      	adds	r3, #16
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fef1 	bl	8003f08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3324      	adds	r3, #36	@ 0x24
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff feec 	bl	8003f08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004130:	f002 f864 	bl	80061fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004134:	2301      	movs	r3, #1
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	e000ed04 	.word	0xe000ed04

08004144 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08e      	sub	sp, #56	@ 0x38
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800416a:	bf00      	nop
 800416c:	bf00      	nop
 800416e:	e7fd      	b.n	800416c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	e7fd      	b.n	800418a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <xQueueGenericCreateStatic+0x56>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <xQueueGenericCreateStatic+0x5a>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <xQueueGenericCreateStatic+0x5c>
 800419e:	2300      	movs	r3, #0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	623b      	str	r3, [r7, #32]
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	e7fd      	b.n	80041b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <xQueueGenericCreateStatic+0x84>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <xQueueGenericCreateStatic+0x88>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <xQueueGenericCreateStatic+0x8a>
 80041cc:	2300      	movs	r3, #0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	61fb      	str	r3, [r7, #28]
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	e7fd      	b.n	80041e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041ea:	2350      	movs	r3, #80	@ 0x50
 80041ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b50      	cmp	r3, #80	@ 0x50
 80041f2:	d00b      	beq.n	800420c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	61bb      	str	r3, [r7, #24]
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800420c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00d      	beq.n	8004234 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004220:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f805 	bl	800423e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004236:	4618      	mov	r0, r3
 8004238:	3730      	adds	r7, #48	@ 0x30
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d103      	bne.n	800425a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	e002      	b.n	8004260 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800426c:	2101      	movs	r1, #1
 800426e:	69b8      	ldr	r0, [r7, #24]
 8004270:	f7ff fefe 	bl	8004070 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08e      	sub	sp, #56	@ 0x38
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004292:	2300      	movs	r3, #0
 8004294:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10b      	bne.n	80042b8 <xQueueGenericSend+0x34>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d103      	bne.n	80042c6 <xQueueGenericSend+0x42>
 80042be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <xQueueGenericSend+0x46>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <xQueueGenericSend+0x48>
 80042ca:	2300      	movs	r3, #0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <xQueueGenericSend+0x64>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
 80042e6:	e7fd      	b.n	80042e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d103      	bne.n	80042f6 <xQueueGenericSend+0x72>
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <xQueueGenericSend+0x76>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <xQueueGenericSend+0x78>
 80042fa:	2300      	movs	r3, #0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10b      	bne.n	8004318 <xQueueGenericSend+0x94>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	623b      	str	r3, [r7, #32]
}
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	e7fd      	b.n	8004314 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004318:	f001 f9ce 	bl	80056b8 <xTaskGetSchedulerState>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d102      	bne.n	8004328 <xQueueGenericSend+0xa4>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <xQueueGenericSend+0xa8>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <xQueueGenericSend+0xaa>
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <xQueueGenericSend+0xc6>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	61fb      	str	r3, [r7, #28]
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	e7fd      	b.n	8004346 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800434a:	f001 ff25 	bl	8006198 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800434e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004356:	429a      	cmp	r2, r3
 8004358:	d302      	bcc.n	8004360 <xQueueGenericSend+0xdc>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d129      	bne.n	80043b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004366:	f000 fa0f 	bl	8004788 <prvCopyDataToQueue>
 800436a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800436c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	d010      	beq.n	8004396 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004376:	3324      	adds	r3, #36	@ 0x24
 8004378:	4618      	mov	r0, r3
 800437a:	f000 ffdd 	bl	8005338 <xTaskRemoveFromEventList>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d013      	beq.n	80043ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004384:	4b3f      	ldr	r3, [pc, #252]	@ (8004484 <xQueueGenericSend+0x200>)
 8004386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	e00a      	b.n	80043ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800439c:	4b39      	ldr	r3, [pc, #228]	@ (8004484 <xQueueGenericSend+0x200>)
 800439e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043ac:	f001 ff26 	bl	80061fc <vPortExitCritical>
				return pdPASS;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e063      	b.n	800447c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043ba:	f001 ff1f 	bl	80061fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	e05c      	b.n	800447c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043c8:	f107 0314 	add.w	r3, r7, #20
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 f817 	bl	8005400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043d2:	2301      	movs	r3, #1
 80043d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043d6:	f001 ff11 	bl	80061fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043da:	f000 fd87 	bl	8004eec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043de:	f001 fedb 	bl	8006198 <vPortEnterCritical>
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043e8:	b25b      	sxtb	r3, r3
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d103      	bne.n	80043f8 <xQueueGenericSend+0x174>
 80043f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043fe:	b25b      	sxtb	r3, r3
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d103      	bne.n	800440e <xQueueGenericSend+0x18a>
 8004406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800440e:	f001 fef5 	bl	80061fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004412:	1d3a      	adds	r2, r7, #4
 8004414:	f107 0314 	add.w	r3, r7, #20
 8004418:	4611      	mov	r1, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f001 f806 	bl	800542c <xTaskCheckForTimeOut>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d124      	bne.n	8004470 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004426:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004428:	f000 faa6 	bl	8004978 <prvIsQueueFull>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d018      	beq.n	8004464 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	3310      	adds	r3, #16
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4611      	mov	r1, r2
 800443a:	4618      	mov	r0, r3
 800443c:	f000 ff2a 	bl	8005294 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004442:	f000 fa31 	bl	80048a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004446:	f000 fd5f 	bl	8004f08 <xTaskResumeAll>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	f47f af7c 	bne.w	800434a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004452:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <xQueueGenericSend+0x200>)
 8004454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	e772      	b.n	800434a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004464:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004466:	f000 fa1f 	bl	80048a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800446a:	f000 fd4d 	bl	8004f08 <xTaskResumeAll>
 800446e:	e76c      	b.n	800434a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004470:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004472:	f000 fa19 	bl	80048a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004476:	f000 fd47 	bl	8004f08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800447a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800447c:	4618      	mov	r0, r3
 800447e:	3738      	adds	r7, #56	@ 0x38
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b090      	sub	sp, #64	@ 0x40
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800449a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10b      	bne.n	80044b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	e7fd      	b.n	80044b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <xQueueGenericSendFromISR+0x3e>
 80044be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <xQueueGenericSendFromISR+0x42>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <xQueueGenericSendFromISR+0x44>
 80044ca:	2300      	movs	r3, #0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10b      	bne.n	80044e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d103      	bne.n	80044f6 <xQueueGenericSendFromISR+0x6e>
 80044ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <xQueueGenericSendFromISR+0x72>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <xQueueGenericSendFromISR+0x74>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10b      	bne.n	8004518 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	623b      	str	r3, [r7, #32]
}
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	e7fd      	b.n	8004514 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004518:	f001 ff1e 	bl	8006358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800451c:	f3ef 8211 	mrs	r2, BASEPRI
 8004520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	61fa      	str	r2, [r7, #28]
 8004532:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004534:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004536:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800453c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <xQueueGenericSendFromISR+0xc2>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d12f      	bne.n	80045aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800454a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004550:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004560:	f000 f912 	bl	8004788 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004564:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d112      	bne.n	8004594 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800456e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	2b00      	cmp	r3, #0
 8004574:	d016      	beq.n	80045a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004578:	3324      	adds	r3, #36	@ 0x24
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fedc 	bl	8005338 <xTaskRemoveFromEventList>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00e      	beq.n	80045a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e007      	b.n	80045a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004594:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004598:	3301      	adds	r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	b25a      	sxtb	r2, r3
 800459e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80045a4:	2301      	movs	r3, #1
 80045a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80045a8:	e001      	b.n	80045ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80045b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3740      	adds	r7, #64	@ 0x40
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08c      	sub	sp, #48	@ 0x30
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10b      	bne.n	80045f6 <xQueueReceive+0x32>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	623b      	str	r3, [r7, #32]
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	e7fd      	b.n	80045f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d103      	bne.n	8004604 <xQueueReceive+0x40>
 80045fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <xQueueReceive+0x44>
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <xQueueReceive+0x46>
 8004608:	2300      	movs	r3, #0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10b      	bne.n	8004626 <xQueueReceive+0x62>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	61fb      	str	r3, [r7, #28]
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	e7fd      	b.n	8004622 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004626:	f001 f847 	bl	80056b8 <xTaskGetSchedulerState>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <xQueueReceive+0x72>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <xQueueReceive+0x76>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <xQueueReceive+0x78>
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10b      	bne.n	8004658 <xQueueReceive+0x94>
	__asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	61bb      	str	r3, [r7, #24]
}
 8004652:	bf00      	nop
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004658:	f001 fd9e 	bl	8006198 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800465c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01f      	beq.n	80046a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800466c:	f000 f8f6 	bl	800485c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	1e5a      	subs	r2, r3, #1
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00f      	beq.n	80046a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004682:	3310      	adds	r3, #16
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fe57 	bl	8005338 <xTaskRemoveFromEventList>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d007      	beq.n	80046a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004690:	4b3c      	ldr	r3, [pc, #240]	@ (8004784 <xQueueReceive+0x1c0>)
 8004692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046a0:	f001 fdac 	bl	80061fc <vPortExitCritical>
				return pdPASS;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e069      	b.n	800477c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d103      	bne.n	80046b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046ae:	f001 fda5 	bl	80061fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e062      	b.n	800477c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d106      	bne.n	80046ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046bc:	f107 0310 	add.w	r3, r7, #16
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fe9d 	bl	8005400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046c6:	2301      	movs	r3, #1
 80046c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046ca:	f001 fd97 	bl	80061fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046ce:	f000 fc0d 	bl	8004eec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046d2:	f001 fd61 	bl	8006198 <vPortEnterCritical>
 80046d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046dc:	b25b      	sxtb	r3, r3
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d103      	bne.n	80046ec <xQueueReceive+0x128>
 80046e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046f2:	b25b      	sxtb	r3, r3
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d103      	bne.n	8004702 <xQueueReceive+0x13e>
 80046fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004702:	f001 fd7b 	bl	80061fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004706:	1d3a      	adds	r2, r7, #4
 8004708:	f107 0310 	add.w	r3, r7, #16
 800470c:	4611      	mov	r1, r2
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fe8c 	bl	800542c <xTaskCheckForTimeOut>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d123      	bne.n	8004762 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800471a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800471c:	f000 f916 	bl	800494c <prvIsQueueEmpty>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d017      	beq.n	8004756 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004728:	3324      	adds	r3, #36	@ 0x24
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fdb0 	bl	8005294 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004734:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004736:	f000 f8b7 	bl	80048a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800473a:	f000 fbe5 	bl	8004f08 <xTaskResumeAll>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d189      	bne.n	8004658 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004744:	4b0f      	ldr	r3, [pc, #60]	@ (8004784 <xQueueReceive+0x1c0>)
 8004746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	e780      	b.n	8004658 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004758:	f000 f8a6 	bl	80048a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800475c:	f000 fbd4 	bl	8004f08 <xTaskResumeAll>
 8004760:	e77a      	b.n	8004658 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004764:	f000 f8a0 	bl	80048a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004768:	f000 fbce 	bl	8004f08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800476c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800476e:	f000 f8ed 	bl	800494c <prvIsQueueEmpty>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	f43f af6f 	beq.w	8004658 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800477a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800477c:	4618      	mov	r0, r3
 800477e:	3730      	adds	r7, #48	@ 0x30
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10d      	bne.n	80047c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d14d      	bne.n	800484a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 ff9e 	bl	80056f4 <xTaskPriorityDisinherit>
 80047b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	e043      	b.n	800484a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d119      	bne.n	80047fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6858      	ldr	r0, [r3, #4]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d0:	461a      	mov	r2, r3
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	f003 f801 	bl	80077da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	441a      	add	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d32b      	bcc.n	800484a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	605a      	str	r2, [r3, #4]
 80047fa:	e026      	b.n	800484a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68d8      	ldr	r0, [r3, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004804:	461a      	mov	r2, r3
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	f002 ffe7 	bl	80077da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	425b      	negs	r3, r3
 8004816:	441a      	add	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d207      	bcs.n	8004838 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004830:	425b      	negs	r3, r3
 8004832:	441a      	add	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d105      	bne.n	800484a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	3b01      	subs	r3, #1
 8004848:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004852:	697b      	ldr	r3, [r7, #20]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d018      	beq.n	80048a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	441a      	add	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	429a      	cmp	r2, r3
 8004886:	d303      	bcc.n	8004890 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68d9      	ldr	r1, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004898:	461a      	mov	r2, r3
 800489a:	6838      	ldr	r0, [r7, #0]
 800489c:	f002 ff9d 	bl	80077da <memcpy>
	}
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048b0:	f001 fc72 	bl	8006198 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048bc:	e011      	b.n	80048e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d012      	beq.n	80048ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3324      	adds	r3, #36	@ 0x24
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fd34 	bl	8005338 <xTaskRemoveFromEventList>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048d6:	f000 fe0d 	bl	80054f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	3b01      	subs	r3, #1
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	dce9      	bgt.n	80048be <prvUnlockQueue+0x16>
 80048ea:	e000      	b.n	80048ee <prvUnlockQueue+0x46>
					break;
 80048ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	22ff      	movs	r2, #255	@ 0xff
 80048f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80048f6:	f001 fc81 	bl	80061fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048fa:	f001 fc4d 	bl	8006198 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004904:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004906:	e011      	b.n	800492c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d012      	beq.n	8004936 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3310      	adds	r3, #16
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fd0f 	bl	8005338 <xTaskRemoveFromEventList>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004920:	f000 fde8 	bl	80054f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004924:	7bbb      	ldrb	r3, [r7, #14]
 8004926:	3b01      	subs	r3, #1
 8004928:	b2db      	uxtb	r3, r3
 800492a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800492c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004930:	2b00      	cmp	r3, #0
 8004932:	dce9      	bgt.n	8004908 <prvUnlockQueue+0x60>
 8004934:	e000      	b.n	8004938 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004936:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	22ff      	movs	r2, #255	@ 0xff
 800493c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004940:	f001 fc5c 	bl	80061fc <vPortExitCritical>
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004954:	f001 fc20 	bl	8006198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495c:	2b00      	cmp	r3, #0
 800495e:	d102      	bne.n	8004966 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004960:	2301      	movs	r3, #1
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e001      	b.n	800496a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800496a:	f001 fc47 	bl	80061fc <vPortExitCritical>

	return xReturn;
 800496e:	68fb      	ldr	r3, [r7, #12]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004980:	f001 fc0a 	bl	8006198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498c:	429a      	cmp	r2, r3
 800498e:	d102      	bne.n	8004996 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004990:	2301      	movs	r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e001      	b.n	800499a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800499a:	f001 fc2f 	bl	80061fc <vPortExitCritical>

	return xReturn;
 800499e:	68fb      	ldr	r3, [r7, #12]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	e014      	b.n	80049e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80049b8:	4a0f      	ldr	r2, [pc, #60]	@ (80049f8 <vQueueAddToRegistry+0x50>)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049c4:	490c      	ldr	r1, [pc, #48]	@ (80049f8 <vQueueAddToRegistry+0x50>)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049ce:	4a0a      	ldr	r2, [pc, #40]	@ (80049f8 <vQueueAddToRegistry+0x50>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049da:	e006      	b.n	80049ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3301      	adds	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b07      	cmp	r3, #7
 80049e6:	d9e7      	bls.n	80049b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000a44 	.word	0x20000a44

080049fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a0c:	f001 fbc4 	bl	8006198 <vPortEnterCritical>
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a16:	b25b      	sxtb	r3, r3
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1c:	d103      	bne.n	8004a26 <vQueueWaitForMessageRestricted+0x2a>
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a2c:	b25b      	sxtb	r3, r3
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d103      	bne.n	8004a3c <vQueueWaitForMessageRestricted+0x40>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a3c:	f001 fbde 	bl	80061fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	3324      	adds	r3, #36	@ 0x24
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fc45 	bl	80052e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a56:	6978      	ldr	r0, [r7, #20]
 8004a58:	f7ff ff26 	bl	80048a8 <prvUnlockQueue>
	}
 8004a5c:	bf00      	nop
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08e      	sub	sp, #56	@ 0x38
 8004a68:	af04      	add	r7, sp, #16
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10b      	bne.n	8004a90 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	623b      	str	r3, [r7, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <xTaskCreateStatic+0x4a>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	61fb      	str	r3, [r7, #28]
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	e7fd      	b.n	8004aaa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004aae:	235c      	movs	r3, #92	@ 0x5c
 8004ab0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b5c      	cmp	r3, #92	@ 0x5c
 8004ab6:	d00b      	beq.n	8004ad0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	61bb      	str	r3, [r7, #24]
}
 8004aca:	bf00      	nop
 8004acc:	bf00      	nop
 8004ace:	e7fd      	b.n	8004acc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ad0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01e      	beq.n	8004b16 <xTaskCreateStatic+0xb2>
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d01b      	beq.n	8004b16 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ae6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004af0:	2300      	movs	r3, #0
 8004af2:	9303      	str	r3, [sp, #12]
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	9302      	str	r3, [sp, #8]
 8004af8:	f107 0314 	add.w	r3, r7, #20
 8004afc:	9301      	str	r3, [sp, #4]
 8004afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f850 	bl	8004bae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b10:	f000 f8de 	bl	8004cd0 <prvAddNewTaskToReadyList>
 8004b14:	e001      	b.n	8004b1a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b1a:	697b      	ldr	r3, [r7, #20]
	}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3728      	adds	r7, #40	@ 0x28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08c      	sub	sp, #48	@ 0x30
 8004b28:	af04      	add	r7, sp, #16
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b34:	88fb      	ldrh	r3, [r7, #6]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 fc4f 	bl	80063dc <pvPortMalloc>
 8004b3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00e      	beq.n	8004b64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b46:	205c      	movs	r0, #92	@ 0x5c
 8004b48:	f001 fc48 	bl	80063dc <pvPortMalloc>
 8004b4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b5a:	e005      	b.n	8004b68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b5c:	6978      	ldr	r0, [r7, #20]
 8004b5e:	f001 fd0b 	bl	8006578 <vPortFree>
 8004b62:	e001      	b.n	8004b68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d017      	beq.n	8004b9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	9303      	str	r3, [sp, #12]
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	9302      	str	r3, [sp, #8]
 8004b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f80e 	bl	8004bae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b92:	69f8      	ldr	r0, [r7, #28]
 8004b94:	f000 f89c 	bl	8004cd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	61bb      	str	r3, [r7, #24]
 8004b9c:	e002      	b.n	8004ba4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ba4:	69bb      	ldr	r3, [r7, #24]
	}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b088      	sub	sp, #32
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	21a5      	movs	r1, #165	@ 0xa5
 8004bc8:	f002 fd87 	bl	80076da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	f023 0307 	bic.w	r3, r3, #7
 8004be4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	617b      	str	r3, [r7, #20]
}
 8004c02:	bf00      	nop
 8004c04:	bf00      	nop
 8004c06:	e7fd      	b.n	8004c04 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01f      	beq.n	8004c4e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	e012      	b.n	8004c3a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	4413      	add	r3, r2
 8004c1a:	7819      	ldrb	r1, [r3, #0]
 8004c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	4413      	add	r3, r2
 8004c22:	3334      	adds	r3, #52	@ 0x34
 8004c24:	460a      	mov	r2, r1
 8004c26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d006      	beq.n	8004c42 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	3301      	adds	r3, #1
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	2b0f      	cmp	r3, #15
 8004c3e:	d9e9      	bls.n	8004c14 <prvInitialiseNewTask+0x66>
 8004c40:	e000      	b.n	8004c44 <prvInitialiseNewTask+0x96>
			{
				break;
 8004c42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c4c:	e003      	b.n	8004c56 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	2b37      	cmp	r3, #55	@ 0x37
 8004c5a:	d901      	bls.n	8004c60 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c5c:	2337      	movs	r3, #55	@ 0x37
 8004c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c64:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c6a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6e:	2200      	movs	r2, #0
 8004c70:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c74:	3304      	adds	r3, #4
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff f966 	bl	8003f48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	3318      	adds	r3, #24
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff f961 	bl	8003f48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	68f9      	ldr	r1, [r7, #12]
 8004cae:	69b8      	ldr	r0, [r7, #24]
 8004cb0:	f001 f93e 	bl	8005f30 <pxPortInitialiseStack>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cc6:	bf00      	nop
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cd8:	f001 fa5e 	bl	8006198 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8004d94 <prvAddNewTaskToReadyList+0xc4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d94 <prvAddNewTaskToReadyList+0xc4>)
 8004ce4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8004d98 <prvAddNewTaskToReadyList+0xc8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cee:	4a2a      	ldr	r2, [pc, #168]	@ (8004d98 <prvAddNewTaskToReadyList+0xc8>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cf4:	4b27      	ldr	r3, [pc, #156]	@ (8004d94 <prvAddNewTaskToReadyList+0xc4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d110      	bne.n	8004d1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cfc:	f000 fc1e 	bl	800553c <prvInitialiseTaskLists>
 8004d00:	e00d      	b.n	8004d1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d02:	4b26      	ldr	r3, [pc, #152]	@ (8004d9c <prvAddNewTaskToReadyList+0xcc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d0a:	4b23      	ldr	r3, [pc, #140]	@ (8004d98 <prvAddNewTaskToReadyList+0xc8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d802      	bhi.n	8004d1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d18:	4a1f      	ldr	r2, [pc, #124]	@ (8004d98 <prvAddNewTaskToReadyList+0xc8>)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d1e:	4b20      	ldr	r3, [pc, #128]	@ (8004da0 <prvAddNewTaskToReadyList+0xd0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	4a1e      	ldr	r2, [pc, #120]	@ (8004da0 <prvAddNewTaskToReadyList+0xd0>)
 8004d26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d28:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <prvAddNewTaskToReadyList+0xd0>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d34:	4b1b      	ldr	r3, [pc, #108]	@ (8004da4 <prvAddNewTaskToReadyList+0xd4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d903      	bls.n	8004d44 <prvAddNewTaskToReadyList+0x74>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	4a18      	ldr	r2, [pc, #96]	@ (8004da4 <prvAddNewTaskToReadyList+0xd4>)
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4a15      	ldr	r2, [pc, #84]	@ (8004da8 <prvAddNewTaskToReadyList+0xd8>)
 8004d52:	441a      	add	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f7ff f901 	bl	8003f62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d60:	f001 fa4c 	bl	80061fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d64:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <prvAddNewTaskToReadyList+0xcc>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00e      	beq.n	8004d8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d98 <prvAddNewTaskToReadyList+0xc8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d207      	bcs.n	8004d8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004dac <prvAddNewTaskToReadyList+0xdc>)
 8004d7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000f58 	.word	0x20000f58
 8004d98:	20000a84 	.word	0x20000a84
 8004d9c:	20000f64 	.word	0x20000f64
 8004da0:	20000f74 	.word	0x20000f74
 8004da4:	20000f60 	.word	0x20000f60
 8004da8:	20000a88 	.word	0x20000a88
 8004dac:	e000ed04 	.word	0xe000ed04

08004db0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d018      	beq.n	8004df4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004dc2:	4b14      	ldr	r3, [pc, #80]	@ (8004e14 <vTaskDelay+0x64>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <vTaskDelay+0x32>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	60bb      	str	r3, [r7, #8]
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	e7fd      	b.n	8004dde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004de2:	f000 f883 	bl	8004eec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004de6:	2100      	movs	r1, #0
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fcf3 	bl	80057d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004dee:	f000 f88b 	bl	8004f08 <xTaskResumeAll>
 8004df2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d107      	bne.n	8004e0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004dfa:	4b07      	ldr	r3, [pc, #28]	@ (8004e18 <vTaskDelay+0x68>)
 8004dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000f80 	.word	0x20000f80
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08a      	sub	sp, #40	@ 0x28
 8004e20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e2a:	463a      	mov	r2, r7
 8004e2c:	1d39      	adds	r1, r7, #4
 8004e2e:	f107 0308 	add.w	r3, r7, #8
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff f834 	bl	8003ea0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	9202      	str	r2, [sp, #8]
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2300      	movs	r3, #0
 8004e48:	460a      	mov	r2, r1
 8004e4a:	4922      	ldr	r1, [pc, #136]	@ (8004ed4 <vTaskStartScheduler+0xb8>)
 8004e4c:	4822      	ldr	r0, [pc, #136]	@ (8004ed8 <vTaskStartScheduler+0xbc>)
 8004e4e:	f7ff fe09 	bl	8004a64 <xTaskCreateStatic>
 8004e52:	4603      	mov	r3, r0
 8004e54:	4a21      	ldr	r2, [pc, #132]	@ (8004edc <vTaskStartScheduler+0xc0>)
 8004e56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e58:	4b20      	ldr	r3, [pc, #128]	@ (8004edc <vTaskStartScheduler+0xc0>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e60:	2301      	movs	r3, #1
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	e001      	b.n	8004e6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d102      	bne.n	8004e76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e70:	f000 fd04 	bl	800587c <xTimerCreateTimerTask>
 8004e74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d116      	bne.n	8004eaa <vTaskStartScheduler+0x8e>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	613b      	str	r3, [r7, #16]
}
 8004e8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e90:	4b13      	ldr	r3, [pc, #76]	@ (8004ee0 <vTaskStartScheduler+0xc4>)
 8004e92:	f04f 32ff 	mov.w	r2, #4294967295
 8004e96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e98:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <vTaskStartScheduler+0xc8>)
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ee8 <vTaskStartScheduler+0xcc>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ea4:	f001 f8d4 	bl	8006050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ea8:	e00f      	b.n	8004eca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d10b      	bne.n	8004eca <vTaskStartScheduler+0xae>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	60fb      	str	r3, [r7, #12]
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop
 8004ec8:	e7fd      	b.n	8004ec6 <vTaskStartScheduler+0xaa>
}
 8004eca:	bf00      	nop
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	0800aefc 	.word	0x0800aefc
 8004ed8:	0800550d 	.word	0x0800550d
 8004edc:	20000f7c 	.word	0x20000f7c
 8004ee0:	20000f78 	.word	0x20000f78
 8004ee4:	20000f64 	.word	0x20000f64
 8004ee8:	20000f5c 	.word	0x20000f5c

08004eec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ef0:	4b04      	ldr	r3, [pc, #16]	@ (8004f04 <vTaskSuspendAll+0x18>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	4a03      	ldr	r2, [pc, #12]	@ (8004f04 <vTaskSuspendAll+0x18>)
 8004ef8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004efa:	bf00      	nop
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	20000f80 	.word	0x20000f80

08004f08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f16:	4b42      	ldr	r3, [pc, #264]	@ (8005020 <xTaskResumeAll+0x118>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <xTaskResumeAll+0x2e>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	603b      	str	r3, [r7, #0]
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	e7fd      	b.n	8004f32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f36:	f001 f92f 	bl	8006198 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f3a:	4b39      	ldr	r3, [pc, #228]	@ (8005020 <xTaskResumeAll+0x118>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	4a37      	ldr	r2, [pc, #220]	@ (8005020 <xTaskResumeAll+0x118>)
 8004f42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f44:	4b36      	ldr	r3, [pc, #216]	@ (8005020 <xTaskResumeAll+0x118>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d162      	bne.n	8005012 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f4c:	4b35      	ldr	r3, [pc, #212]	@ (8005024 <xTaskResumeAll+0x11c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d05e      	beq.n	8005012 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f54:	e02f      	b.n	8004fb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f56:	4b34      	ldr	r3, [pc, #208]	@ (8005028 <xTaskResumeAll+0x120>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3318      	adds	r3, #24
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff f85a 	bl	800401c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff f855 	bl	800401c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f76:	4b2d      	ldr	r3, [pc, #180]	@ (800502c <xTaskResumeAll+0x124>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d903      	bls.n	8004f86 <xTaskResumeAll+0x7e>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f82:	4a2a      	ldr	r2, [pc, #168]	@ (800502c <xTaskResumeAll+0x124>)
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4a27      	ldr	r2, [pc, #156]	@ (8005030 <xTaskResumeAll+0x128>)
 8004f94:	441a      	add	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	f7fe ffe0 	bl	8003f62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa6:	4b23      	ldr	r3, [pc, #140]	@ (8005034 <xTaskResumeAll+0x12c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d302      	bcc.n	8004fb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004fb0:	4b21      	ldr	r3, [pc, #132]	@ (8005038 <xTaskResumeAll+0x130>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8005028 <xTaskResumeAll+0x120>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1cb      	bne.n	8004f56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fc4:	f000 fb58 	bl	8005678 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800503c <xTaskResumeAll+0x134>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d010      	beq.n	8004ff6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fd4:	f000 f846 	bl	8005064 <xTaskIncrementTick>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004fde:	4b16      	ldr	r3, [pc, #88]	@ (8005038 <xTaskResumeAll+0x130>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f1      	bne.n	8004fd4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004ff0:	4b12      	ldr	r3, [pc, #72]	@ (800503c <xTaskResumeAll+0x134>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ff6:	4b10      	ldr	r3, [pc, #64]	@ (8005038 <xTaskResumeAll+0x130>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ffe:	2301      	movs	r3, #1
 8005000:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005002:	4b0f      	ldr	r3, [pc, #60]	@ (8005040 <xTaskResumeAll+0x138>)
 8005004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005012:	f001 f8f3 	bl	80061fc <vPortExitCritical>

	return xAlreadyYielded;
 8005016:	68bb      	ldr	r3, [r7, #8]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000f80 	.word	0x20000f80
 8005024:	20000f58 	.word	0x20000f58
 8005028:	20000f18 	.word	0x20000f18
 800502c:	20000f60 	.word	0x20000f60
 8005030:	20000a88 	.word	0x20000a88
 8005034:	20000a84 	.word	0x20000a84
 8005038:	20000f6c 	.word	0x20000f6c
 800503c:	20000f68 	.word	0x20000f68
 8005040:	e000ed04 	.word	0xe000ed04

08005044 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800504a:	4b05      	ldr	r3, [pc, #20]	@ (8005060 <xTaskGetTickCount+0x1c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005050:	687b      	ldr	r3, [r7, #4]
}
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000f5c 	.word	0x20000f5c

08005064 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800506e:	4b4f      	ldr	r3, [pc, #316]	@ (80051ac <xTaskIncrementTick+0x148>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	f040 8090 	bne.w	8005198 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005078:	4b4d      	ldr	r3, [pc, #308]	@ (80051b0 <xTaskIncrementTick+0x14c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005080:	4a4b      	ldr	r2, [pc, #300]	@ (80051b0 <xTaskIncrementTick+0x14c>)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d121      	bne.n	80050d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800508c:	4b49      	ldr	r3, [pc, #292]	@ (80051b4 <xTaskIncrementTick+0x150>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	603b      	str	r3, [r7, #0]
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	e7fd      	b.n	80050aa <xTaskIncrementTick+0x46>
 80050ae:	4b41      	ldr	r3, [pc, #260]	@ (80051b4 <xTaskIncrementTick+0x150>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	4b40      	ldr	r3, [pc, #256]	@ (80051b8 <xTaskIncrementTick+0x154>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a3e      	ldr	r2, [pc, #248]	@ (80051b4 <xTaskIncrementTick+0x150>)
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4a3e      	ldr	r2, [pc, #248]	@ (80051b8 <xTaskIncrementTick+0x154>)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	4b3e      	ldr	r3, [pc, #248]	@ (80051bc <xTaskIncrementTick+0x158>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3301      	adds	r3, #1
 80050c8:	4a3c      	ldr	r2, [pc, #240]	@ (80051bc <xTaskIncrementTick+0x158>)
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	f000 fad4 	bl	8005678 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050d0:	4b3b      	ldr	r3, [pc, #236]	@ (80051c0 <xTaskIncrementTick+0x15c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d349      	bcc.n	800516e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050da:	4b36      	ldr	r3, [pc, #216]	@ (80051b4 <xTaskIncrementTick+0x150>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050e4:	4b36      	ldr	r3, [pc, #216]	@ (80051c0 <xTaskIncrementTick+0x15c>)
 80050e6:	f04f 32ff 	mov.w	r2, #4294967295
 80050ea:	601a      	str	r2, [r3, #0]
					break;
 80050ec:	e03f      	b.n	800516e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ee:	4b31      	ldr	r3, [pc, #196]	@ (80051b4 <xTaskIncrementTick+0x150>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	429a      	cmp	r2, r3
 8005104:	d203      	bcs.n	800510e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005106:	4a2e      	ldr	r2, [pc, #184]	@ (80051c0 <xTaskIncrementTick+0x15c>)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800510c:	e02f      	b.n	800516e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	3304      	adds	r3, #4
 8005112:	4618      	mov	r0, r3
 8005114:	f7fe ff82 	bl	800401c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511c:	2b00      	cmp	r3, #0
 800511e:	d004      	beq.n	800512a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	3318      	adds	r3, #24
 8005124:	4618      	mov	r0, r3
 8005126:	f7fe ff79 	bl	800401c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512e:	4b25      	ldr	r3, [pc, #148]	@ (80051c4 <xTaskIncrementTick+0x160>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d903      	bls.n	800513e <xTaskIncrementTick+0xda>
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	4a22      	ldr	r2, [pc, #136]	@ (80051c4 <xTaskIncrementTick+0x160>)
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4a1f      	ldr	r2, [pc, #124]	@ (80051c8 <xTaskIncrementTick+0x164>)
 800514c:	441a      	add	r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	3304      	adds	r3, #4
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f7fe ff04 	bl	8003f62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800515e:	4b1b      	ldr	r3, [pc, #108]	@ (80051cc <xTaskIncrementTick+0x168>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	429a      	cmp	r2, r3
 8005166:	d3b8      	bcc.n	80050da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800516c:	e7b5      	b.n	80050da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800516e:	4b17      	ldr	r3, [pc, #92]	@ (80051cc <xTaskIncrementTick+0x168>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005174:	4914      	ldr	r1, [pc, #80]	@ (80051c8 <xTaskIncrementTick+0x164>)
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d901      	bls.n	800518a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005186:	2301      	movs	r3, #1
 8005188:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800518a:	4b11      	ldr	r3, [pc, #68]	@ (80051d0 <xTaskIncrementTick+0x16c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005192:	2301      	movs	r3, #1
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e004      	b.n	80051a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005198:	4b0e      	ldr	r3, [pc, #56]	@ (80051d4 <xTaskIncrementTick+0x170>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	4a0d      	ldr	r2, [pc, #52]	@ (80051d4 <xTaskIncrementTick+0x170>)
 80051a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051a2:	697b      	ldr	r3, [r7, #20]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20000f80 	.word	0x20000f80
 80051b0:	20000f5c 	.word	0x20000f5c
 80051b4:	20000f10 	.word	0x20000f10
 80051b8:	20000f14 	.word	0x20000f14
 80051bc:	20000f70 	.word	0x20000f70
 80051c0:	20000f78 	.word	0x20000f78
 80051c4:	20000f60 	.word	0x20000f60
 80051c8:	20000a88 	.word	0x20000a88
 80051cc:	20000a84 	.word	0x20000a84
 80051d0:	20000f6c 	.word	0x20000f6c
 80051d4:	20000f68 	.word	0x20000f68

080051d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051de:	4b28      	ldr	r3, [pc, #160]	@ (8005280 <vTaskSwitchContext+0xa8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051e6:	4b27      	ldr	r3, [pc, #156]	@ (8005284 <vTaskSwitchContext+0xac>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051ec:	e042      	b.n	8005274 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80051ee:	4b25      	ldr	r3, [pc, #148]	@ (8005284 <vTaskSwitchContext+0xac>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051f4:	4b24      	ldr	r3, [pc, #144]	@ (8005288 <vTaskSwitchContext+0xb0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	e011      	b.n	8005220 <vTaskSwitchContext+0x48>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10b      	bne.n	800521a <vTaskSwitchContext+0x42>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	607b      	str	r3, [r7, #4]
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	e7fd      	b.n	8005216 <vTaskSwitchContext+0x3e>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3b01      	subs	r3, #1
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	491a      	ldr	r1, [pc, #104]	@ (800528c <vTaskSwitchContext+0xb4>)
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0e3      	beq.n	80051fc <vTaskSwitchContext+0x24>
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4a13      	ldr	r2, [pc, #76]	@ (800528c <vTaskSwitchContext+0xb4>)
 8005240:	4413      	add	r3, r2
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	3308      	adds	r3, #8
 8005256:	429a      	cmp	r2, r3
 8005258:	d104      	bne.n	8005264 <vTaskSwitchContext+0x8c>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	605a      	str	r2, [r3, #4]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	4a09      	ldr	r2, [pc, #36]	@ (8005290 <vTaskSwitchContext+0xb8>)
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	4a06      	ldr	r2, [pc, #24]	@ (8005288 <vTaskSwitchContext+0xb0>)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6013      	str	r3, [r2, #0]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	20000f80 	.word	0x20000f80
 8005284:	20000f6c 	.word	0x20000f6c
 8005288:	20000f60 	.word	0x20000f60
 800528c:	20000a88 	.word	0x20000a88
 8005290:	20000a84 	.word	0x20000a84

08005294 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10b      	bne.n	80052bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	60fb      	str	r3, [r7, #12]
}
 80052b6:	bf00      	nop
 80052b8:	bf00      	nop
 80052ba:	e7fd      	b.n	80052b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052bc:	4b07      	ldr	r3, [pc, #28]	@ (80052dc <vTaskPlaceOnEventList+0x48>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3318      	adds	r3, #24
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7fe fe70 	bl	8003faa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052ca:	2101      	movs	r1, #1
 80052cc:	6838      	ldr	r0, [r7, #0]
 80052ce:	f000 fa81 	bl	80057d4 <prvAddCurrentTaskToDelayedList>
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000a84 	.word	0x20000a84

080052e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10b      	bne.n	800530a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	617b      	str	r3, [r7, #20]
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop
 8005308:	e7fd      	b.n	8005306 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800530a:	4b0a      	ldr	r3, [pc, #40]	@ (8005334 <vTaskPlaceOnEventListRestricted+0x54>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3318      	adds	r3, #24
 8005310:	4619      	mov	r1, r3
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f7fe fe25 	bl	8003f62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800531e:	f04f 33ff 	mov.w	r3, #4294967295
 8005322:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	68b8      	ldr	r0, [r7, #8]
 8005328:	f000 fa54 	bl	80057d4 <prvAddCurrentTaskToDelayedList>
	}
 800532c:	bf00      	nop
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000a84 	.word	0x20000a84

08005338 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10b      	bne.n	8005366 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	3318      	adds	r3, #24
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe fe56 	bl	800401c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005370:	4b1d      	ldr	r3, [pc, #116]	@ (80053e8 <xTaskRemoveFromEventList+0xb0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d11d      	bne.n	80053b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	3304      	adds	r3, #4
 800537c:	4618      	mov	r0, r3
 800537e:	f7fe fe4d 	bl	800401c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005386:	4b19      	ldr	r3, [pc, #100]	@ (80053ec <xTaskRemoveFromEventList+0xb4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d903      	bls.n	8005396 <xTaskRemoveFromEventList+0x5e>
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005392:	4a16      	ldr	r2, [pc, #88]	@ (80053ec <xTaskRemoveFromEventList+0xb4>)
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4a13      	ldr	r2, [pc, #76]	@ (80053f0 <xTaskRemoveFromEventList+0xb8>)
 80053a4:	441a      	add	r2, r3
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f7fe fdd8 	bl	8003f62 <vListInsertEnd>
 80053b2:	e005      	b.n	80053c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	3318      	adds	r3, #24
 80053b8:	4619      	mov	r1, r3
 80053ba:	480e      	ldr	r0, [pc, #56]	@ (80053f4 <xTaskRemoveFromEventList+0xbc>)
 80053bc:	f7fe fdd1 	bl	8003f62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c4:	4b0c      	ldr	r3, [pc, #48]	@ (80053f8 <xTaskRemoveFromEventList+0xc0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d905      	bls.n	80053da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053ce:	2301      	movs	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053d2:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <xTaskRemoveFromEventList+0xc4>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e001      	b.n	80053de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053de:	697b      	ldr	r3, [r7, #20]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20000f80 	.word	0x20000f80
 80053ec:	20000f60 	.word	0x20000f60
 80053f0:	20000a88 	.word	0x20000a88
 80053f4:	20000f18 	.word	0x20000f18
 80053f8:	20000a84 	.word	0x20000a84
 80053fc:	20000f6c 	.word	0x20000f6c

08005400 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005408:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <vTaskInternalSetTimeOutState+0x24>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005410:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <vTaskInternalSetTimeOutState+0x28>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	605a      	str	r2, [r3, #4]
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	20000f70 	.word	0x20000f70
 8005428:	20000f5c 	.word	0x20000f5c

0800542c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10b      	bne.n	8005454 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	613b      	str	r3, [r7, #16]
}
 800544e:	bf00      	nop
 8005450:	bf00      	nop
 8005452:	e7fd      	b.n	8005450 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	60fb      	str	r3, [r7, #12]
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	e7fd      	b.n	800546e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005472:	f000 fe91 	bl	8006198 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005476:	4b1d      	ldr	r3, [pc, #116]	@ (80054ec <xTaskCheckForTimeOut+0xc0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548e:	d102      	bne.n	8005496 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]
 8005494:	e023      	b.n	80054de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4b15      	ldr	r3, [pc, #84]	@ (80054f0 <xTaskCheckForTimeOut+0xc4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d007      	beq.n	80054b2 <xTaskCheckForTimeOut+0x86>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d302      	bcc.n	80054b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	e015      	b.n	80054de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d20b      	bcs.n	80054d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1ad2      	subs	r2, r2, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff ff99 	bl	8005400 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	e004      	b.n	80054de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054da:	2301      	movs	r3, #1
 80054dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054de:	f000 fe8d 	bl	80061fc <vPortExitCritical>

	return xReturn;
 80054e2:	69fb      	ldr	r3, [r7, #28]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20000f5c 	.word	0x20000f5c
 80054f0:	20000f70 	.word	0x20000f70

080054f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054f8:	4b03      	ldr	r3, [pc, #12]	@ (8005508 <vTaskMissedYield+0x14>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	601a      	str	r2, [r3, #0]
}
 80054fe:	bf00      	nop
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	20000f6c 	.word	0x20000f6c

0800550c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005514:	f000 f852 	bl	80055bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005518:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <prvIdleTask+0x28>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d9f9      	bls.n	8005514 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005520:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <prvIdleTask+0x2c>)
 8005522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005530:	e7f0      	b.n	8005514 <prvIdleTask+0x8>
 8005532:	bf00      	nop
 8005534:	20000a88 	.word	0x20000a88
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005542:	2300      	movs	r3, #0
 8005544:	607b      	str	r3, [r7, #4]
 8005546:	e00c      	b.n	8005562 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4a12      	ldr	r2, [pc, #72]	@ (800559c <prvInitialiseTaskLists+0x60>)
 8005554:	4413      	add	r3, r2
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe fcd6 	bl	8003f08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3301      	adds	r3, #1
 8005560:	607b      	str	r3, [r7, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b37      	cmp	r3, #55	@ 0x37
 8005566:	d9ef      	bls.n	8005548 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005568:	480d      	ldr	r0, [pc, #52]	@ (80055a0 <prvInitialiseTaskLists+0x64>)
 800556a:	f7fe fccd 	bl	8003f08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800556e:	480d      	ldr	r0, [pc, #52]	@ (80055a4 <prvInitialiseTaskLists+0x68>)
 8005570:	f7fe fcca 	bl	8003f08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005574:	480c      	ldr	r0, [pc, #48]	@ (80055a8 <prvInitialiseTaskLists+0x6c>)
 8005576:	f7fe fcc7 	bl	8003f08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800557a:	480c      	ldr	r0, [pc, #48]	@ (80055ac <prvInitialiseTaskLists+0x70>)
 800557c:	f7fe fcc4 	bl	8003f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005580:	480b      	ldr	r0, [pc, #44]	@ (80055b0 <prvInitialiseTaskLists+0x74>)
 8005582:	f7fe fcc1 	bl	8003f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <prvInitialiseTaskLists+0x78>)
 8005588:	4a05      	ldr	r2, [pc, #20]	@ (80055a0 <prvInitialiseTaskLists+0x64>)
 800558a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800558c:	4b0a      	ldr	r3, [pc, #40]	@ (80055b8 <prvInitialiseTaskLists+0x7c>)
 800558e:	4a05      	ldr	r2, [pc, #20]	@ (80055a4 <prvInitialiseTaskLists+0x68>)
 8005590:	601a      	str	r2, [r3, #0]
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000a88 	.word	0x20000a88
 80055a0:	20000ee8 	.word	0x20000ee8
 80055a4:	20000efc 	.word	0x20000efc
 80055a8:	20000f18 	.word	0x20000f18
 80055ac:	20000f2c 	.word	0x20000f2c
 80055b0:	20000f44 	.word	0x20000f44
 80055b4:	20000f10 	.word	0x20000f10
 80055b8:	20000f14 	.word	0x20000f14

080055bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055c2:	e019      	b.n	80055f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055c4:	f000 fde8 	bl	8006198 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c8:	4b10      	ldr	r3, [pc, #64]	@ (800560c <prvCheckTasksWaitingTermination+0x50>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fe fd21 	bl	800401c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055da:	4b0d      	ldr	r3, [pc, #52]	@ (8005610 <prvCheckTasksWaitingTermination+0x54>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3b01      	subs	r3, #1
 80055e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005610 <prvCheckTasksWaitingTermination+0x54>)
 80055e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005614 <prvCheckTasksWaitingTermination+0x58>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005614 <prvCheckTasksWaitingTermination+0x58>)
 80055ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055ee:	f000 fe05 	bl	80061fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f810 	bl	8005618 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055f8:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <prvCheckTasksWaitingTermination+0x58>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e1      	bne.n	80055c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000f2c 	.word	0x20000f2c
 8005610:	20000f58 	.word	0x20000f58
 8005614:	20000f40 	.word	0x20000f40

08005618 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005626:	2b00      	cmp	r3, #0
 8005628:	d108      	bne.n	800563c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562e:	4618      	mov	r0, r3
 8005630:	f000 ffa2 	bl	8006578 <vPortFree>
				vPortFree( pxTCB );
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 ff9f 	bl	8006578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800563a:	e019      	b.n	8005670 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005642:	2b01      	cmp	r3, #1
 8005644:	d103      	bne.n	800564e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 ff96 	bl	8006578 <vPortFree>
	}
 800564c:	e010      	b.n	8005670 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005654:	2b02      	cmp	r3, #2
 8005656:	d00b      	beq.n	8005670 <prvDeleteTCB+0x58>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	60fb      	str	r3, [r7, #12]
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	e7fd      	b.n	800566c <prvDeleteTCB+0x54>
	}
 8005670:	bf00      	nop
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800567e:	4b0c      	ldr	r3, [pc, #48]	@ (80056b0 <prvResetNextTaskUnblockTime+0x38>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d104      	bne.n	8005692 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005688:	4b0a      	ldr	r3, [pc, #40]	@ (80056b4 <prvResetNextTaskUnblockTime+0x3c>)
 800568a:	f04f 32ff 	mov.w	r2, #4294967295
 800568e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005690:	e008      	b.n	80056a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005692:	4b07      	ldr	r3, [pc, #28]	@ (80056b0 <prvResetNextTaskUnblockTime+0x38>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a04      	ldr	r2, [pc, #16]	@ (80056b4 <prvResetNextTaskUnblockTime+0x3c>)
 80056a2:	6013      	str	r3, [r2, #0]
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	20000f10 	.word	0x20000f10
 80056b4:	20000f78 	.word	0x20000f78

080056b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056be:	4b0b      	ldr	r3, [pc, #44]	@ (80056ec <xTaskGetSchedulerState+0x34>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056c6:	2301      	movs	r3, #1
 80056c8:	607b      	str	r3, [r7, #4]
 80056ca:	e008      	b.n	80056de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056cc:	4b08      	ldr	r3, [pc, #32]	@ (80056f0 <xTaskGetSchedulerState+0x38>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056d4:	2302      	movs	r3, #2
 80056d6:	607b      	str	r3, [r7, #4]
 80056d8:	e001      	b.n	80056de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056da:	2300      	movs	r3, #0
 80056dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056de:	687b      	ldr	r3, [r7, #4]
	}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	20000f64 	.word	0x20000f64
 80056f0:	20000f80 	.word	0x20000f80

080056f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d058      	beq.n	80057bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800570a:	4b2f      	ldr	r3, [pc, #188]	@ (80057c8 <xTaskPriorityDisinherit+0xd4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	429a      	cmp	r2, r3
 8005712:	d00b      	beq.n	800572c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	60fb      	str	r3, [r7, #12]
}
 8005726:	bf00      	nop
 8005728:	bf00      	nop
 800572a:	e7fd      	b.n	8005728 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10b      	bne.n	800574c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	60bb      	str	r3, [r7, #8]
}
 8005746:	bf00      	nop
 8005748:	bf00      	nop
 800574a:	e7fd      	b.n	8005748 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005750:	1e5a      	subs	r2, r3, #1
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800575e:	429a      	cmp	r2, r3
 8005760:	d02c      	beq.n	80057bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005766:	2b00      	cmp	r3, #0
 8005768:	d128      	bne.n	80057bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	3304      	adds	r3, #4
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe fc54 	bl	800401c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005780:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800578c:	4b0f      	ldr	r3, [pc, #60]	@ (80057cc <xTaskPriorityDisinherit+0xd8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d903      	bls.n	800579c <xTaskPriorityDisinherit+0xa8>
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	4a0c      	ldr	r2, [pc, #48]	@ (80057cc <xTaskPriorityDisinherit+0xd8>)
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4a09      	ldr	r2, [pc, #36]	@ (80057d0 <xTaskPriorityDisinherit+0xdc>)
 80057aa:	441a      	add	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f7fe fbd5 	bl	8003f62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057bc:	697b      	ldr	r3, [r7, #20]
	}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000a84 	.word	0x20000a84
 80057cc:	20000f60 	.word	0x20000f60
 80057d0:	20000a88 	.word	0x20000a88

080057d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057de:	4b21      	ldr	r3, [pc, #132]	@ (8005864 <prvAddCurrentTaskToDelayedList+0x90>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057e4:	4b20      	ldr	r3, [pc, #128]	@ (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fc16 	bl	800401c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d10a      	bne.n	800580e <prvAddCurrentTaskToDelayedList+0x3a>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4819      	ldr	r0, [pc, #100]	@ (800586c <prvAddCurrentTaskToDelayedList+0x98>)
 8005808:	f7fe fbab 	bl	8003f62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800580c:	e026      	b.n	800585c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4413      	add	r3, r2
 8005814:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005816:	4b14      	ldr	r3, [pc, #80]	@ (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	429a      	cmp	r2, r3
 8005824:	d209      	bcs.n	800583a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005826:	4b12      	ldr	r3, [pc, #72]	@ (8005870 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4b0f      	ldr	r3, [pc, #60]	@ (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3304      	adds	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f7fe fbb9 	bl	8003faa <vListInsert>
}
 8005838:	e010      	b.n	800585c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800583a:	4b0e      	ldr	r3, [pc, #56]	@ (8005874 <prvAddCurrentTaskToDelayedList+0xa0>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3304      	adds	r3, #4
 8005844:	4619      	mov	r1, r3
 8005846:	4610      	mov	r0, r2
 8005848:	f7fe fbaf 	bl	8003faa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800584c:	4b0a      	ldr	r3, [pc, #40]	@ (8005878 <prvAddCurrentTaskToDelayedList+0xa4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	429a      	cmp	r2, r3
 8005854:	d202      	bcs.n	800585c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005856:	4a08      	ldr	r2, [pc, #32]	@ (8005878 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6013      	str	r3, [r2, #0]
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000f5c 	.word	0x20000f5c
 8005868:	20000a84 	.word	0x20000a84
 800586c:	20000f44 	.word	0x20000f44
 8005870:	20000f14 	.word	0x20000f14
 8005874:	20000f10 	.word	0x20000f10
 8005878:	20000f78 	.word	0x20000f78

0800587c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	@ 0x28
 8005880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005886:	f000 fb13 	bl	8005eb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800588a:	4b1d      	ldr	r3, [pc, #116]	@ (8005900 <xTimerCreateTimerTask+0x84>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d021      	beq.n	80058d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800589a:	1d3a      	adds	r2, r7, #4
 800589c:	f107 0108 	add.w	r1, r7, #8
 80058a0:	f107 030c 	add.w	r3, r7, #12
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fe fb15 	bl	8003ed4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	9202      	str	r2, [sp, #8]
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	2302      	movs	r3, #2
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	2300      	movs	r3, #0
 80058ba:	460a      	mov	r2, r1
 80058bc:	4911      	ldr	r1, [pc, #68]	@ (8005904 <xTimerCreateTimerTask+0x88>)
 80058be:	4812      	ldr	r0, [pc, #72]	@ (8005908 <xTimerCreateTimerTask+0x8c>)
 80058c0:	f7ff f8d0 	bl	8004a64 <xTaskCreateStatic>
 80058c4:	4603      	mov	r3, r0
 80058c6:	4a11      	ldr	r2, [pc, #68]	@ (800590c <xTimerCreateTimerTask+0x90>)
 80058c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80058ca:	4b10      	ldr	r3, [pc, #64]	@ (800590c <xTimerCreateTimerTask+0x90>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80058d2:	2301      	movs	r3, #1
 80058d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10b      	bne.n	80058f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	613b      	str	r3, [r7, #16]
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	e7fd      	b.n	80058f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80058f4:	697b      	ldr	r3, [r7, #20]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000fb4 	.word	0x20000fb4
 8005904:	0800af04 	.word	0x0800af04
 8005908:	08005a49 	.word	0x08005a49
 800590c:	20000fb8 	.word	0x20000fb8

08005910 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	@ 0x28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800591e:	2300      	movs	r3, #0
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10b      	bne.n	8005940 <xTimerGenericCommand+0x30>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	623b      	str	r3, [r7, #32]
}
 800593a:	bf00      	nop
 800593c:	bf00      	nop
 800593e:	e7fd      	b.n	800593c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005940:	4b19      	ldr	r3, [pc, #100]	@ (80059a8 <xTimerGenericCommand+0x98>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d02a      	beq.n	800599e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b05      	cmp	r3, #5
 8005958:	dc18      	bgt.n	800598c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800595a:	f7ff fead 	bl	80056b8 <xTaskGetSchedulerState>
 800595e:	4603      	mov	r3, r0
 8005960:	2b02      	cmp	r3, #2
 8005962:	d109      	bne.n	8005978 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005964:	4b10      	ldr	r3, [pc, #64]	@ (80059a8 <xTimerGenericCommand+0x98>)
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	f107 0110 	add.w	r1, r7, #16
 800596c:	2300      	movs	r3, #0
 800596e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005970:	f7fe fc88 	bl	8004284 <xQueueGenericSend>
 8005974:	6278      	str	r0, [r7, #36]	@ 0x24
 8005976:	e012      	b.n	800599e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005978:	4b0b      	ldr	r3, [pc, #44]	@ (80059a8 <xTimerGenericCommand+0x98>)
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	f107 0110 	add.w	r1, r7, #16
 8005980:	2300      	movs	r3, #0
 8005982:	2200      	movs	r2, #0
 8005984:	f7fe fc7e 	bl	8004284 <xQueueGenericSend>
 8005988:	6278      	str	r0, [r7, #36]	@ 0x24
 800598a:	e008      	b.n	800599e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800598c:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <xTimerGenericCommand+0x98>)
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	f107 0110 	add.w	r1, r7, #16
 8005994:	2300      	movs	r3, #0
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	f7fe fd76 	bl	8004488 <xQueueGenericSendFromISR>
 800599c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3728      	adds	r7, #40	@ 0x28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20000fb4 	.word	0x20000fb4

080059ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059b6:	4b23      	ldr	r3, [pc, #140]	@ (8005a44 <prvProcessExpiredTimer+0x98>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fe fb29 	bl	800401c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d023      	beq.n	8005a20 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	18d1      	adds	r1, r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	6978      	ldr	r0, [r7, #20]
 80059e6:	f000 f8d5 	bl	8005b94 <prvInsertTimerInActiveList>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d020      	beq.n	8005a32 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059f0:	2300      	movs	r3, #0
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	2300      	movs	r3, #0
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	2100      	movs	r1, #0
 80059fa:	6978      	ldr	r0, [r7, #20]
 80059fc:	f7ff ff88 	bl	8005910 <xTimerGenericCommand>
 8005a00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d114      	bne.n	8005a32 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	60fb      	str	r3, [r7, #12]
}
 8005a1a:	bf00      	nop
 8005a1c:	bf00      	nop
 8005a1e:	e7fd      	b.n	8005a1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a26:	f023 0301 	bic.w	r3, r3, #1
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	6978      	ldr	r0, [r7, #20]
 8005a38:	4798      	blx	r3
}
 8005a3a:	bf00      	nop
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20000fac 	.word	0x20000fac

08005a48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a50:	f107 0308 	add.w	r3, r7, #8
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 f859 	bl	8005b0c <prvGetNextExpireTime>
 8005a5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f805 	bl	8005a70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a66:	f000 f8d7 	bl	8005c18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a6a:	bf00      	nop
 8005a6c:	e7f0      	b.n	8005a50 <prvTimerTask+0x8>
	...

08005a70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a7a:	f7ff fa37 	bl	8004eec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a7e:	f107 0308 	add.w	r3, r7, #8
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 f866 	bl	8005b54 <prvSampleTimeNow>
 8005a88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d130      	bne.n	8005af2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <prvProcessTimerOrBlockTask+0x3c>
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d806      	bhi.n	8005aac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a9e:	f7ff fa33 	bl	8004f08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005aa2:	68f9      	ldr	r1, [r7, #12]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ff81 	bl	80059ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005aaa:	e024      	b.n	8005af6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d008      	beq.n	8005ac4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ab2:	4b13      	ldr	r3, [pc, #76]	@ (8005b00 <prvProcessTimerOrBlockTask+0x90>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <prvProcessTimerOrBlockTask+0x50>
 8005abc:	2301      	movs	r3, #1
 8005abe:	e000      	b.n	8005ac2 <prvProcessTimerOrBlockTask+0x52>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b04 <prvProcessTimerOrBlockTask+0x94>)
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	f7fe ff93 	bl	80049fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ad6:	f7ff fa17 	bl	8004f08 <xTaskResumeAll>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ae0:	4b09      	ldr	r3, [pc, #36]	@ (8005b08 <prvProcessTimerOrBlockTask+0x98>)
 8005ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	f3bf 8f6f 	isb	sy
}
 8005af0:	e001      	b.n	8005af6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005af2:	f7ff fa09 	bl	8004f08 <xTaskResumeAll>
}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000fb0 	.word	0x20000fb0
 8005b04:	20000fb4 	.word	0x20000fb4
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b14:	4b0e      	ldr	r3, [pc, #56]	@ (8005b50 <prvGetNextExpireTime+0x44>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <prvGetNextExpireTime+0x16>
 8005b1e:	2201      	movs	r2, #1
 8005b20:	e000      	b.n	8005b24 <prvGetNextExpireTime+0x18>
 8005b22:	2200      	movs	r2, #0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d105      	bne.n	8005b3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b30:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <prvGetNextExpireTime+0x44>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	e001      	b.n	8005b40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b40:	68fb      	ldr	r3, [r7, #12]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	20000fac 	.word	0x20000fac

08005b54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b5c:	f7ff fa72 	bl	8005044 <xTaskGetTickCount>
 8005b60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b62:	4b0b      	ldr	r3, [pc, #44]	@ (8005b90 <prvSampleTimeNow+0x3c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d205      	bcs.n	8005b78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b6c:	f000 f93a 	bl	8005de4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e002      	b.n	8005b7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b7e:	4a04      	ldr	r2, [pc, #16]	@ (8005b90 <prvSampleTimeNow+0x3c>)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b84:	68fb      	ldr	r3, [r7, #12]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000fbc 	.word	0x20000fbc

08005b94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d812      	bhi.n	8005be0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	1ad2      	subs	r2, r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d302      	bcc.n	8005bce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e01b      	b.n	8005c06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005bce:	4b10      	ldr	r3, [pc, #64]	@ (8005c10 <prvInsertTimerInActiveList+0x7c>)
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4610      	mov	r0, r2
 8005bda:	f7fe f9e6 	bl	8003faa <vListInsert>
 8005bde:	e012      	b.n	8005c06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d206      	bcs.n	8005bf6 <prvInsertTimerInActiveList+0x62>
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d302      	bcc.n	8005bf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	e007      	b.n	8005c06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bf6:	4b07      	ldr	r3, [pc, #28]	@ (8005c14 <prvInsertTimerInActiveList+0x80>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f7fe f9d2 	bl	8003faa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c06:	697b      	ldr	r3, [r7, #20]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20000fb0 	.word	0x20000fb0
 8005c14:	20000fac 	.word	0x20000fac

08005c18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08e      	sub	sp, #56	@ 0x38
 8005c1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c1e:	e0ce      	b.n	8005dbe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	da19      	bge.n	8005c5a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c26:	1d3b      	adds	r3, r7, #4
 8005c28:	3304      	adds	r3, #4
 8005c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10b      	bne.n	8005c4a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	61fb      	str	r3, [r7, #28]
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop
 8005c48:	e7fd      	b.n	8005c46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c50:	6850      	ldr	r0, [r2, #4]
 8005c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c54:	6892      	ldr	r2, [r2, #8]
 8005c56:	4611      	mov	r1, r2
 8005c58:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f2c0 80ae 	blt.w	8005dbe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c70:	3304      	adds	r3, #4
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fe f9d2 	bl	800401c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c78:	463b      	mov	r3, r7
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff ff6a 	bl	8005b54 <prvSampleTimeNow>
 8005c80:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b09      	cmp	r3, #9
 8005c86:	f200 8097 	bhi.w	8005db8 <prvProcessReceivedCommands+0x1a0>
 8005c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c90 <prvProcessReceivedCommands+0x78>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005cb9 	.word	0x08005cb9
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cb9 	.word	0x08005cb9
 8005c9c:	08005d2f 	.word	0x08005d2f
 8005ca0:	08005d43 	.word	0x08005d43
 8005ca4:	08005d8f 	.word	0x08005d8f
 8005ca8:	08005cb9 	.word	0x08005cb9
 8005cac:	08005cb9 	.word	0x08005cb9
 8005cb0:	08005d2f 	.word	0x08005d2f
 8005cb4:	08005d43 	.word	0x08005d43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cbe:	f043 0301 	orr.w	r3, r3, #1
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	18d1      	adds	r1, r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cd8:	f7ff ff5c 	bl	8005b94 <prvInsertTimerInActiveList>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d06c      	beq.n	8005dbc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ce8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d061      	beq.n	8005dbc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	441a      	add	r2, r3
 8005d00:	2300      	movs	r3, #0
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	2300      	movs	r3, #0
 8005d06:	2100      	movs	r1, #0
 8005d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d0a:	f7ff fe01 	bl	8005910 <xTimerGenericCommand>
 8005d0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d152      	bne.n	8005dbc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	61bb      	str	r3, [r7, #24]
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	e7fd      	b.n	8005d2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d34:	f023 0301 	bic.w	r3, r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005d40:	e03d      	b.n	8005dbe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10b      	bne.n	8005d7a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	617b      	str	r3, [r7, #20]
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	e7fd      	b.n	8005d76 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d80:	18d1      	adds	r1, r2, r3
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d88:	f7ff ff04 	bl	8005b94 <prvInsertTimerInActiveList>
					break;
 8005d8c:	e017      	b.n	8005dbe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d103      	bne.n	8005da4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005d9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d9e:	f000 fbeb 	bl	8006578 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005da2:	e00c      	b.n	8005dbe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005daa:	f023 0301 	bic.w	r3, r3, #1
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005db6:	e002      	b.n	8005dbe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005db8:	bf00      	nop
 8005dba:	e000      	b.n	8005dbe <prvProcessReceivedCommands+0x1a6>
					break;
 8005dbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dbe:	4b08      	ldr	r3, [pc, #32]	@ (8005de0 <prvProcessReceivedCommands+0x1c8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	1d39      	adds	r1, r7, #4
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe fbfc 	bl	80045c4 <xQueueReceive>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f47f af26 	bne.w	8005c20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	3730      	adds	r7, #48	@ 0x30
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000fb4 	.word	0x20000fb4

08005de4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dea:	e049      	b.n	8005e80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dec:	4b2e      	ldr	r3, [pc, #184]	@ (8005ea8 <prvSwitchTimerLists+0xc4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df6:	4b2c      	ldr	r3, [pc, #176]	@ (8005ea8 <prvSwitchTimerLists+0xc4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe f909 	bl	800401c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d02f      	beq.n	8005e80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4413      	add	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d90e      	bls.n	8005e50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea8 <prvSwitchTimerLists+0xc4>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3304      	adds	r3, #4
 8005e46:	4619      	mov	r1, r3
 8005e48:	4610      	mov	r0, r2
 8005e4a:	f7fe f8ae 	bl	8003faa <vListInsert>
 8005e4e:	e017      	b.n	8005e80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e50:	2300      	movs	r3, #0
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	2300      	movs	r3, #0
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	2100      	movs	r1, #0
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f7ff fd58 	bl	8005910 <xTimerGenericCommand>
 8005e60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10b      	bne.n	8005e80 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	603b      	str	r3, [r7, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	bf00      	nop
 8005e7e:	e7fd      	b.n	8005e7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e80:	4b09      	ldr	r3, [pc, #36]	@ (8005ea8 <prvSwitchTimerLists+0xc4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1b0      	bne.n	8005dec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e8a:	4b07      	ldr	r3, [pc, #28]	@ (8005ea8 <prvSwitchTimerLists+0xc4>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e90:	4b06      	ldr	r3, [pc, #24]	@ (8005eac <prvSwitchTimerLists+0xc8>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a04      	ldr	r2, [pc, #16]	@ (8005ea8 <prvSwitchTimerLists+0xc4>)
 8005e96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e98:	4a04      	ldr	r2, [pc, #16]	@ (8005eac <prvSwitchTimerLists+0xc8>)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	6013      	str	r3, [r2, #0]
}
 8005e9e:	bf00      	nop
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000fac 	.word	0x20000fac
 8005eac:	20000fb0 	.word	0x20000fb0

08005eb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005eb6:	f000 f96f 	bl	8006198 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005eba:	4b15      	ldr	r3, [pc, #84]	@ (8005f10 <prvCheckForValidListAndQueue+0x60>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d120      	bne.n	8005f04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ec2:	4814      	ldr	r0, [pc, #80]	@ (8005f14 <prvCheckForValidListAndQueue+0x64>)
 8005ec4:	f7fe f820 	bl	8003f08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ec8:	4813      	ldr	r0, [pc, #76]	@ (8005f18 <prvCheckForValidListAndQueue+0x68>)
 8005eca:	f7fe f81d 	bl	8003f08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ece:	4b13      	ldr	r3, [pc, #76]	@ (8005f1c <prvCheckForValidListAndQueue+0x6c>)
 8005ed0:	4a10      	ldr	r2, [pc, #64]	@ (8005f14 <prvCheckForValidListAndQueue+0x64>)
 8005ed2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ed4:	4b12      	ldr	r3, [pc, #72]	@ (8005f20 <prvCheckForValidListAndQueue+0x70>)
 8005ed6:	4a10      	ldr	r2, [pc, #64]	@ (8005f18 <prvCheckForValidListAndQueue+0x68>)
 8005ed8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005eda:	2300      	movs	r3, #0
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	4b11      	ldr	r3, [pc, #68]	@ (8005f24 <prvCheckForValidListAndQueue+0x74>)
 8005ee0:	4a11      	ldr	r2, [pc, #68]	@ (8005f28 <prvCheckForValidListAndQueue+0x78>)
 8005ee2:	2110      	movs	r1, #16
 8005ee4:	200a      	movs	r0, #10
 8005ee6:	f7fe f92d 	bl	8004144 <xQueueGenericCreateStatic>
 8005eea:	4603      	mov	r3, r0
 8005eec:	4a08      	ldr	r2, [pc, #32]	@ (8005f10 <prvCheckForValidListAndQueue+0x60>)
 8005eee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ef0:	4b07      	ldr	r3, [pc, #28]	@ (8005f10 <prvCheckForValidListAndQueue+0x60>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ef8:	4b05      	ldr	r3, [pc, #20]	@ (8005f10 <prvCheckForValidListAndQueue+0x60>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	490b      	ldr	r1, [pc, #44]	@ (8005f2c <prvCheckForValidListAndQueue+0x7c>)
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe fd52 	bl	80049a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f04:	f000 f97a 	bl	80061fc <vPortExitCritical>
}
 8005f08:	bf00      	nop
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000fb4 	.word	0x20000fb4
 8005f14:	20000f84 	.word	0x20000f84
 8005f18:	20000f98 	.word	0x20000f98
 8005f1c:	20000fac 	.word	0x20000fac
 8005f20:	20000fb0 	.word	0x20000fb0
 8005f24:	20001060 	.word	0x20001060
 8005f28:	20000fc0 	.word	0x20000fc0
 8005f2c:	0800af0c 	.word	0x0800af0c

08005f30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3b04      	subs	r3, #4
 8005f40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3b04      	subs	r3, #4
 8005f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f023 0201 	bic.w	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3b04      	subs	r3, #4
 8005f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f60:	4a0c      	ldr	r2, [pc, #48]	@ (8005f94 <pxPortInitialiseStack+0x64>)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3b14      	subs	r3, #20
 8005f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3b04      	subs	r3, #4
 8005f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f06f 0202 	mvn.w	r2, #2
 8005f7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3b20      	subs	r3, #32
 8005f84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f86:	68fb      	ldr	r3, [r7, #12]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	08005f99 	.word	0x08005f99

08005f98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fa2:	4b13      	ldr	r3, [pc, #76]	@ (8005ff0 <prvTaskExitError+0x58>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005faa:	d00b      	beq.n	8005fc4 <prvTaskExitError+0x2c>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	60fb      	str	r3, [r7, #12]
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	e7fd      	b.n	8005fc0 <prvTaskExitError+0x28>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	60bb      	str	r3, [r7, #8]
}
 8005fd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fd8:	bf00      	nop
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0fc      	beq.n	8005fda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	2000000c 	.word	0x2000000c
	...

08006000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006000:	4b07      	ldr	r3, [pc, #28]	@ (8006020 <pxCurrentTCBConst2>)
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	6808      	ldr	r0, [r1, #0]
 8006006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600a:	f380 8809 	msr	PSP, r0
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f380 8811 	msr	BASEPRI, r0
 800601a:	4770      	bx	lr
 800601c:	f3af 8000 	nop.w

08006020 <pxCurrentTCBConst2>:
 8006020:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop

08006028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006028:	4808      	ldr	r0, [pc, #32]	@ (800604c <prvPortStartFirstTask+0x24>)
 800602a:	6800      	ldr	r0, [r0, #0]
 800602c:	6800      	ldr	r0, [r0, #0]
 800602e:	f380 8808 	msr	MSP, r0
 8006032:	f04f 0000 	mov.w	r0, #0
 8006036:	f380 8814 	msr	CONTROL, r0
 800603a:	b662      	cpsie	i
 800603c:	b661      	cpsie	f
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	df00      	svc	0
 8006048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800604a:	bf00      	nop
 800604c:	e000ed08 	.word	0xe000ed08

08006050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006056:	4b47      	ldr	r3, [pc, #284]	@ (8006174 <xPortStartScheduler+0x124>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a47      	ldr	r2, [pc, #284]	@ (8006178 <xPortStartScheduler+0x128>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d10b      	bne.n	8006078 <xPortStartScheduler+0x28>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	613b      	str	r3, [r7, #16]
}
 8006072:	bf00      	nop
 8006074:	bf00      	nop
 8006076:	e7fd      	b.n	8006074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006078:	4b3e      	ldr	r3, [pc, #248]	@ (8006174 <xPortStartScheduler+0x124>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a3f      	ldr	r2, [pc, #252]	@ (800617c <xPortStartScheduler+0x12c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d10b      	bne.n	800609a <xPortStartScheduler+0x4a>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	60fb      	str	r3, [r7, #12]
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	e7fd      	b.n	8006096 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800609a:	4b39      	ldr	r3, [pc, #228]	@ (8006180 <xPortStartScheduler+0x130>)
 800609c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	22ff      	movs	r2, #255	@ 0xff
 80060aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	4b31      	ldr	r3, [pc, #196]	@ (8006184 <xPortStartScheduler+0x134>)
 80060c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060c2:	4b31      	ldr	r3, [pc, #196]	@ (8006188 <xPortStartScheduler+0x138>)
 80060c4:	2207      	movs	r2, #7
 80060c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060c8:	e009      	b.n	80060de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80060ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006188 <xPortStartScheduler+0x138>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006188 <xPortStartScheduler+0x138>)
 80060d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060de:	78fb      	ldrb	r3, [r7, #3]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e6:	2b80      	cmp	r3, #128	@ 0x80
 80060e8:	d0ef      	beq.n	80060ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060ea:	4b27      	ldr	r3, [pc, #156]	@ (8006188 <xPortStartScheduler+0x138>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f1c3 0307 	rsb	r3, r3, #7
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d00b      	beq.n	800610e <xPortStartScheduler+0xbe>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	60bb      	str	r3, [r7, #8]
}
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	e7fd      	b.n	800610a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800610e:	4b1e      	ldr	r3, [pc, #120]	@ (8006188 <xPortStartScheduler+0x138>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	021b      	lsls	r3, r3, #8
 8006114:	4a1c      	ldr	r2, [pc, #112]	@ (8006188 <xPortStartScheduler+0x138>)
 8006116:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006118:	4b1b      	ldr	r3, [pc, #108]	@ (8006188 <xPortStartScheduler+0x138>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006120:	4a19      	ldr	r2, [pc, #100]	@ (8006188 <xPortStartScheduler+0x138>)
 8006122:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800612c:	4b17      	ldr	r3, [pc, #92]	@ (800618c <xPortStartScheduler+0x13c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a16      	ldr	r2, [pc, #88]	@ (800618c <xPortStartScheduler+0x13c>)
 8006132:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006136:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006138:	4b14      	ldr	r3, [pc, #80]	@ (800618c <xPortStartScheduler+0x13c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a13      	ldr	r2, [pc, #76]	@ (800618c <xPortStartScheduler+0x13c>)
 800613e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006142:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006144:	f000 f8da 	bl	80062fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006148:	4b11      	ldr	r3, [pc, #68]	@ (8006190 <xPortStartScheduler+0x140>)
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800614e:	f000 f8f9 	bl	8006344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006152:	4b10      	ldr	r3, [pc, #64]	@ (8006194 <xPortStartScheduler+0x144>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a0f      	ldr	r2, [pc, #60]	@ (8006194 <xPortStartScheduler+0x144>)
 8006158:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800615c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800615e:	f7ff ff63 	bl	8006028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006162:	f7ff f839 	bl	80051d8 <vTaskSwitchContext>
	prvTaskExitError();
 8006166:	f7ff ff17 	bl	8005f98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	e000ed00 	.word	0xe000ed00
 8006178:	410fc271 	.word	0x410fc271
 800617c:	410fc270 	.word	0x410fc270
 8006180:	e000e400 	.word	0xe000e400
 8006184:	200010b0 	.word	0x200010b0
 8006188:	200010b4 	.word	0x200010b4
 800618c:	e000ed20 	.word	0xe000ed20
 8006190:	2000000c 	.word	0x2000000c
 8006194:	e000ef34 	.word	0xe000ef34

08006198 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	607b      	str	r3, [r7, #4]
}
 80061b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061b2:	4b10      	ldr	r3, [pc, #64]	@ (80061f4 <vPortEnterCritical+0x5c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3301      	adds	r3, #1
 80061b8:	4a0e      	ldr	r2, [pc, #56]	@ (80061f4 <vPortEnterCritical+0x5c>)
 80061ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061bc:	4b0d      	ldr	r3, [pc, #52]	@ (80061f4 <vPortEnterCritical+0x5c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d110      	bne.n	80061e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061c4:	4b0c      	ldr	r3, [pc, #48]	@ (80061f8 <vPortEnterCritical+0x60>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	603b      	str	r3, [r7, #0]
}
 80061e0:	bf00      	nop
 80061e2:	bf00      	nop
 80061e4:	e7fd      	b.n	80061e2 <vPortEnterCritical+0x4a>
	}
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	2000000c 	.word	0x2000000c
 80061f8:	e000ed04 	.word	0xe000ed04

080061fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006202:	4b12      	ldr	r3, [pc, #72]	@ (800624c <vPortExitCritical+0x50>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10b      	bne.n	8006222 <vPortExitCritical+0x26>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	607b      	str	r3, [r7, #4]
}
 800621c:	bf00      	nop
 800621e:	bf00      	nop
 8006220:	e7fd      	b.n	800621e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006222:	4b0a      	ldr	r3, [pc, #40]	@ (800624c <vPortExitCritical+0x50>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3b01      	subs	r3, #1
 8006228:	4a08      	ldr	r2, [pc, #32]	@ (800624c <vPortExitCritical+0x50>)
 800622a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800622c:	4b07      	ldr	r3, [pc, #28]	@ (800624c <vPortExitCritical+0x50>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d105      	bne.n	8006240 <vPortExitCritical+0x44>
 8006234:	2300      	movs	r3, #0
 8006236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	f383 8811 	msr	BASEPRI, r3
}
 800623e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	2000000c 	.word	0x2000000c

08006250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006250:	f3ef 8009 	mrs	r0, PSP
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	4b15      	ldr	r3, [pc, #84]	@ (80062b0 <pxCurrentTCBConst>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	f01e 0f10 	tst.w	lr, #16
 8006260:	bf08      	it	eq
 8006262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626a:	6010      	str	r0, [r2, #0]
 800626c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006270:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006274:	f380 8811 	msr	BASEPRI, r0
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f7fe ffaa 	bl	80051d8 <vTaskSwitchContext>
 8006284:	f04f 0000 	mov.w	r0, #0
 8006288:	f380 8811 	msr	BASEPRI, r0
 800628c:	bc09      	pop	{r0, r3}
 800628e:	6819      	ldr	r1, [r3, #0]
 8006290:	6808      	ldr	r0, [r1, #0]
 8006292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006296:	f01e 0f10 	tst.w	lr, #16
 800629a:	bf08      	it	eq
 800629c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062a0:	f380 8809 	msr	PSP, r0
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	f3af 8000 	nop.w

080062b0 <pxCurrentTCBConst>:
 80062b0:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop

080062b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	607b      	str	r3, [r7, #4]
}
 80062d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062d2:	f7fe fec7 	bl	8005064 <xTaskIncrementTick>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062dc:	4b06      	ldr	r3, [pc, #24]	@ (80062f8 <xPortSysTickHandler+0x40>)
 80062de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	2300      	movs	r3, #0
 80062e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f383 8811 	msr	BASEPRI, r3
}
 80062ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006300:	4b0b      	ldr	r3, [pc, #44]	@ (8006330 <vPortSetupTimerInterrupt+0x34>)
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006306:	4b0b      	ldr	r3, [pc, #44]	@ (8006334 <vPortSetupTimerInterrupt+0x38>)
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800630c:	4b0a      	ldr	r3, [pc, #40]	@ (8006338 <vPortSetupTimerInterrupt+0x3c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a0a      	ldr	r2, [pc, #40]	@ (800633c <vPortSetupTimerInterrupt+0x40>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	099b      	lsrs	r3, r3, #6
 8006318:	4a09      	ldr	r2, [pc, #36]	@ (8006340 <vPortSetupTimerInterrupt+0x44>)
 800631a:	3b01      	subs	r3, #1
 800631c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800631e:	4b04      	ldr	r3, [pc, #16]	@ (8006330 <vPortSetupTimerInterrupt+0x34>)
 8006320:	2207      	movs	r2, #7
 8006322:	601a      	str	r2, [r3, #0]
}
 8006324:	bf00      	nop
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	e000e010 	.word	0xe000e010
 8006334:	e000e018 	.word	0xe000e018
 8006338:	20000000 	.word	0x20000000
 800633c:	10624dd3 	.word	0x10624dd3
 8006340:	e000e014 	.word	0xe000e014

08006344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006344:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006354 <vPortEnableVFP+0x10>
 8006348:	6801      	ldr	r1, [r0, #0]
 800634a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800634e:	6001      	str	r1, [r0, #0]
 8006350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006352:	bf00      	nop
 8006354:	e000ed88 	.word	0xe000ed88

08006358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800635e:	f3ef 8305 	mrs	r3, IPSR
 8006362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b0f      	cmp	r3, #15
 8006368:	d915      	bls.n	8006396 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800636a:	4a18      	ldr	r2, [pc, #96]	@ (80063cc <vPortValidateInterruptPriority+0x74>)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006374:	4b16      	ldr	r3, [pc, #88]	@ (80063d0 <vPortValidateInterruptPriority+0x78>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	7afa      	ldrb	r2, [r7, #11]
 800637a:	429a      	cmp	r2, r3
 800637c:	d20b      	bcs.n	8006396 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	607b      	str	r3, [r7, #4]
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	e7fd      	b.n	8006392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006396:	4b0f      	ldr	r3, [pc, #60]	@ (80063d4 <vPortValidateInterruptPriority+0x7c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800639e:	4b0e      	ldr	r3, [pc, #56]	@ (80063d8 <vPortValidateInterruptPriority+0x80>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d90b      	bls.n	80063be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	603b      	str	r3, [r7, #0]
}
 80063b8:	bf00      	nop
 80063ba:	bf00      	nop
 80063bc:	e7fd      	b.n	80063ba <vPortValidateInterruptPriority+0x62>
	}
 80063be:	bf00      	nop
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	e000e3f0 	.word	0xe000e3f0
 80063d0:	200010b0 	.word	0x200010b0
 80063d4:	e000ed0c 	.word	0xe000ed0c
 80063d8:	200010b4 	.word	0x200010b4

080063dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	@ 0x28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063e8:	f7fe fd80 	bl	8004eec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063ec:	4b5c      	ldr	r3, [pc, #368]	@ (8006560 <pvPortMalloc+0x184>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063f4:	f000 f924 	bl	8006640 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063f8:	4b5a      	ldr	r3, [pc, #360]	@ (8006564 <pvPortMalloc+0x188>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	f040 8095 	bne.w	8006530 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01e      	beq.n	800644a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800640c:	2208      	movs	r2, #8
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4413      	add	r3, r2
 8006412:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	2b00      	cmp	r3, #0
 800641c:	d015      	beq.n	800644a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f023 0307 	bic.w	r3, r3, #7
 8006424:	3308      	adds	r3, #8
 8006426:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f003 0307 	and.w	r3, r3, #7
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <pvPortMalloc+0x6e>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	617b      	str	r3, [r7, #20]
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	e7fd      	b.n	8006446 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d06f      	beq.n	8006530 <pvPortMalloc+0x154>
 8006450:	4b45      	ldr	r3, [pc, #276]	@ (8006568 <pvPortMalloc+0x18c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	429a      	cmp	r2, r3
 8006458:	d86a      	bhi.n	8006530 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800645a:	4b44      	ldr	r3, [pc, #272]	@ (800656c <pvPortMalloc+0x190>)
 800645c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800645e:	4b43      	ldr	r3, [pc, #268]	@ (800656c <pvPortMalloc+0x190>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006464:	e004      	b.n	8006470 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	429a      	cmp	r2, r3
 8006478:	d903      	bls.n	8006482 <pvPortMalloc+0xa6>
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f1      	bne.n	8006466 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006482:	4b37      	ldr	r3, [pc, #220]	@ (8006560 <pvPortMalloc+0x184>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006488:	429a      	cmp	r2, r3
 800648a:	d051      	beq.n	8006530 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2208      	movs	r2, #8
 8006492:	4413      	add	r3, r2
 8006494:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	1ad2      	subs	r2, r2, r3
 80064a6:	2308      	movs	r3, #8
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d920      	bls.n	80064f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4413      	add	r3, r2
 80064b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00b      	beq.n	80064d8 <pvPortMalloc+0xfc>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	613b      	str	r3, [r7, #16]
}
 80064d2:	bf00      	nop
 80064d4:	bf00      	nop
 80064d6:	e7fd      	b.n	80064d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	1ad2      	subs	r2, r2, r3
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064ea:	69b8      	ldr	r0, [r7, #24]
 80064ec:	f000 f90a 	bl	8006704 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006568 <pvPortMalloc+0x18c>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006568 <pvPortMalloc+0x18c>)
 80064fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006568 <pvPortMalloc+0x18c>)
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4b1b      	ldr	r3, [pc, #108]	@ (8006570 <pvPortMalloc+0x194>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d203      	bcs.n	8006512 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800650a:	4b17      	ldr	r3, [pc, #92]	@ (8006568 <pvPortMalloc+0x18c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a18      	ldr	r2, [pc, #96]	@ (8006570 <pvPortMalloc+0x194>)
 8006510:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	4b13      	ldr	r3, [pc, #76]	@ (8006564 <pvPortMalloc+0x188>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	431a      	orrs	r2, r3
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006526:	4b13      	ldr	r3, [pc, #76]	@ (8006574 <pvPortMalloc+0x198>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3301      	adds	r3, #1
 800652c:	4a11      	ldr	r2, [pc, #68]	@ (8006574 <pvPortMalloc+0x198>)
 800652e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006530:	f7fe fcea 	bl	8004f08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <pvPortMalloc+0x17a>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	60fb      	str	r3, [r7, #12]
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	e7fd      	b.n	8006552 <pvPortMalloc+0x176>
	return pvReturn;
 8006556:	69fb      	ldr	r3, [r7, #28]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3728      	adds	r7, #40	@ 0x28
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20004cc0 	.word	0x20004cc0
 8006564:	20004cd4 	.word	0x20004cd4
 8006568:	20004cc4 	.word	0x20004cc4
 800656c:	20004cb8 	.word	0x20004cb8
 8006570:	20004cc8 	.word	0x20004cc8
 8006574:	20004ccc 	.word	0x20004ccc

08006578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d04f      	beq.n	800662a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800658a:	2308      	movs	r3, #8
 800658c:	425b      	negs	r3, r3
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	4b25      	ldr	r3, [pc, #148]	@ (8006634 <vPortFree+0xbc>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4013      	ands	r3, r2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10b      	bne.n	80065be <vPortFree+0x46>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	60fb      	str	r3, [r7, #12]
}
 80065b8:	bf00      	nop
 80065ba:	bf00      	nop
 80065bc:	e7fd      	b.n	80065ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00b      	beq.n	80065de <vPortFree+0x66>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	60bb      	str	r3, [r7, #8]
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	e7fd      	b.n	80065da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	4b14      	ldr	r3, [pc, #80]	@ (8006634 <vPortFree+0xbc>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01e      	beq.n	800662a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d11a      	bne.n	800662a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006634 <vPortFree+0xbc>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	43db      	mvns	r3, r3
 80065fe:	401a      	ands	r2, r3
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006604:	f7fe fc72 	bl	8004eec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	4b0a      	ldr	r3, [pc, #40]	@ (8006638 <vPortFree+0xc0>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4413      	add	r3, r2
 8006612:	4a09      	ldr	r2, [pc, #36]	@ (8006638 <vPortFree+0xc0>)
 8006614:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006616:	6938      	ldr	r0, [r7, #16]
 8006618:	f000 f874 	bl	8006704 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800661c:	4b07      	ldr	r3, [pc, #28]	@ (800663c <vPortFree+0xc4>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3301      	adds	r3, #1
 8006622:	4a06      	ldr	r2, [pc, #24]	@ (800663c <vPortFree+0xc4>)
 8006624:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006626:	f7fe fc6f 	bl	8004f08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800662a:	bf00      	nop
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20004cd4 	.word	0x20004cd4
 8006638:	20004cc4 	.word	0x20004cc4
 800663c:	20004cd0 	.word	0x20004cd0

08006640 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006646:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800664a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800664c:	4b27      	ldr	r3, [pc, #156]	@ (80066ec <prvHeapInit+0xac>)
 800664e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00c      	beq.n	8006674 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3307      	adds	r3, #7
 800665e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0307 	bic.w	r3, r3, #7
 8006666:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	4a1f      	ldr	r2, [pc, #124]	@ (80066ec <prvHeapInit+0xac>)
 8006670:	4413      	add	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006678:	4a1d      	ldr	r2, [pc, #116]	@ (80066f0 <prvHeapInit+0xb0>)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800667e:	4b1c      	ldr	r3, [pc, #112]	@ (80066f0 <prvHeapInit+0xb0>)
 8006680:	2200      	movs	r2, #0
 8006682:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	4413      	add	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800668c:	2208      	movs	r2, #8
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	1a9b      	subs	r3, r3, r2
 8006692:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0307 	bic.w	r3, r3, #7
 800669a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4a15      	ldr	r2, [pc, #84]	@ (80066f4 <prvHeapInit+0xb4>)
 80066a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066a2:	4b14      	ldr	r3, [pc, #80]	@ (80066f4 <prvHeapInit+0xb4>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2200      	movs	r2, #0
 80066a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066aa:	4b12      	ldr	r3, [pc, #72]	@ (80066f4 <prvHeapInit+0xb4>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	1ad2      	subs	r2, r2, r3
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066c0:	4b0c      	ldr	r3, [pc, #48]	@ (80066f4 <prvHeapInit+0xb4>)
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	4a0a      	ldr	r2, [pc, #40]	@ (80066f8 <prvHeapInit+0xb8>)
 80066ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	4a09      	ldr	r2, [pc, #36]	@ (80066fc <prvHeapInit+0xbc>)
 80066d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066d8:	4b09      	ldr	r3, [pc, #36]	@ (8006700 <prvHeapInit+0xc0>)
 80066da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80066de:	601a      	str	r2, [r3, #0]
}
 80066e0:	bf00      	nop
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	200010b8 	.word	0x200010b8
 80066f0:	20004cb8 	.word	0x20004cb8
 80066f4:	20004cc0 	.word	0x20004cc0
 80066f8:	20004cc8 	.word	0x20004cc8
 80066fc:	20004cc4 	.word	0x20004cc4
 8006700:	20004cd4 	.word	0x20004cd4

08006704 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800670c:	4b28      	ldr	r3, [pc, #160]	@ (80067b0 <prvInsertBlockIntoFreeList+0xac>)
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	e002      	b.n	8006718 <prvInsertBlockIntoFreeList+0x14>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	429a      	cmp	r2, r3
 8006720:	d8f7      	bhi.n	8006712 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	4413      	add	r3, r2
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	429a      	cmp	r2, r3
 8006732:	d108      	bne.n	8006746 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	441a      	add	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	441a      	add	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d118      	bne.n	800678c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	4b15      	ldr	r3, [pc, #84]	@ (80067b4 <prvInsertBlockIntoFreeList+0xb0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d00d      	beq.n	8006782 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	441a      	add	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	e008      	b.n	8006794 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006782:	4b0c      	ldr	r3, [pc, #48]	@ (80067b4 <prvInsertBlockIntoFreeList+0xb0>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	e003      	b.n	8006794 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	429a      	cmp	r2, r3
 800679a:	d002      	beq.n	80067a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067a2:	bf00      	nop
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20004cb8 	.word	0x20004cb8
 80067b4:	20004cc0 	.word	0x20004cc0

080067b8 <__cvt>:
 80067b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	ec57 6b10 	vmov	r6, r7, d0
 80067c0:	2f00      	cmp	r7, #0
 80067c2:	460c      	mov	r4, r1
 80067c4:	4619      	mov	r1, r3
 80067c6:	463b      	mov	r3, r7
 80067c8:	bfbb      	ittet	lt
 80067ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80067ce:	461f      	movlt	r7, r3
 80067d0:	2300      	movge	r3, #0
 80067d2:	232d      	movlt	r3, #45	@ 0x2d
 80067d4:	700b      	strb	r3, [r1, #0]
 80067d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80067dc:	4691      	mov	r9, r2
 80067de:	f023 0820 	bic.w	r8, r3, #32
 80067e2:	bfbc      	itt	lt
 80067e4:	4632      	movlt	r2, r6
 80067e6:	4616      	movlt	r6, r2
 80067e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067ec:	d005      	beq.n	80067fa <__cvt+0x42>
 80067ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80067f2:	d100      	bne.n	80067f6 <__cvt+0x3e>
 80067f4:	3401      	adds	r4, #1
 80067f6:	2102      	movs	r1, #2
 80067f8:	e000      	b.n	80067fc <__cvt+0x44>
 80067fa:	2103      	movs	r1, #3
 80067fc:	ab03      	add	r3, sp, #12
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	ab02      	add	r3, sp, #8
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	ec47 6b10 	vmov	d0, r6, r7
 8006808:	4653      	mov	r3, sl
 800680a:	4622      	mov	r2, r4
 800680c:	f001 f884 	bl	8007918 <_dtoa_r>
 8006810:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006814:	4605      	mov	r5, r0
 8006816:	d119      	bne.n	800684c <__cvt+0x94>
 8006818:	f019 0f01 	tst.w	r9, #1
 800681c:	d00e      	beq.n	800683c <__cvt+0x84>
 800681e:	eb00 0904 	add.w	r9, r0, r4
 8006822:	2200      	movs	r2, #0
 8006824:	2300      	movs	r3, #0
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7fa f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800682e:	b108      	cbz	r0, 8006834 <__cvt+0x7c>
 8006830:	f8cd 900c 	str.w	r9, [sp, #12]
 8006834:	2230      	movs	r2, #48	@ 0x30
 8006836:	9b03      	ldr	r3, [sp, #12]
 8006838:	454b      	cmp	r3, r9
 800683a:	d31e      	bcc.n	800687a <__cvt+0xc2>
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006840:	1b5b      	subs	r3, r3, r5
 8006842:	4628      	mov	r0, r5
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	b004      	add	sp, #16
 8006848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006850:	eb00 0904 	add.w	r9, r0, r4
 8006854:	d1e5      	bne.n	8006822 <__cvt+0x6a>
 8006856:	7803      	ldrb	r3, [r0, #0]
 8006858:	2b30      	cmp	r3, #48	@ 0x30
 800685a:	d10a      	bne.n	8006872 <__cvt+0xba>
 800685c:	2200      	movs	r2, #0
 800685e:	2300      	movs	r3, #0
 8006860:	4630      	mov	r0, r6
 8006862:	4639      	mov	r1, r7
 8006864:	f7fa f938 	bl	8000ad8 <__aeabi_dcmpeq>
 8006868:	b918      	cbnz	r0, 8006872 <__cvt+0xba>
 800686a:	f1c4 0401 	rsb	r4, r4, #1
 800686e:	f8ca 4000 	str.w	r4, [sl]
 8006872:	f8da 3000 	ldr.w	r3, [sl]
 8006876:	4499      	add	r9, r3
 8006878:	e7d3      	b.n	8006822 <__cvt+0x6a>
 800687a:	1c59      	adds	r1, r3, #1
 800687c:	9103      	str	r1, [sp, #12]
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	e7d9      	b.n	8006836 <__cvt+0x7e>

08006882 <__exponent>:
 8006882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006884:	2900      	cmp	r1, #0
 8006886:	bfba      	itte	lt
 8006888:	4249      	neglt	r1, r1
 800688a:	232d      	movlt	r3, #45	@ 0x2d
 800688c:	232b      	movge	r3, #43	@ 0x2b
 800688e:	2909      	cmp	r1, #9
 8006890:	7002      	strb	r2, [r0, #0]
 8006892:	7043      	strb	r3, [r0, #1]
 8006894:	dd29      	ble.n	80068ea <__exponent+0x68>
 8006896:	f10d 0307 	add.w	r3, sp, #7
 800689a:	461d      	mov	r5, r3
 800689c:	270a      	movs	r7, #10
 800689e:	461a      	mov	r2, r3
 80068a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80068a4:	fb07 1416 	mls	r4, r7, r6, r1
 80068a8:	3430      	adds	r4, #48	@ 0x30
 80068aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80068ae:	460c      	mov	r4, r1
 80068b0:	2c63      	cmp	r4, #99	@ 0x63
 80068b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80068b6:	4631      	mov	r1, r6
 80068b8:	dcf1      	bgt.n	800689e <__exponent+0x1c>
 80068ba:	3130      	adds	r1, #48	@ 0x30
 80068bc:	1e94      	subs	r4, r2, #2
 80068be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068c2:	1c41      	adds	r1, r0, #1
 80068c4:	4623      	mov	r3, r4
 80068c6:	42ab      	cmp	r3, r5
 80068c8:	d30a      	bcc.n	80068e0 <__exponent+0x5e>
 80068ca:	f10d 0309 	add.w	r3, sp, #9
 80068ce:	1a9b      	subs	r3, r3, r2
 80068d0:	42ac      	cmp	r4, r5
 80068d2:	bf88      	it	hi
 80068d4:	2300      	movhi	r3, #0
 80068d6:	3302      	adds	r3, #2
 80068d8:	4403      	add	r3, r0
 80068da:	1a18      	subs	r0, r3, r0
 80068dc:	b003      	add	sp, #12
 80068de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80068e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80068e8:	e7ed      	b.n	80068c6 <__exponent+0x44>
 80068ea:	2330      	movs	r3, #48	@ 0x30
 80068ec:	3130      	adds	r1, #48	@ 0x30
 80068ee:	7083      	strb	r3, [r0, #2]
 80068f0:	70c1      	strb	r1, [r0, #3]
 80068f2:	1d03      	adds	r3, r0, #4
 80068f4:	e7f1      	b.n	80068da <__exponent+0x58>
	...

080068f8 <_printf_float>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	b08d      	sub	sp, #52	@ 0x34
 80068fe:	460c      	mov	r4, r1
 8006900:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006904:	4616      	mov	r6, r2
 8006906:	461f      	mov	r7, r3
 8006908:	4605      	mov	r5, r0
 800690a:	f000 feef 	bl	80076ec <_localeconv_r>
 800690e:	6803      	ldr	r3, [r0, #0]
 8006910:	9304      	str	r3, [sp, #16]
 8006912:	4618      	mov	r0, r3
 8006914:	f7f9 fcb4 	bl	8000280 <strlen>
 8006918:	2300      	movs	r3, #0
 800691a:	930a      	str	r3, [sp, #40]	@ 0x28
 800691c:	f8d8 3000 	ldr.w	r3, [r8]
 8006920:	9005      	str	r0, [sp, #20]
 8006922:	3307      	adds	r3, #7
 8006924:	f023 0307 	bic.w	r3, r3, #7
 8006928:	f103 0208 	add.w	r2, r3, #8
 800692c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006930:	f8d4 b000 	ldr.w	fp, [r4]
 8006934:	f8c8 2000 	str.w	r2, [r8]
 8006938:	e9d3 8900 	ldrd	r8, r9, [r3]
 800693c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006940:	9307      	str	r3, [sp, #28]
 8006942:	f8cd 8018 	str.w	r8, [sp, #24]
 8006946:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800694a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800694e:	4b9c      	ldr	r3, [pc, #624]	@ (8006bc0 <_printf_float+0x2c8>)
 8006950:	f04f 32ff 	mov.w	r2, #4294967295
 8006954:	f7fa f8f2 	bl	8000b3c <__aeabi_dcmpun>
 8006958:	bb70      	cbnz	r0, 80069b8 <_printf_float+0xc0>
 800695a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800695e:	4b98      	ldr	r3, [pc, #608]	@ (8006bc0 <_printf_float+0x2c8>)
 8006960:	f04f 32ff 	mov.w	r2, #4294967295
 8006964:	f7fa f8cc 	bl	8000b00 <__aeabi_dcmple>
 8006968:	bb30      	cbnz	r0, 80069b8 <_printf_float+0xc0>
 800696a:	2200      	movs	r2, #0
 800696c:	2300      	movs	r3, #0
 800696e:	4640      	mov	r0, r8
 8006970:	4649      	mov	r1, r9
 8006972:	f7fa f8bb 	bl	8000aec <__aeabi_dcmplt>
 8006976:	b110      	cbz	r0, 800697e <_printf_float+0x86>
 8006978:	232d      	movs	r3, #45	@ 0x2d
 800697a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800697e:	4a91      	ldr	r2, [pc, #580]	@ (8006bc4 <_printf_float+0x2cc>)
 8006980:	4b91      	ldr	r3, [pc, #580]	@ (8006bc8 <_printf_float+0x2d0>)
 8006982:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006986:	bf94      	ite	ls
 8006988:	4690      	movls	r8, r2
 800698a:	4698      	movhi	r8, r3
 800698c:	2303      	movs	r3, #3
 800698e:	6123      	str	r3, [r4, #16]
 8006990:	f02b 0304 	bic.w	r3, fp, #4
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	f04f 0900 	mov.w	r9, #0
 800699a:	9700      	str	r7, [sp, #0]
 800699c:	4633      	mov	r3, r6
 800699e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80069a0:	4621      	mov	r1, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 f9d2 	bl	8006d4c <_printf_common>
 80069a8:	3001      	adds	r0, #1
 80069aa:	f040 808d 	bne.w	8006ac8 <_printf_float+0x1d0>
 80069ae:	f04f 30ff 	mov.w	r0, #4294967295
 80069b2:	b00d      	add	sp, #52	@ 0x34
 80069b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	4640      	mov	r0, r8
 80069be:	4649      	mov	r1, r9
 80069c0:	f7fa f8bc 	bl	8000b3c <__aeabi_dcmpun>
 80069c4:	b140      	cbz	r0, 80069d8 <_printf_float+0xe0>
 80069c6:	464b      	mov	r3, r9
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	bfbc      	itt	lt
 80069cc:	232d      	movlt	r3, #45	@ 0x2d
 80069ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80069d2:	4a7e      	ldr	r2, [pc, #504]	@ (8006bcc <_printf_float+0x2d4>)
 80069d4:	4b7e      	ldr	r3, [pc, #504]	@ (8006bd0 <_printf_float+0x2d8>)
 80069d6:	e7d4      	b.n	8006982 <_printf_float+0x8a>
 80069d8:	6863      	ldr	r3, [r4, #4]
 80069da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80069de:	9206      	str	r2, [sp, #24]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	d13b      	bne.n	8006a5c <_printf_float+0x164>
 80069e4:	2306      	movs	r3, #6
 80069e6:	6063      	str	r3, [r4, #4]
 80069e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80069ec:	2300      	movs	r3, #0
 80069ee:	6022      	str	r2, [r4, #0]
 80069f0:	9303      	str	r3, [sp, #12]
 80069f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80069f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80069f8:	ab09      	add	r3, sp, #36	@ 0x24
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	6861      	ldr	r1, [r4, #4]
 80069fe:	ec49 8b10 	vmov	d0, r8, r9
 8006a02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a06:	4628      	mov	r0, r5
 8006a08:	f7ff fed6 	bl	80067b8 <__cvt>
 8006a0c:	9b06      	ldr	r3, [sp, #24]
 8006a0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a10:	2b47      	cmp	r3, #71	@ 0x47
 8006a12:	4680      	mov	r8, r0
 8006a14:	d129      	bne.n	8006a6a <_printf_float+0x172>
 8006a16:	1cc8      	adds	r0, r1, #3
 8006a18:	db02      	blt.n	8006a20 <_printf_float+0x128>
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	4299      	cmp	r1, r3
 8006a1e:	dd41      	ble.n	8006aa4 <_printf_float+0x1ac>
 8006a20:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a24:	fa5f fa8a 	uxtb.w	sl, sl
 8006a28:	3901      	subs	r1, #1
 8006a2a:	4652      	mov	r2, sl
 8006a2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a30:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a32:	f7ff ff26 	bl	8006882 <__exponent>
 8006a36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a38:	1813      	adds	r3, r2, r0
 8006a3a:	2a01      	cmp	r2, #1
 8006a3c:	4681      	mov	r9, r0
 8006a3e:	6123      	str	r3, [r4, #16]
 8006a40:	dc02      	bgt.n	8006a48 <_printf_float+0x150>
 8006a42:	6822      	ldr	r2, [r4, #0]
 8006a44:	07d2      	lsls	r2, r2, #31
 8006a46:	d501      	bpl.n	8006a4c <_printf_float+0x154>
 8006a48:	3301      	adds	r3, #1
 8006a4a:	6123      	str	r3, [r4, #16]
 8006a4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0a2      	beq.n	800699a <_printf_float+0xa2>
 8006a54:	232d      	movs	r3, #45	@ 0x2d
 8006a56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a5a:	e79e      	b.n	800699a <_printf_float+0xa2>
 8006a5c:	9a06      	ldr	r2, [sp, #24]
 8006a5e:	2a47      	cmp	r2, #71	@ 0x47
 8006a60:	d1c2      	bne.n	80069e8 <_printf_float+0xf0>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1c0      	bne.n	80069e8 <_printf_float+0xf0>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e7bd      	b.n	80069e6 <_printf_float+0xee>
 8006a6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a6e:	d9db      	bls.n	8006a28 <_printf_float+0x130>
 8006a70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a74:	d118      	bne.n	8006aa8 <_printf_float+0x1b0>
 8006a76:	2900      	cmp	r1, #0
 8006a78:	6863      	ldr	r3, [r4, #4]
 8006a7a:	dd0b      	ble.n	8006a94 <_printf_float+0x19c>
 8006a7c:	6121      	str	r1, [r4, #16]
 8006a7e:	b913      	cbnz	r3, 8006a86 <_printf_float+0x18e>
 8006a80:	6822      	ldr	r2, [r4, #0]
 8006a82:	07d0      	lsls	r0, r2, #31
 8006a84:	d502      	bpl.n	8006a8c <_printf_float+0x194>
 8006a86:	3301      	adds	r3, #1
 8006a88:	440b      	add	r3, r1
 8006a8a:	6123      	str	r3, [r4, #16]
 8006a8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a8e:	f04f 0900 	mov.w	r9, #0
 8006a92:	e7db      	b.n	8006a4c <_printf_float+0x154>
 8006a94:	b913      	cbnz	r3, 8006a9c <_printf_float+0x1a4>
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	07d2      	lsls	r2, r2, #31
 8006a9a:	d501      	bpl.n	8006aa0 <_printf_float+0x1a8>
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	e7f4      	b.n	8006a8a <_printf_float+0x192>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e7f2      	b.n	8006a8a <_printf_float+0x192>
 8006aa4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006aa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aaa:	4299      	cmp	r1, r3
 8006aac:	db05      	blt.n	8006aba <_printf_float+0x1c2>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	6121      	str	r1, [r4, #16]
 8006ab2:	07d8      	lsls	r0, r3, #31
 8006ab4:	d5ea      	bpl.n	8006a8c <_printf_float+0x194>
 8006ab6:	1c4b      	adds	r3, r1, #1
 8006ab8:	e7e7      	b.n	8006a8a <_printf_float+0x192>
 8006aba:	2900      	cmp	r1, #0
 8006abc:	bfd4      	ite	le
 8006abe:	f1c1 0202 	rsble	r2, r1, #2
 8006ac2:	2201      	movgt	r2, #1
 8006ac4:	4413      	add	r3, r2
 8006ac6:	e7e0      	b.n	8006a8a <_printf_float+0x192>
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	055a      	lsls	r2, r3, #21
 8006acc:	d407      	bmi.n	8006ade <_printf_float+0x1e6>
 8006ace:	6923      	ldr	r3, [r4, #16]
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	47b8      	blx	r7
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d12b      	bne.n	8006b34 <_printf_float+0x23c>
 8006adc:	e767      	b.n	80069ae <_printf_float+0xb6>
 8006ade:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ae2:	f240 80dd 	bls.w	8006ca0 <_printf_float+0x3a8>
 8006ae6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006aea:	2200      	movs	r2, #0
 8006aec:	2300      	movs	r3, #0
 8006aee:	f7f9 fff3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d033      	beq.n	8006b5e <_printf_float+0x266>
 8006af6:	4a37      	ldr	r2, [pc, #220]	@ (8006bd4 <_printf_float+0x2dc>)
 8006af8:	2301      	movs	r3, #1
 8006afa:	4631      	mov	r1, r6
 8006afc:	4628      	mov	r0, r5
 8006afe:	47b8      	blx	r7
 8006b00:	3001      	adds	r0, #1
 8006b02:	f43f af54 	beq.w	80069ae <_printf_float+0xb6>
 8006b06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b0a:	4543      	cmp	r3, r8
 8006b0c:	db02      	blt.n	8006b14 <_printf_float+0x21c>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	07d8      	lsls	r0, r3, #31
 8006b12:	d50f      	bpl.n	8006b34 <_printf_float+0x23c>
 8006b14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b18:	4631      	mov	r1, r6
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	47b8      	blx	r7
 8006b1e:	3001      	adds	r0, #1
 8006b20:	f43f af45 	beq.w	80069ae <_printf_float+0xb6>
 8006b24:	f04f 0900 	mov.w	r9, #0
 8006b28:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b2c:	f104 0a1a 	add.w	sl, r4, #26
 8006b30:	45c8      	cmp	r8, r9
 8006b32:	dc09      	bgt.n	8006b48 <_printf_float+0x250>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	079b      	lsls	r3, r3, #30
 8006b38:	f100 8103 	bmi.w	8006d42 <_printf_float+0x44a>
 8006b3c:	68e0      	ldr	r0, [r4, #12]
 8006b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b40:	4298      	cmp	r0, r3
 8006b42:	bfb8      	it	lt
 8006b44:	4618      	movlt	r0, r3
 8006b46:	e734      	b.n	80069b2 <_printf_float+0xba>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	4652      	mov	r2, sl
 8006b4c:	4631      	mov	r1, r6
 8006b4e:	4628      	mov	r0, r5
 8006b50:	47b8      	blx	r7
 8006b52:	3001      	adds	r0, #1
 8006b54:	f43f af2b 	beq.w	80069ae <_printf_float+0xb6>
 8006b58:	f109 0901 	add.w	r9, r9, #1
 8006b5c:	e7e8      	b.n	8006b30 <_printf_float+0x238>
 8006b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	dc39      	bgt.n	8006bd8 <_printf_float+0x2e0>
 8006b64:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd4 <_printf_float+0x2dc>)
 8006b66:	2301      	movs	r3, #1
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	47b8      	blx	r7
 8006b6e:	3001      	adds	r0, #1
 8006b70:	f43f af1d 	beq.w	80069ae <_printf_float+0xb6>
 8006b74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b78:	ea59 0303 	orrs.w	r3, r9, r3
 8006b7c:	d102      	bne.n	8006b84 <_printf_float+0x28c>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	07d9      	lsls	r1, r3, #31
 8006b82:	d5d7      	bpl.n	8006b34 <_printf_float+0x23c>
 8006b84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b88:	4631      	mov	r1, r6
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	47b8      	blx	r7
 8006b8e:	3001      	adds	r0, #1
 8006b90:	f43f af0d 	beq.w	80069ae <_printf_float+0xb6>
 8006b94:	f04f 0a00 	mov.w	sl, #0
 8006b98:	f104 0b1a 	add.w	fp, r4, #26
 8006b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b9e:	425b      	negs	r3, r3
 8006ba0:	4553      	cmp	r3, sl
 8006ba2:	dc01      	bgt.n	8006ba8 <_printf_float+0x2b0>
 8006ba4:	464b      	mov	r3, r9
 8006ba6:	e793      	b.n	8006ad0 <_printf_float+0x1d8>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	465a      	mov	r2, fp
 8006bac:	4631      	mov	r1, r6
 8006bae:	4628      	mov	r0, r5
 8006bb0:	47b8      	blx	r7
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	f43f aefb 	beq.w	80069ae <_printf_float+0xb6>
 8006bb8:	f10a 0a01 	add.w	sl, sl, #1
 8006bbc:	e7ee      	b.n	8006b9c <_printf_float+0x2a4>
 8006bbe:	bf00      	nop
 8006bc0:	7fefffff 	.word	0x7fefffff
 8006bc4:	0800af50 	.word	0x0800af50
 8006bc8:	0800af54 	.word	0x0800af54
 8006bcc:	0800af58 	.word	0x0800af58
 8006bd0:	0800af5c 	.word	0x0800af5c
 8006bd4:	0800af60 	.word	0x0800af60
 8006bd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bde:	4553      	cmp	r3, sl
 8006be0:	bfa8      	it	ge
 8006be2:	4653      	movge	r3, sl
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	4699      	mov	r9, r3
 8006be8:	dc36      	bgt.n	8006c58 <_printf_float+0x360>
 8006bea:	f04f 0b00 	mov.w	fp, #0
 8006bee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bf2:	f104 021a 	add.w	r2, r4, #26
 8006bf6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bf8:	9306      	str	r3, [sp, #24]
 8006bfa:	eba3 0309 	sub.w	r3, r3, r9
 8006bfe:	455b      	cmp	r3, fp
 8006c00:	dc31      	bgt.n	8006c66 <_printf_float+0x36e>
 8006c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c04:	459a      	cmp	sl, r3
 8006c06:	dc3a      	bgt.n	8006c7e <_printf_float+0x386>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	07da      	lsls	r2, r3, #31
 8006c0c:	d437      	bmi.n	8006c7e <_printf_float+0x386>
 8006c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c10:	ebaa 0903 	sub.w	r9, sl, r3
 8006c14:	9b06      	ldr	r3, [sp, #24]
 8006c16:	ebaa 0303 	sub.w	r3, sl, r3
 8006c1a:	4599      	cmp	r9, r3
 8006c1c:	bfa8      	it	ge
 8006c1e:	4699      	movge	r9, r3
 8006c20:	f1b9 0f00 	cmp.w	r9, #0
 8006c24:	dc33      	bgt.n	8006c8e <_printf_float+0x396>
 8006c26:	f04f 0800 	mov.w	r8, #0
 8006c2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c2e:	f104 0b1a 	add.w	fp, r4, #26
 8006c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c34:	ebaa 0303 	sub.w	r3, sl, r3
 8006c38:	eba3 0309 	sub.w	r3, r3, r9
 8006c3c:	4543      	cmp	r3, r8
 8006c3e:	f77f af79 	ble.w	8006b34 <_printf_float+0x23c>
 8006c42:	2301      	movs	r3, #1
 8006c44:	465a      	mov	r2, fp
 8006c46:	4631      	mov	r1, r6
 8006c48:	4628      	mov	r0, r5
 8006c4a:	47b8      	blx	r7
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	f43f aeae 	beq.w	80069ae <_printf_float+0xb6>
 8006c52:	f108 0801 	add.w	r8, r8, #1
 8006c56:	e7ec      	b.n	8006c32 <_printf_float+0x33a>
 8006c58:	4642      	mov	r2, r8
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b8      	blx	r7
 8006c60:	3001      	adds	r0, #1
 8006c62:	d1c2      	bne.n	8006bea <_printf_float+0x2f2>
 8006c64:	e6a3      	b.n	80069ae <_printf_float+0xb6>
 8006c66:	2301      	movs	r3, #1
 8006c68:	4631      	mov	r1, r6
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	9206      	str	r2, [sp, #24]
 8006c6e:	47b8      	blx	r7
 8006c70:	3001      	adds	r0, #1
 8006c72:	f43f ae9c 	beq.w	80069ae <_printf_float+0xb6>
 8006c76:	9a06      	ldr	r2, [sp, #24]
 8006c78:	f10b 0b01 	add.w	fp, fp, #1
 8006c7c:	e7bb      	b.n	8006bf6 <_printf_float+0x2fe>
 8006c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	47b8      	blx	r7
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d1c0      	bne.n	8006c0e <_printf_float+0x316>
 8006c8c:	e68f      	b.n	80069ae <_printf_float+0xb6>
 8006c8e:	9a06      	ldr	r2, [sp, #24]
 8006c90:	464b      	mov	r3, r9
 8006c92:	4442      	add	r2, r8
 8006c94:	4631      	mov	r1, r6
 8006c96:	4628      	mov	r0, r5
 8006c98:	47b8      	blx	r7
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	d1c3      	bne.n	8006c26 <_printf_float+0x32e>
 8006c9e:	e686      	b.n	80069ae <_printf_float+0xb6>
 8006ca0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ca4:	f1ba 0f01 	cmp.w	sl, #1
 8006ca8:	dc01      	bgt.n	8006cae <_printf_float+0x3b6>
 8006caa:	07db      	lsls	r3, r3, #31
 8006cac:	d536      	bpl.n	8006d1c <_printf_float+0x424>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4642      	mov	r2, r8
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	47b8      	blx	r7
 8006cb8:	3001      	adds	r0, #1
 8006cba:	f43f ae78 	beq.w	80069ae <_printf_float+0xb6>
 8006cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	47b8      	blx	r7
 8006cc8:	3001      	adds	r0, #1
 8006cca:	f43f ae70 	beq.w	80069ae <_printf_float+0xb6>
 8006cce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cda:	f7f9 fefd 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cde:	b9c0      	cbnz	r0, 8006d12 <_printf_float+0x41a>
 8006ce0:	4653      	mov	r3, sl
 8006ce2:	f108 0201 	add.w	r2, r8, #1
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b8      	blx	r7
 8006cec:	3001      	adds	r0, #1
 8006cee:	d10c      	bne.n	8006d0a <_printf_float+0x412>
 8006cf0:	e65d      	b.n	80069ae <_printf_float+0xb6>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	465a      	mov	r2, fp
 8006cf6:	4631      	mov	r1, r6
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	47b8      	blx	r7
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	f43f ae56 	beq.w	80069ae <_printf_float+0xb6>
 8006d02:	f108 0801 	add.w	r8, r8, #1
 8006d06:	45d0      	cmp	r8, sl
 8006d08:	dbf3      	blt.n	8006cf2 <_printf_float+0x3fa>
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d10:	e6df      	b.n	8006ad2 <_printf_float+0x1da>
 8006d12:	f04f 0800 	mov.w	r8, #0
 8006d16:	f104 0b1a 	add.w	fp, r4, #26
 8006d1a:	e7f4      	b.n	8006d06 <_printf_float+0x40e>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	4642      	mov	r2, r8
 8006d20:	e7e1      	b.n	8006ce6 <_printf_float+0x3ee>
 8006d22:	2301      	movs	r3, #1
 8006d24:	464a      	mov	r2, r9
 8006d26:	4631      	mov	r1, r6
 8006d28:	4628      	mov	r0, r5
 8006d2a:	47b8      	blx	r7
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	f43f ae3e 	beq.w	80069ae <_printf_float+0xb6>
 8006d32:	f108 0801 	add.w	r8, r8, #1
 8006d36:	68e3      	ldr	r3, [r4, #12]
 8006d38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d3a:	1a5b      	subs	r3, r3, r1
 8006d3c:	4543      	cmp	r3, r8
 8006d3e:	dcf0      	bgt.n	8006d22 <_printf_float+0x42a>
 8006d40:	e6fc      	b.n	8006b3c <_printf_float+0x244>
 8006d42:	f04f 0800 	mov.w	r8, #0
 8006d46:	f104 0919 	add.w	r9, r4, #25
 8006d4a:	e7f4      	b.n	8006d36 <_printf_float+0x43e>

08006d4c <_printf_common>:
 8006d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d50:	4616      	mov	r6, r2
 8006d52:	4698      	mov	r8, r3
 8006d54:	688a      	ldr	r2, [r1, #8]
 8006d56:	690b      	ldr	r3, [r1, #16]
 8006d58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	bfb8      	it	lt
 8006d60:	4613      	movlt	r3, r2
 8006d62:	6033      	str	r3, [r6, #0]
 8006d64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d68:	4607      	mov	r7, r0
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	b10a      	cbz	r2, 8006d72 <_printf_common+0x26>
 8006d6e:	3301      	adds	r3, #1
 8006d70:	6033      	str	r3, [r6, #0]
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	0699      	lsls	r1, r3, #26
 8006d76:	bf42      	ittt	mi
 8006d78:	6833      	ldrmi	r3, [r6, #0]
 8006d7a:	3302      	addmi	r3, #2
 8006d7c:	6033      	strmi	r3, [r6, #0]
 8006d7e:	6825      	ldr	r5, [r4, #0]
 8006d80:	f015 0506 	ands.w	r5, r5, #6
 8006d84:	d106      	bne.n	8006d94 <_printf_common+0x48>
 8006d86:	f104 0a19 	add.w	sl, r4, #25
 8006d8a:	68e3      	ldr	r3, [r4, #12]
 8006d8c:	6832      	ldr	r2, [r6, #0]
 8006d8e:	1a9b      	subs	r3, r3, r2
 8006d90:	42ab      	cmp	r3, r5
 8006d92:	dc26      	bgt.n	8006de2 <_printf_common+0x96>
 8006d94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d98:	6822      	ldr	r2, [r4, #0]
 8006d9a:	3b00      	subs	r3, #0
 8006d9c:	bf18      	it	ne
 8006d9e:	2301      	movne	r3, #1
 8006da0:	0692      	lsls	r2, r2, #26
 8006da2:	d42b      	bmi.n	8006dfc <_printf_common+0xb0>
 8006da4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006da8:	4641      	mov	r1, r8
 8006daa:	4638      	mov	r0, r7
 8006dac:	47c8      	blx	r9
 8006dae:	3001      	adds	r0, #1
 8006db0:	d01e      	beq.n	8006df0 <_printf_common+0xa4>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	6922      	ldr	r2, [r4, #16]
 8006db6:	f003 0306 	and.w	r3, r3, #6
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	bf02      	ittt	eq
 8006dbe:	68e5      	ldreq	r5, [r4, #12]
 8006dc0:	6833      	ldreq	r3, [r6, #0]
 8006dc2:	1aed      	subeq	r5, r5, r3
 8006dc4:	68a3      	ldr	r3, [r4, #8]
 8006dc6:	bf0c      	ite	eq
 8006dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dcc:	2500      	movne	r5, #0
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	bfc4      	itt	gt
 8006dd2:	1a9b      	subgt	r3, r3, r2
 8006dd4:	18ed      	addgt	r5, r5, r3
 8006dd6:	2600      	movs	r6, #0
 8006dd8:	341a      	adds	r4, #26
 8006dda:	42b5      	cmp	r5, r6
 8006ddc:	d11a      	bne.n	8006e14 <_printf_common+0xc8>
 8006dde:	2000      	movs	r0, #0
 8006de0:	e008      	b.n	8006df4 <_printf_common+0xa8>
 8006de2:	2301      	movs	r3, #1
 8006de4:	4652      	mov	r2, sl
 8006de6:	4641      	mov	r1, r8
 8006de8:	4638      	mov	r0, r7
 8006dea:	47c8      	blx	r9
 8006dec:	3001      	adds	r0, #1
 8006dee:	d103      	bne.n	8006df8 <_printf_common+0xac>
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df8:	3501      	adds	r5, #1
 8006dfa:	e7c6      	b.n	8006d8a <_printf_common+0x3e>
 8006dfc:	18e1      	adds	r1, r4, r3
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	2030      	movs	r0, #48	@ 0x30
 8006e02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e06:	4422      	add	r2, r4
 8006e08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e10:	3302      	adds	r3, #2
 8006e12:	e7c7      	b.n	8006da4 <_printf_common+0x58>
 8006e14:	2301      	movs	r3, #1
 8006e16:	4622      	mov	r2, r4
 8006e18:	4641      	mov	r1, r8
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	47c8      	blx	r9
 8006e1e:	3001      	adds	r0, #1
 8006e20:	d0e6      	beq.n	8006df0 <_printf_common+0xa4>
 8006e22:	3601      	adds	r6, #1
 8006e24:	e7d9      	b.n	8006dda <_printf_common+0x8e>
	...

08006e28 <_printf_i>:
 8006e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e2c:	7e0f      	ldrb	r7, [r1, #24]
 8006e2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e30:	2f78      	cmp	r7, #120	@ 0x78
 8006e32:	4691      	mov	r9, r2
 8006e34:	4680      	mov	r8, r0
 8006e36:	460c      	mov	r4, r1
 8006e38:	469a      	mov	sl, r3
 8006e3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e3e:	d807      	bhi.n	8006e50 <_printf_i+0x28>
 8006e40:	2f62      	cmp	r7, #98	@ 0x62
 8006e42:	d80a      	bhi.n	8006e5a <_printf_i+0x32>
 8006e44:	2f00      	cmp	r7, #0
 8006e46:	f000 80d2 	beq.w	8006fee <_printf_i+0x1c6>
 8006e4a:	2f58      	cmp	r7, #88	@ 0x58
 8006e4c:	f000 80b9 	beq.w	8006fc2 <_printf_i+0x19a>
 8006e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e58:	e03a      	b.n	8006ed0 <_printf_i+0xa8>
 8006e5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e5e:	2b15      	cmp	r3, #21
 8006e60:	d8f6      	bhi.n	8006e50 <_printf_i+0x28>
 8006e62:	a101      	add	r1, pc, #4	@ (adr r1, 8006e68 <_printf_i+0x40>)
 8006e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e68:	08006ec1 	.word	0x08006ec1
 8006e6c:	08006ed5 	.word	0x08006ed5
 8006e70:	08006e51 	.word	0x08006e51
 8006e74:	08006e51 	.word	0x08006e51
 8006e78:	08006e51 	.word	0x08006e51
 8006e7c:	08006e51 	.word	0x08006e51
 8006e80:	08006ed5 	.word	0x08006ed5
 8006e84:	08006e51 	.word	0x08006e51
 8006e88:	08006e51 	.word	0x08006e51
 8006e8c:	08006e51 	.word	0x08006e51
 8006e90:	08006e51 	.word	0x08006e51
 8006e94:	08006fd5 	.word	0x08006fd5
 8006e98:	08006eff 	.word	0x08006eff
 8006e9c:	08006f8f 	.word	0x08006f8f
 8006ea0:	08006e51 	.word	0x08006e51
 8006ea4:	08006e51 	.word	0x08006e51
 8006ea8:	08006ff7 	.word	0x08006ff7
 8006eac:	08006e51 	.word	0x08006e51
 8006eb0:	08006eff 	.word	0x08006eff
 8006eb4:	08006e51 	.word	0x08006e51
 8006eb8:	08006e51 	.word	0x08006e51
 8006ebc:	08006f97 	.word	0x08006f97
 8006ec0:	6833      	ldr	r3, [r6, #0]
 8006ec2:	1d1a      	adds	r2, r3, #4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6032      	str	r2, [r6, #0]
 8006ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ecc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e09d      	b.n	8007010 <_printf_i+0x1e8>
 8006ed4:	6833      	ldr	r3, [r6, #0]
 8006ed6:	6820      	ldr	r0, [r4, #0]
 8006ed8:	1d19      	adds	r1, r3, #4
 8006eda:	6031      	str	r1, [r6, #0]
 8006edc:	0606      	lsls	r6, r0, #24
 8006ede:	d501      	bpl.n	8006ee4 <_printf_i+0xbc>
 8006ee0:	681d      	ldr	r5, [r3, #0]
 8006ee2:	e003      	b.n	8006eec <_printf_i+0xc4>
 8006ee4:	0645      	lsls	r5, r0, #25
 8006ee6:	d5fb      	bpl.n	8006ee0 <_printf_i+0xb8>
 8006ee8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006eec:	2d00      	cmp	r5, #0
 8006eee:	da03      	bge.n	8006ef8 <_printf_i+0xd0>
 8006ef0:	232d      	movs	r3, #45	@ 0x2d
 8006ef2:	426d      	negs	r5, r5
 8006ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ef8:	4859      	ldr	r0, [pc, #356]	@ (8007060 <_printf_i+0x238>)
 8006efa:	230a      	movs	r3, #10
 8006efc:	e011      	b.n	8006f22 <_printf_i+0xfa>
 8006efe:	6821      	ldr	r1, [r4, #0]
 8006f00:	6833      	ldr	r3, [r6, #0]
 8006f02:	0608      	lsls	r0, r1, #24
 8006f04:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f08:	d402      	bmi.n	8006f10 <_printf_i+0xe8>
 8006f0a:	0649      	lsls	r1, r1, #25
 8006f0c:	bf48      	it	mi
 8006f0e:	b2ad      	uxthmi	r5, r5
 8006f10:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f12:	4853      	ldr	r0, [pc, #332]	@ (8007060 <_printf_i+0x238>)
 8006f14:	6033      	str	r3, [r6, #0]
 8006f16:	bf14      	ite	ne
 8006f18:	230a      	movne	r3, #10
 8006f1a:	2308      	moveq	r3, #8
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f22:	6866      	ldr	r6, [r4, #4]
 8006f24:	60a6      	str	r6, [r4, #8]
 8006f26:	2e00      	cmp	r6, #0
 8006f28:	bfa2      	ittt	ge
 8006f2a:	6821      	ldrge	r1, [r4, #0]
 8006f2c:	f021 0104 	bicge.w	r1, r1, #4
 8006f30:	6021      	strge	r1, [r4, #0]
 8006f32:	b90d      	cbnz	r5, 8006f38 <_printf_i+0x110>
 8006f34:	2e00      	cmp	r6, #0
 8006f36:	d04b      	beq.n	8006fd0 <_printf_i+0x1a8>
 8006f38:	4616      	mov	r6, r2
 8006f3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f3e:	fb03 5711 	mls	r7, r3, r1, r5
 8006f42:	5dc7      	ldrb	r7, [r0, r7]
 8006f44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f48:	462f      	mov	r7, r5
 8006f4a:	42bb      	cmp	r3, r7
 8006f4c:	460d      	mov	r5, r1
 8006f4e:	d9f4      	bls.n	8006f3a <_printf_i+0x112>
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d10b      	bne.n	8006f6c <_printf_i+0x144>
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	07df      	lsls	r7, r3, #31
 8006f58:	d508      	bpl.n	8006f6c <_printf_i+0x144>
 8006f5a:	6923      	ldr	r3, [r4, #16]
 8006f5c:	6861      	ldr	r1, [r4, #4]
 8006f5e:	4299      	cmp	r1, r3
 8006f60:	bfde      	ittt	le
 8006f62:	2330      	movle	r3, #48	@ 0x30
 8006f64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f6c:	1b92      	subs	r2, r2, r6
 8006f6e:	6122      	str	r2, [r4, #16]
 8006f70:	f8cd a000 	str.w	sl, [sp]
 8006f74:	464b      	mov	r3, r9
 8006f76:	aa03      	add	r2, sp, #12
 8006f78:	4621      	mov	r1, r4
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	f7ff fee6 	bl	8006d4c <_printf_common>
 8006f80:	3001      	adds	r0, #1
 8006f82:	d14a      	bne.n	800701a <_printf_i+0x1f2>
 8006f84:	f04f 30ff 	mov.w	r0, #4294967295
 8006f88:	b004      	add	sp, #16
 8006f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	f043 0320 	orr.w	r3, r3, #32
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	4833      	ldr	r0, [pc, #204]	@ (8007064 <_printf_i+0x23c>)
 8006f98:	2778      	movs	r7, #120	@ 0x78
 8006f9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	6831      	ldr	r1, [r6, #0]
 8006fa2:	061f      	lsls	r7, r3, #24
 8006fa4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fa8:	d402      	bmi.n	8006fb0 <_printf_i+0x188>
 8006faa:	065f      	lsls	r7, r3, #25
 8006fac:	bf48      	it	mi
 8006fae:	b2ad      	uxthmi	r5, r5
 8006fb0:	6031      	str	r1, [r6, #0]
 8006fb2:	07d9      	lsls	r1, r3, #31
 8006fb4:	bf44      	itt	mi
 8006fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8006fba:	6023      	strmi	r3, [r4, #0]
 8006fbc:	b11d      	cbz	r5, 8006fc6 <_printf_i+0x19e>
 8006fbe:	2310      	movs	r3, #16
 8006fc0:	e7ac      	b.n	8006f1c <_printf_i+0xf4>
 8006fc2:	4827      	ldr	r0, [pc, #156]	@ (8007060 <_printf_i+0x238>)
 8006fc4:	e7e9      	b.n	8006f9a <_printf_i+0x172>
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	f023 0320 	bic.w	r3, r3, #32
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	e7f6      	b.n	8006fbe <_printf_i+0x196>
 8006fd0:	4616      	mov	r6, r2
 8006fd2:	e7bd      	b.n	8006f50 <_printf_i+0x128>
 8006fd4:	6833      	ldr	r3, [r6, #0]
 8006fd6:	6825      	ldr	r5, [r4, #0]
 8006fd8:	6961      	ldr	r1, [r4, #20]
 8006fda:	1d18      	adds	r0, r3, #4
 8006fdc:	6030      	str	r0, [r6, #0]
 8006fde:	062e      	lsls	r6, r5, #24
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	d501      	bpl.n	8006fe8 <_printf_i+0x1c0>
 8006fe4:	6019      	str	r1, [r3, #0]
 8006fe6:	e002      	b.n	8006fee <_printf_i+0x1c6>
 8006fe8:	0668      	lsls	r0, r5, #25
 8006fea:	d5fb      	bpl.n	8006fe4 <_printf_i+0x1bc>
 8006fec:	8019      	strh	r1, [r3, #0]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	4616      	mov	r6, r2
 8006ff4:	e7bc      	b.n	8006f70 <_printf_i+0x148>
 8006ff6:	6833      	ldr	r3, [r6, #0]
 8006ff8:	1d1a      	adds	r2, r3, #4
 8006ffa:	6032      	str	r2, [r6, #0]
 8006ffc:	681e      	ldr	r6, [r3, #0]
 8006ffe:	6862      	ldr	r2, [r4, #4]
 8007000:	2100      	movs	r1, #0
 8007002:	4630      	mov	r0, r6
 8007004:	f7f9 f8ec 	bl	80001e0 <memchr>
 8007008:	b108      	cbz	r0, 800700e <_printf_i+0x1e6>
 800700a:	1b80      	subs	r0, r0, r6
 800700c:	6060      	str	r0, [r4, #4]
 800700e:	6863      	ldr	r3, [r4, #4]
 8007010:	6123      	str	r3, [r4, #16]
 8007012:	2300      	movs	r3, #0
 8007014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007018:	e7aa      	b.n	8006f70 <_printf_i+0x148>
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	4632      	mov	r2, r6
 800701e:	4649      	mov	r1, r9
 8007020:	4640      	mov	r0, r8
 8007022:	47d0      	blx	sl
 8007024:	3001      	adds	r0, #1
 8007026:	d0ad      	beq.n	8006f84 <_printf_i+0x15c>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	079b      	lsls	r3, r3, #30
 800702c:	d413      	bmi.n	8007056 <_printf_i+0x22e>
 800702e:	68e0      	ldr	r0, [r4, #12]
 8007030:	9b03      	ldr	r3, [sp, #12]
 8007032:	4298      	cmp	r0, r3
 8007034:	bfb8      	it	lt
 8007036:	4618      	movlt	r0, r3
 8007038:	e7a6      	b.n	8006f88 <_printf_i+0x160>
 800703a:	2301      	movs	r3, #1
 800703c:	4632      	mov	r2, r6
 800703e:	4649      	mov	r1, r9
 8007040:	4640      	mov	r0, r8
 8007042:	47d0      	blx	sl
 8007044:	3001      	adds	r0, #1
 8007046:	d09d      	beq.n	8006f84 <_printf_i+0x15c>
 8007048:	3501      	adds	r5, #1
 800704a:	68e3      	ldr	r3, [r4, #12]
 800704c:	9903      	ldr	r1, [sp, #12]
 800704e:	1a5b      	subs	r3, r3, r1
 8007050:	42ab      	cmp	r3, r5
 8007052:	dcf2      	bgt.n	800703a <_printf_i+0x212>
 8007054:	e7eb      	b.n	800702e <_printf_i+0x206>
 8007056:	2500      	movs	r5, #0
 8007058:	f104 0619 	add.w	r6, r4, #25
 800705c:	e7f5      	b.n	800704a <_printf_i+0x222>
 800705e:	bf00      	nop
 8007060:	0800af62 	.word	0x0800af62
 8007064:	0800af73 	.word	0x0800af73

08007068 <_scanf_float>:
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	b087      	sub	sp, #28
 800706e:	4617      	mov	r7, r2
 8007070:	9303      	str	r3, [sp, #12]
 8007072:	688b      	ldr	r3, [r1, #8]
 8007074:	1e5a      	subs	r2, r3, #1
 8007076:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800707a:	bf81      	itttt	hi
 800707c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007080:	eb03 0b05 	addhi.w	fp, r3, r5
 8007084:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007088:	608b      	strhi	r3, [r1, #8]
 800708a:	680b      	ldr	r3, [r1, #0]
 800708c:	460a      	mov	r2, r1
 800708e:	f04f 0500 	mov.w	r5, #0
 8007092:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007096:	f842 3b1c 	str.w	r3, [r2], #28
 800709a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800709e:	4680      	mov	r8, r0
 80070a0:	460c      	mov	r4, r1
 80070a2:	bf98      	it	ls
 80070a4:	f04f 0b00 	movls.w	fp, #0
 80070a8:	9201      	str	r2, [sp, #4]
 80070aa:	4616      	mov	r6, r2
 80070ac:	46aa      	mov	sl, r5
 80070ae:	46a9      	mov	r9, r5
 80070b0:	9502      	str	r5, [sp, #8]
 80070b2:	68a2      	ldr	r2, [r4, #8]
 80070b4:	b152      	cbz	r2, 80070cc <_scanf_float+0x64>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b4e      	cmp	r3, #78	@ 0x4e
 80070bc:	d864      	bhi.n	8007188 <_scanf_float+0x120>
 80070be:	2b40      	cmp	r3, #64	@ 0x40
 80070c0:	d83c      	bhi.n	800713c <_scanf_float+0xd4>
 80070c2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80070c6:	b2c8      	uxtb	r0, r1
 80070c8:	280e      	cmp	r0, #14
 80070ca:	d93a      	bls.n	8007142 <_scanf_float+0xda>
 80070cc:	f1b9 0f00 	cmp.w	r9, #0
 80070d0:	d003      	beq.n	80070da <_scanf_float+0x72>
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070de:	f1ba 0f01 	cmp.w	sl, #1
 80070e2:	f200 8117 	bhi.w	8007314 <_scanf_float+0x2ac>
 80070e6:	9b01      	ldr	r3, [sp, #4]
 80070e8:	429e      	cmp	r6, r3
 80070ea:	f200 8108 	bhi.w	80072fe <_scanf_float+0x296>
 80070ee:	2001      	movs	r0, #1
 80070f0:	b007      	add	sp, #28
 80070f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80070fa:	2a0d      	cmp	r2, #13
 80070fc:	d8e6      	bhi.n	80070cc <_scanf_float+0x64>
 80070fe:	a101      	add	r1, pc, #4	@ (adr r1, 8007104 <_scanf_float+0x9c>)
 8007100:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007104:	0800724b 	.word	0x0800724b
 8007108:	080070cd 	.word	0x080070cd
 800710c:	080070cd 	.word	0x080070cd
 8007110:	080070cd 	.word	0x080070cd
 8007114:	080072ab 	.word	0x080072ab
 8007118:	08007283 	.word	0x08007283
 800711c:	080070cd 	.word	0x080070cd
 8007120:	080070cd 	.word	0x080070cd
 8007124:	08007259 	.word	0x08007259
 8007128:	080070cd 	.word	0x080070cd
 800712c:	080070cd 	.word	0x080070cd
 8007130:	080070cd 	.word	0x080070cd
 8007134:	080070cd 	.word	0x080070cd
 8007138:	08007211 	.word	0x08007211
 800713c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007140:	e7db      	b.n	80070fa <_scanf_float+0x92>
 8007142:	290e      	cmp	r1, #14
 8007144:	d8c2      	bhi.n	80070cc <_scanf_float+0x64>
 8007146:	a001      	add	r0, pc, #4	@ (adr r0, 800714c <_scanf_float+0xe4>)
 8007148:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800714c:	08007201 	.word	0x08007201
 8007150:	080070cd 	.word	0x080070cd
 8007154:	08007201 	.word	0x08007201
 8007158:	08007297 	.word	0x08007297
 800715c:	080070cd 	.word	0x080070cd
 8007160:	080071a9 	.word	0x080071a9
 8007164:	080071e7 	.word	0x080071e7
 8007168:	080071e7 	.word	0x080071e7
 800716c:	080071e7 	.word	0x080071e7
 8007170:	080071e7 	.word	0x080071e7
 8007174:	080071e7 	.word	0x080071e7
 8007178:	080071e7 	.word	0x080071e7
 800717c:	080071e7 	.word	0x080071e7
 8007180:	080071e7 	.word	0x080071e7
 8007184:	080071e7 	.word	0x080071e7
 8007188:	2b6e      	cmp	r3, #110	@ 0x6e
 800718a:	d809      	bhi.n	80071a0 <_scanf_float+0x138>
 800718c:	2b60      	cmp	r3, #96	@ 0x60
 800718e:	d8b2      	bhi.n	80070f6 <_scanf_float+0x8e>
 8007190:	2b54      	cmp	r3, #84	@ 0x54
 8007192:	d07b      	beq.n	800728c <_scanf_float+0x224>
 8007194:	2b59      	cmp	r3, #89	@ 0x59
 8007196:	d199      	bne.n	80070cc <_scanf_float+0x64>
 8007198:	2d07      	cmp	r5, #7
 800719a:	d197      	bne.n	80070cc <_scanf_float+0x64>
 800719c:	2508      	movs	r5, #8
 800719e:	e02c      	b.n	80071fa <_scanf_float+0x192>
 80071a0:	2b74      	cmp	r3, #116	@ 0x74
 80071a2:	d073      	beq.n	800728c <_scanf_float+0x224>
 80071a4:	2b79      	cmp	r3, #121	@ 0x79
 80071a6:	e7f6      	b.n	8007196 <_scanf_float+0x12e>
 80071a8:	6821      	ldr	r1, [r4, #0]
 80071aa:	05c8      	lsls	r0, r1, #23
 80071ac:	d51b      	bpl.n	80071e6 <_scanf_float+0x17e>
 80071ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80071b2:	6021      	str	r1, [r4, #0]
 80071b4:	f109 0901 	add.w	r9, r9, #1
 80071b8:	f1bb 0f00 	cmp.w	fp, #0
 80071bc:	d003      	beq.n	80071c6 <_scanf_float+0x15e>
 80071be:	3201      	adds	r2, #1
 80071c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071c4:	60a2      	str	r2, [r4, #8]
 80071c6:	68a3      	ldr	r3, [r4, #8]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	60a3      	str	r3, [r4, #8]
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	3301      	adds	r3, #1
 80071d0:	6123      	str	r3, [r4, #16]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	f340 8087 	ble.w	80072ec <_scanf_float+0x284>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	3301      	adds	r3, #1
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	e765      	b.n	80070b2 <_scanf_float+0x4a>
 80071e6:	eb1a 0105 	adds.w	r1, sl, r5
 80071ea:	f47f af6f 	bne.w	80070cc <_scanf_float+0x64>
 80071ee:	6822      	ldr	r2, [r4, #0]
 80071f0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80071f4:	6022      	str	r2, [r4, #0]
 80071f6:	460d      	mov	r5, r1
 80071f8:	468a      	mov	sl, r1
 80071fa:	f806 3b01 	strb.w	r3, [r6], #1
 80071fe:	e7e2      	b.n	80071c6 <_scanf_float+0x15e>
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	0610      	lsls	r0, r2, #24
 8007204:	f57f af62 	bpl.w	80070cc <_scanf_float+0x64>
 8007208:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800720c:	6022      	str	r2, [r4, #0]
 800720e:	e7f4      	b.n	80071fa <_scanf_float+0x192>
 8007210:	f1ba 0f00 	cmp.w	sl, #0
 8007214:	d10e      	bne.n	8007234 <_scanf_float+0x1cc>
 8007216:	f1b9 0f00 	cmp.w	r9, #0
 800721a:	d10e      	bne.n	800723a <_scanf_float+0x1d2>
 800721c:	6822      	ldr	r2, [r4, #0]
 800721e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007222:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007226:	d108      	bne.n	800723a <_scanf_float+0x1d2>
 8007228:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800722c:	6022      	str	r2, [r4, #0]
 800722e:	f04f 0a01 	mov.w	sl, #1
 8007232:	e7e2      	b.n	80071fa <_scanf_float+0x192>
 8007234:	f1ba 0f02 	cmp.w	sl, #2
 8007238:	d055      	beq.n	80072e6 <_scanf_float+0x27e>
 800723a:	2d01      	cmp	r5, #1
 800723c:	d002      	beq.n	8007244 <_scanf_float+0x1dc>
 800723e:	2d04      	cmp	r5, #4
 8007240:	f47f af44 	bne.w	80070cc <_scanf_float+0x64>
 8007244:	3501      	adds	r5, #1
 8007246:	b2ed      	uxtb	r5, r5
 8007248:	e7d7      	b.n	80071fa <_scanf_float+0x192>
 800724a:	f1ba 0f01 	cmp.w	sl, #1
 800724e:	f47f af3d 	bne.w	80070cc <_scanf_float+0x64>
 8007252:	f04f 0a02 	mov.w	sl, #2
 8007256:	e7d0      	b.n	80071fa <_scanf_float+0x192>
 8007258:	b97d      	cbnz	r5, 800727a <_scanf_float+0x212>
 800725a:	f1b9 0f00 	cmp.w	r9, #0
 800725e:	f47f af38 	bne.w	80070d2 <_scanf_float+0x6a>
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007268:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800726c:	f040 8108 	bne.w	8007480 <_scanf_float+0x418>
 8007270:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007274:	6022      	str	r2, [r4, #0]
 8007276:	2501      	movs	r5, #1
 8007278:	e7bf      	b.n	80071fa <_scanf_float+0x192>
 800727a:	2d03      	cmp	r5, #3
 800727c:	d0e2      	beq.n	8007244 <_scanf_float+0x1dc>
 800727e:	2d05      	cmp	r5, #5
 8007280:	e7de      	b.n	8007240 <_scanf_float+0x1d8>
 8007282:	2d02      	cmp	r5, #2
 8007284:	f47f af22 	bne.w	80070cc <_scanf_float+0x64>
 8007288:	2503      	movs	r5, #3
 800728a:	e7b6      	b.n	80071fa <_scanf_float+0x192>
 800728c:	2d06      	cmp	r5, #6
 800728e:	f47f af1d 	bne.w	80070cc <_scanf_float+0x64>
 8007292:	2507      	movs	r5, #7
 8007294:	e7b1      	b.n	80071fa <_scanf_float+0x192>
 8007296:	6822      	ldr	r2, [r4, #0]
 8007298:	0591      	lsls	r1, r2, #22
 800729a:	f57f af17 	bpl.w	80070cc <_scanf_float+0x64>
 800729e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80072a2:	6022      	str	r2, [r4, #0]
 80072a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80072a8:	e7a7      	b.n	80071fa <_scanf_float+0x192>
 80072aa:	6822      	ldr	r2, [r4, #0]
 80072ac:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80072b0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80072b4:	d006      	beq.n	80072c4 <_scanf_float+0x25c>
 80072b6:	0550      	lsls	r0, r2, #21
 80072b8:	f57f af08 	bpl.w	80070cc <_scanf_float+0x64>
 80072bc:	f1b9 0f00 	cmp.w	r9, #0
 80072c0:	f000 80de 	beq.w	8007480 <_scanf_float+0x418>
 80072c4:	0591      	lsls	r1, r2, #22
 80072c6:	bf58      	it	pl
 80072c8:	9902      	ldrpl	r1, [sp, #8]
 80072ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072ce:	bf58      	it	pl
 80072d0:	eba9 0101 	subpl.w	r1, r9, r1
 80072d4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80072d8:	bf58      	it	pl
 80072da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80072de:	6022      	str	r2, [r4, #0]
 80072e0:	f04f 0900 	mov.w	r9, #0
 80072e4:	e789      	b.n	80071fa <_scanf_float+0x192>
 80072e6:	f04f 0a03 	mov.w	sl, #3
 80072ea:	e786      	b.n	80071fa <_scanf_float+0x192>
 80072ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80072f0:	4639      	mov	r1, r7
 80072f2:	4640      	mov	r0, r8
 80072f4:	4798      	blx	r3
 80072f6:	2800      	cmp	r0, #0
 80072f8:	f43f aedb 	beq.w	80070b2 <_scanf_float+0x4a>
 80072fc:	e6e6      	b.n	80070cc <_scanf_float+0x64>
 80072fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007302:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007306:	463a      	mov	r2, r7
 8007308:	4640      	mov	r0, r8
 800730a:	4798      	blx	r3
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	3b01      	subs	r3, #1
 8007310:	6123      	str	r3, [r4, #16]
 8007312:	e6e8      	b.n	80070e6 <_scanf_float+0x7e>
 8007314:	1e6b      	subs	r3, r5, #1
 8007316:	2b06      	cmp	r3, #6
 8007318:	d824      	bhi.n	8007364 <_scanf_float+0x2fc>
 800731a:	2d02      	cmp	r5, #2
 800731c:	d836      	bhi.n	800738c <_scanf_float+0x324>
 800731e:	9b01      	ldr	r3, [sp, #4]
 8007320:	429e      	cmp	r6, r3
 8007322:	f67f aee4 	bls.w	80070ee <_scanf_float+0x86>
 8007326:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800732a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800732e:	463a      	mov	r2, r7
 8007330:	4640      	mov	r0, r8
 8007332:	4798      	blx	r3
 8007334:	6923      	ldr	r3, [r4, #16]
 8007336:	3b01      	subs	r3, #1
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	e7f0      	b.n	800731e <_scanf_float+0x2b6>
 800733c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007340:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007344:	463a      	mov	r2, r7
 8007346:	4640      	mov	r0, r8
 8007348:	4798      	blx	r3
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	3b01      	subs	r3, #1
 800734e:	6123      	str	r3, [r4, #16]
 8007350:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007354:	fa5f fa8a 	uxtb.w	sl, sl
 8007358:	f1ba 0f02 	cmp.w	sl, #2
 800735c:	d1ee      	bne.n	800733c <_scanf_float+0x2d4>
 800735e:	3d03      	subs	r5, #3
 8007360:	b2ed      	uxtb	r5, r5
 8007362:	1b76      	subs	r6, r6, r5
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	05da      	lsls	r2, r3, #23
 8007368:	d530      	bpl.n	80073cc <_scanf_float+0x364>
 800736a:	055b      	lsls	r3, r3, #21
 800736c:	d511      	bpl.n	8007392 <_scanf_float+0x32a>
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	429e      	cmp	r6, r3
 8007372:	f67f aebc 	bls.w	80070ee <_scanf_float+0x86>
 8007376:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800737a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800737e:	463a      	mov	r2, r7
 8007380:	4640      	mov	r0, r8
 8007382:	4798      	blx	r3
 8007384:	6923      	ldr	r3, [r4, #16]
 8007386:	3b01      	subs	r3, #1
 8007388:	6123      	str	r3, [r4, #16]
 800738a:	e7f0      	b.n	800736e <_scanf_float+0x306>
 800738c:	46aa      	mov	sl, r5
 800738e:	46b3      	mov	fp, r6
 8007390:	e7de      	b.n	8007350 <_scanf_float+0x2e8>
 8007392:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007396:	6923      	ldr	r3, [r4, #16]
 8007398:	2965      	cmp	r1, #101	@ 0x65
 800739a:	f103 33ff 	add.w	r3, r3, #4294967295
 800739e:	f106 35ff 	add.w	r5, r6, #4294967295
 80073a2:	6123      	str	r3, [r4, #16]
 80073a4:	d00c      	beq.n	80073c0 <_scanf_float+0x358>
 80073a6:	2945      	cmp	r1, #69	@ 0x45
 80073a8:	d00a      	beq.n	80073c0 <_scanf_float+0x358>
 80073aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073ae:	463a      	mov	r2, r7
 80073b0:	4640      	mov	r0, r8
 80073b2:	4798      	blx	r3
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	1eb5      	subs	r5, r6, #2
 80073be:	6123      	str	r3, [r4, #16]
 80073c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073c4:	463a      	mov	r2, r7
 80073c6:	4640      	mov	r0, r8
 80073c8:	4798      	blx	r3
 80073ca:	462e      	mov	r6, r5
 80073cc:	6822      	ldr	r2, [r4, #0]
 80073ce:	f012 0210 	ands.w	r2, r2, #16
 80073d2:	d001      	beq.n	80073d8 <_scanf_float+0x370>
 80073d4:	2000      	movs	r0, #0
 80073d6:	e68b      	b.n	80070f0 <_scanf_float+0x88>
 80073d8:	7032      	strb	r2, [r6, #0]
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80073e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073e4:	d11c      	bne.n	8007420 <_scanf_float+0x3b8>
 80073e6:	9b02      	ldr	r3, [sp, #8]
 80073e8:	454b      	cmp	r3, r9
 80073ea:	eba3 0209 	sub.w	r2, r3, r9
 80073ee:	d123      	bne.n	8007438 <_scanf_float+0x3d0>
 80073f0:	9901      	ldr	r1, [sp, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	4640      	mov	r0, r8
 80073f6:	f002 fc07 	bl	8009c08 <_strtod_r>
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	6821      	ldr	r1, [r4, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f011 0f02 	tst.w	r1, #2
 8007404:	ec57 6b10 	vmov	r6, r7, d0
 8007408:	f103 0204 	add.w	r2, r3, #4
 800740c:	d01f      	beq.n	800744e <_scanf_float+0x3e6>
 800740e:	9903      	ldr	r1, [sp, #12]
 8007410:	600a      	str	r2, [r1, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	e9c3 6700 	strd	r6, r7, [r3]
 8007418:	68e3      	ldr	r3, [r4, #12]
 800741a:	3301      	adds	r3, #1
 800741c:	60e3      	str	r3, [r4, #12]
 800741e:	e7d9      	b.n	80073d4 <_scanf_float+0x36c>
 8007420:	9b04      	ldr	r3, [sp, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0e4      	beq.n	80073f0 <_scanf_float+0x388>
 8007426:	9905      	ldr	r1, [sp, #20]
 8007428:	230a      	movs	r3, #10
 800742a:	3101      	adds	r1, #1
 800742c:	4640      	mov	r0, r8
 800742e:	f002 fc6b 	bl	8009d08 <_strtol_r>
 8007432:	9b04      	ldr	r3, [sp, #16]
 8007434:	9e05      	ldr	r6, [sp, #20]
 8007436:	1ac2      	subs	r2, r0, r3
 8007438:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800743c:	429e      	cmp	r6, r3
 800743e:	bf28      	it	cs
 8007440:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007444:	4910      	ldr	r1, [pc, #64]	@ (8007488 <_scanf_float+0x420>)
 8007446:	4630      	mov	r0, r6
 8007448:	f000 f8e4 	bl	8007614 <siprintf>
 800744c:	e7d0      	b.n	80073f0 <_scanf_float+0x388>
 800744e:	f011 0f04 	tst.w	r1, #4
 8007452:	9903      	ldr	r1, [sp, #12]
 8007454:	600a      	str	r2, [r1, #0]
 8007456:	d1dc      	bne.n	8007412 <_scanf_float+0x3aa>
 8007458:	681d      	ldr	r5, [r3, #0]
 800745a:	4632      	mov	r2, r6
 800745c:	463b      	mov	r3, r7
 800745e:	4630      	mov	r0, r6
 8007460:	4639      	mov	r1, r7
 8007462:	f7f9 fb6b 	bl	8000b3c <__aeabi_dcmpun>
 8007466:	b128      	cbz	r0, 8007474 <_scanf_float+0x40c>
 8007468:	4808      	ldr	r0, [pc, #32]	@ (800748c <_scanf_float+0x424>)
 800746a:	f000 f9c5 	bl	80077f8 <nanf>
 800746e:	ed85 0a00 	vstr	s0, [r5]
 8007472:	e7d1      	b.n	8007418 <_scanf_float+0x3b0>
 8007474:	4630      	mov	r0, r6
 8007476:	4639      	mov	r1, r7
 8007478:	f7f9 fbbe 	bl	8000bf8 <__aeabi_d2f>
 800747c:	6028      	str	r0, [r5, #0]
 800747e:	e7cb      	b.n	8007418 <_scanf_float+0x3b0>
 8007480:	f04f 0900 	mov.w	r9, #0
 8007484:	e629      	b.n	80070da <_scanf_float+0x72>
 8007486:	bf00      	nop
 8007488:	0800af84 	.word	0x0800af84
 800748c:	0800b31d 	.word	0x0800b31d

08007490 <std>:
 8007490:	2300      	movs	r3, #0
 8007492:	b510      	push	{r4, lr}
 8007494:	4604      	mov	r4, r0
 8007496:	e9c0 3300 	strd	r3, r3, [r0]
 800749a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800749e:	6083      	str	r3, [r0, #8]
 80074a0:	8181      	strh	r1, [r0, #12]
 80074a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80074a4:	81c2      	strh	r2, [r0, #14]
 80074a6:	6183      	str	r3, [r0, #24]
 80074a8:	4619      	mov	r1, r3
 80074aa:	2208      	movs	r2, #8
 80074ac:	305c      	adds	r0, #92	@ 0x5c
 80074ae:	f000 f914 	bl	80076da <memset>
 80074b2:	4b0d      	ldr	r3, [pc, #52]	@ (80074e8 <std+0x58>)
 80074b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80074b6:	4b0d      	ldr	r3, [pc, #52]	@ (80074ec <std+0x5c>)
 80074b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074ba:	4b0d      	ldr	r3, [pc, #52]	@ (80074f0 <std+0x60>)
 80074bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074be:	4b0d      	ldr	r3, [pc, #52]	@ (80074f4 <std+0x64>)
 80074c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80074c2:	4b0d      	ldr	r3, [pc, #52]	@ (80074f8 <std+0x68>)
 80074c4:	6224      	str	r4, [r4, #32]
 80074c6:	429c      	cmp	r4, r3
 80074c8:	d006      	beq.n	80074d8 <std+0x48>
 80074ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074ce:	4294      	cmp	r4, r2
 80074d0:	d002      	beq.n	80074d8 <std+0x48>
 80074d2:	33d0      	adds	r3, #208	@ 0xd0
 80074d4:	429c      	cmp	r4, r3
 80074d6:	d105      	bne.n	80074e4 <std+0x54>
 80074d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074e0:	f000 b978 	b.w	80077d4 <__retarget_lock_init_recursive>
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	bf00      	nop
 80074e8:	08007655 	.word	0x08007655
 80074ec:	08007677 	.word	0x08007677
 80074f0:	080076af 	.word	0x080076af
 80074f4:	080076d3 	.word	0x080076d3
 80074f8:	20004cd8 	.word	0x20004cd8

080074fc <stdio_exit_handler>:
 80074fc:	4a02      	ldr	r2, [pc, #8]	@ (8007508 <stdio_exit_handler+0xc>)
 80074fe:	4903      	ldr	r1, [pc, #12]	@ (800750c <stdio_exit_handler+0x10>)
 8007500:	4803      	ldr	r0, [pc, #12]	@ (8007510 <stdio_exit_handler+0x14>)
 8007502:	f000 b869 	b.w	80075d8 <_fwalk_sglue>
 8007506:	bf00      	nop
 8007508:	20000010 	.word	0x20000010
 800750c:	0800a0c5 	.word	0x0800a0c5
 8007510:	20000020 	.word	0x20000020

08007514 <cleanup_stdio>:
 8007514:	6841      	ldr	r1, [r0, #4]
 8007516:	4b0c      	ldr	r3, [pc, #48]	@ (8007548 <cleanup_stdio+0x34>)
 8007518:	4299      	cmp	r1, r3
 800751a:	b510      	push	{r4, lr}
 800751c:	4604      	mov	r4, r0
 800751e:	d001      	beq.n	8007524 <cleanup_stdio+0x10>
 8007520:	f002 fdd0 	bl	800a0c4 <_fflush_r>
 8007524:	68a1      	ldr	r1, [r4, #8]
 8007526:	4b09      	ldr	r3, [pc, #36]	@ (800754c <cleanup_stdio+0x38>)
 8007528:	4299      	cmp	r1, r3
 800752a:	d002      	beq.n	8007532 <cleanup_stdio+0x1e>
 800752c:	4620      	mov	r0, r4
 800752e:	f002 fdc9 	bl	800a0c4 <_fflush_r>
 8007532:	68e1      	ldr	r1, [r4, #12]
 8007534:	4b06      	ldr	r3, [pc, #24]	@ (8007550 <cleanup_stdio+0x3c>)
 8007536:	4299      	cmp	r1, r3
 8007538:	d004      	beq.n	8007544 <cleanup_stdio+0x30>
 800753a:	4620      	mov	r0, r4
 800753c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007540:	f002 bdc0 	b.w	800a0c4 <_fflush_r>
 8007544:	bd10      	pop	{r4, pc}
 8007546:	bf00      	nop
 8007548:	20004cd8 	.word	0x20004cd8
 800754c:	20004d40 	.word	0x20004d40
 8007550:	20004da8 	.word	0x20004da8

08007554 <global_stdio_init.part.0>:
 8007554:	b510      	push	{r4, lr}
 8007556:	4b0b      	ldr	r3, [pc, #44]	@ (8007584 <global_stdio_init.part.0+0x30>)
 8007558:	4c0b      	ldr	r4, [pc, #44]	@ (8007588 <global_stdio_init.part.0+0x34>)
 800755a:	4a0c      	ldr	r2, [pc, #48]	@ (800758c <global_stdio_init.part.0+0x38>)
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	4620      	mov	r0, r4
 8007560:	2200      	movs	r2, #0
 8007562:	2104      	movs	r1, #4
 8007564:	f7ff ff94 	bl	8007490 <std>
 8007568:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800756c:	2201      	movs	r2, #1
 800756e:	2109      	movs	r1, #9
 8007570:	f7ff ff8e 	bl	8007490 <std>
 8007574:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007578:	2202      	movs	r2, #2
 800757a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800757e:	2112      	movs	r1, #18
 8007580:	f7ff bf86 	b.w	8007490 <std>
 8007584:	20004e10 	.word	0x20004e10
 8007588:	20004cd8 	.word	0x20004cd8
 800758c:	080074fd 	.word	0x080074fd

08007590 <__sfp_lock_acquire>:
 8007590:	4801      	ldr	r0, [pc, #4]	@ (8007598 <__sfp_lock_acquire+0x8>)
 8007592:	f000 b920 	b.w	80077d6 <__retarget_lock_acquire_recursive>
 8007596:	bf00      	nop
 8007598:	20004e19 	.word	0x20004e19

0800759c <__sfp_lock_release>:
 800759c:	4801      	ldr	r0, [pc, #4]	@ (80075a4 <__sfp_lock_release+0x8>)
 800759e:	f000 b91b 	b.w	80077d8 <__retarget_lock_release_recursive>
 80075a2:	bf00      	nop
 80075a4:	20004e19 	.word	0x20004e19

080075a8 <__sinit>:
 80075a8:	b510      	push	{r4, lr}
 80075aa:	4604      	mov	r4, r0
 80075ac:	f7ff fff0 	bl	8007590 <__sfp_lock_acquire>
 80075b0:	6a23      	ldr	r3, [r4, #32]
 80075b2:	b11b      	cbz	r3, 80075bc <__sinit+0x14>
 80075b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b8:	f7ff bff0 	b.w	800759c <__sfp_lock_release>
 80075bc:	4b04      	ldr	r3, [pc, #16]	@ (80075d0 <__sinit+0x28>)
 80075be:	6223      	str	r3, [r4, #32]
 80075c0:	4b04      	ldr	r3, [pc, #16]	@ (80075d4 <__sinit+0x2c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f5      	bne.n	80075b4 <__sinit+0xc>
 80075c8:	f7ff ffc4 	bl	8007554 <global_stdio_init.part.0>
 80075cc:	e7f2      	b.n	80075b4 <__sinit+0xc>
 80075ce:	bf00      	nop
 80075d0:	08007515 	.word	0x08007515
 80075d4:	20004e10 	.word	0x20004e10

080075d8 <_fwalk_sglue>:
 80075d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075dc:	4607      	mov	r7, r0
 80075de:	4688      	mov	r8, r1
 80075e0:	4614      	mov	r4, r2
 80075e2:	2600      	movs	r6, #0
 80075e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075e8:	f1b9 0901 	subs.w	r9, r9, #1
 80075ec:	d505      	bpl.n	80075fa <_fwalk_sglue+0x22>
 80075ee:	6824      	ldr	r4, [r4, #0]
 80075f0:	2c00      	cmp	r4, #0
 80075f2:	d1f7      	bne.n	80075e4 <_fwalk_sglue+0xc>
 80075f4:	4630      	mov	r0, r6
 80075f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075fa:	89ab      	ldrh	r3, [r5, #12]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d907      	bls.n	8007610 <_fwalk_sglue+0x38>
 8007600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007604:	3301      	adds	r3, #1
 8007606:	d003      	beq.n	8007610 <_fwalk_sglue+0x38>
 8007608:	4629      	mov	r1, r5
 800760a:	4638      	mov	r0, r7
 800760c:	47c0      	blx	r8
 800760e:	4306      	orrs	r6, r0
 8007610:	3568      	adds	r5, #104	@ 0x68
 8007612:	e7e9      	b.n	80075e8 <_fwalk_sglue+0x10>

08007614 <siprintf>:
 8007614:	b40e      	push	{r1, r2, r3}
 8007616:	b500      	push	{lr}
 8007618:	b09c      	sub	sp, #112	@ 0x70
 800761a:	ab1d      	add	r3, sp, #116	@ 0x74
 800761c:	9002      	str	r0, [sp, #8]
 800761e:	9006      	str	r0, [sp, #24]
 8007620:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007624:	4809      	ldr	r0, [pc, #36]	@ (800764c <siprintf+0x38>)
 8007626:	9107      	str	r1, [sp, #28]
 8007628:	9104      	str	r1, [sp, #16]
 800762a:	4909      	ldr	r1, [pc, #36]	@ (8007650 <siprintf+0x3c>)
 800762c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007630:	9105      	str	r1, [sp, #20]
 8007632:	6800      	ldr	r0, [r0, #0]
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	a902      	add	r1, sp, #8
 8007638:	f002 fbc4 	bl	8009dc4 <_svfiprintf_r>
 800763c:	9b02      	ldr	r3, [sp, #8]
 800763e:	2200      	movs	r2, #0
 8007640:	701a      	strb	r2, [r3, #0]
 8007642:	b01c      	add	sp, #112	@ 0x70
 8007644:	f85d eb04 	ldr.w	lr, [sp], #4
 8007648:	b003      	add	sp, #12
 800764a:	4770      	bx	lr
 800764c:	2000001c 	.word	0x2000001c
 8007650:	ffff0208 	.word	0xffff0208

08007654 <__sread>:
 8007654:	b510      	push	{r4, lr}
 8007656:	460c      	mov	r4, r1
 8007658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800765c:	f000 f86c 	bl	8007738 <_read_r>
 8007660:	2800      	cmp	r0, #0
 8007662:	bfab      	itete	ge
 8007664:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007666:	89a3      	ldrhlt	r3, [r4, #12]
 8007668:	181b      	addge	r3, r3, r0
 800766a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800766e:	bfac      	ite	ge
 8007670:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007672:	81a3      	strhlt	r3, [r4, #12]
 8007674:	bd10      	pop	{r4, pc}

08007676 <__swrite>:
 8007676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767a:	461f      	mov	r7, r3
 800767c:	898b      	ldrh	r3, [r1, #12]
 800767e:	05db      	lsls	r3, r3, #23
 8007680:	4605      	mov	r5, r0
 8007682:	460c      	mov	r4, r1
 8007684:	4616      	mov	r6, r2
 8007686:	d505      	bpl.n	8007694 <__swrite+0x1e>
 8007688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768c:	2302      	movs	r3, #2
 800768e:	2200      	movs	r2, #0
 8007690:	f000 f840 	bl	8007714 <_lseek_r>
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800769a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800769e:	81a3      	strh	r3, [r4, #12]
 80076a0:	4632      	mov	r2, r6
 80076a2:	463b      	mov	r3, r7
 80076a4:	4628      	mov	r0, r5
 80076a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076aa:	f000 b857 	b.w	800775c <_write_r>

080076ae <__sseek>:
 80076ae:	b510      	push	{r4, lr}
 80076b0:	460c      	mov	r4, r1
 80076b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b6:	f000 f82d 	bl	8007714 <_lseek_r>
 80076ba:	1c43      	adds	r3, r0, #1
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	bf15      	itete	ne
 80076c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076ca:	81a3      	strheq	r3, [r4, #12]
 80076cc:	bf18      	it	ne
 80076ce:	81a3      	strhne	r3, [r4, #12]
 80076d0:	bd10      	pop	{r4, pc}

080076d2 <__sclose>:
 80076d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d6:	f000 b80d 	b.w	80076f4 <_close_r>

080076da <memset>:
 80076da:	4402      	add	r2, r0
 80076dc:	4603      	mov	r3, r0
 80076de:	4293      	cmp	r3, r2
 80076e0:	d100      	bne.n	80076e4 <memset+0xa>
 80076e2:	4770      	bx	lr
 80076e4:	f803 1b01 	strb.w	r1, [r3], #1
 80076e8:	e7f9      	b.n	80076de <memset+0x4>
	...

080076ec <_localeconv_r>:
 80076ec:	4800      	ldr	r0, [pc, #0]	@ (80076f0 <_localeconv_r+0x4>)
 80076ee:	4770      	bx	lr
 80076f0:	2000015c 	.word	0x2000015c

080076f4 <_close_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4d06      	ldr	r5, [pc, #24]	@ (8007710 <_close_r+0x1c>)
 80076f8:	2300      	movs	r3, #0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4608      	mov	r0, r1
 80076fe:	602b      	str	r3, [r5, #0]
 8007700:	f7fa f8ac 	bl	800185c <_close>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_close_r+0x1a>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_close_r+0x1a>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	20004e14 	.word	0x20004e14

08007714 <_lseek_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4d07      	ldr	r5, [pc, #28]	@ (8007734 <_lseek_r+0x20>)
 8007718:	4604      	mov	r4, r0
 800771a:	4608      	mov	r0, r1
 800771c:	4611      	mov	r1, r2
 800771e:	2200      	movs	r2, #0
 8007720:	602a      	str	r2, [r5, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	f7fa f8c1 	bl	80018aa <_lseek>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_lseek_r+0x1e>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_lseek_r+0x1e>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	20004e14 	.word	0x20004e14

08007738 <_read_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4d07      	ldr	r5, [pc, #28]	@ (8007758 <_read_r+0x20>)
 800773c:	4604      	mov	r4, r0
 800773e:	4608      	mov	r0, r1
 8007740:	4611      	mov	r1, r2
 8007742:	2200      	movs	r2, #0
 8007744:	602a      	str	r2, [r5, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	f7fa f84f 	bl	80017ea <_read>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_read_r+0x1e>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_read_r+0x1e>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	20004e14 	.word	0x20004e14

0800775c <_write_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d07      	ldr	r5, [pc, #28]	@ (800777c <_write_r+0x20>)
 8007760:	4604      	mov	r4, r0
 8007762:	4608      	mov	r0, r1
 8007764:	4611      	mov	r1, r2
 8007766:	2200      	movs	r2, #0
 8007768:	602a      	str	r2, [r5, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	f7fa f85a 	bl	8001824 <_write>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d102      	bne.n	800777a <_write_r+0x1e>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	b103      	cbz	r3, 800777a <_write_r+0x1e>
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	bd38      	pop	{r3, r4, r5, pc}
 800777c:	20004e14 	.word	0x20004e14

08007780 <__errno>:
 8007780:	4b01      	ldr	r3, [pc, #4]	@ (8007788 <__errno+0x8>)
 8007782:	6818      	ldr	r0, [r3, #0]
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	2000001c 	.word	0x2000001c

0800778c <__libc_init_array>:
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	4d0d      	ldr	r5, [pc, #52]	@ (80077c4 <__libc_init_array+0x38>)
 8007790:	4c0d      	ldr	r4, [pc, #52]	@ (80077c8 <__libc_init_array+0x3c>)
 8007792:	1b64      	subs	r4, r4, r5
 8007794:	10a4      	asrs	r4, r4, #2
 8007796:	2600      	movs	r6, #0
 8007798:	42a6      	cmp	r6, r4
 800779a:	d109      	bne.n	80077b0 <__libc_init_array+0x24>
 800779c:	4d0b      	ldr	r5, [pc, #44]	@ (80077cc <__libc_init_array+0x40>)
 800779e:	4c0c      	ldr	r4, [pc, #48]	@ (80077d0 <__libc_init_array+0x44>)
 80077a0:	f003 fb74 	bl	800ae8c <_init>
 80077a4:	1b64      	subs	r4, r4, r5
 80077a6:	10a4      	asrs	r4, r4, #2
 80077a8:	2600      	movs	r6, #0
 80077aa:	42a6      	cmp	r6, r4
 80077ac:	d105      	bne.n	80077ba <__libc_init_array+0x2e>
 80077ae:	bd70      	pop	{r4, r5, r6, pc}
 80077b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077b4:	4798      	blx	r3
 80077b6:	3601      	adds	r6, #1
 80077b8:	e7ee      	b.n	8007798 <__libc_init_array+0xc>
 80077ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80077be:	4798      	blx	r3
 80077c0:	3601      	adds	r6, #1
 80077c2:	e7f2      	b.n	80077aa <__libc_init_array+0x1e>
 80077c4:	0800b388 	.word	0x0800b388
 80077c8:	0800b388 	.word	0x0800b388
 80077cc:	0800b388 	.word	0x0800b388
 80077d0:	0800b38c 	.word	0x0800b38c

080077d4 <__retarget_lock_init_recursive>:
 80077d4:	4770      	bx	lr

080077d6 <__retarget_lock_acquire_recursive>:
 80077d6:	4770      	bx	lr

080077d8 <__retarget_lock_release_recursive>:
 80077d8:	4770      	bx	lr

080077da <memcpy>:
 80077da:	440a      	add	r2, r1
 80077dc:	4291      	cmp	r1, r2
 80077de:	f100 33ff 	add.w	r3, r0, #4294967295
 80077e2:	d100      	bne.n	80077e6 <memcpy+0xc>
 80077e4:	4770      	bx	lr
 80077e6:	b510      	push	{r4, lr}
 80077e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077f0:	4291      	cmp	r1, r2
 80077f2:	d1f9      	bne.n	80077e8 <memcpy+0xe>
 80077f4:	bd10      	pop	{r4, pc}
	...

080077f8 <nanf>:
 80077f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007800 <nanf+0x8>
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	7fc00000 	.word	0x7fc00000

08007804 <quorem>:
 8007804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007808:	6903      	ldr	r3, [r0, #16]
 800780a:	690c      	ldr	r4, [r1, #16]
 800780c:	42a3      	cmp	r3, r4
 800780e:	4607      	mov	r7, r0
 8007810:	db7e      	blt.n	8007910 <quorem+0x10c>
 8007812:	3c01      	subs	r4, #1
 8007814:	f101 0814 	add.w	r8, r1, #20
 8007818:	00a3      	lsls	r3, r4, #2
 800781a:	f100 0514 	add.w	r5, r0, #20
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800782a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800782e:	3301      	adds	r3, #1
 8007830:	429a      	cmp	r2, r3
 8007832:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007836:	fbb2 f6f3 	udiv	r6, r2, r3
 800783a:	d32e      	bcc.n	800789a <quorem+0x96>
 800783c:	f04f 0a00 	mov.w	sl, #0
 8007840:	46c4      	mov	ip, r8
 8007842:	46ae      	mov	lr, r5
 8007844:	46d3      	mov	fp, sl
 8007846:	f85c 3b04 	ldr.w	r3, [ip], #4
 800784a:	b298      	uxth	r0, r3
 800784c:	fb06 a000 	mla	r0, r6, r0, sl
 8007850:	0c02      	lsrs	r2, r0, #16
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	fb06 2303 	mla	r3, r6, r3, r2
 8007858:	f8de 2000 	ldr.w	r2, [lr]
 800785c:	b280      	uxth	r0, r0
 800785e:	b292      	uxth	r2, r2
 8007860:	1a12      	subs	r2, r2, r0
 8007862:	445a      	add	r2, fp
 8007864:	f8de 0000 	ldr.w	r0, [lr]
 8007868:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800786c:	b29b      	uxth	r3, r3
 800786e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007872:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007876:	b292      	uxth	r2, r2
 8007878:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800787c:	45e1      	cmp	r9, ip
 800787e:	f84e 2b04 	str.w	r2, [lr], #4
 8007882:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007886:	d2de      	bcs.n	8007846 <quorem+0x42>
 8007888:	9b00      	ldr	r3, [sp, #0]
 800788a:	58eb      	ldr	r3, [r5, r3]
 800788c:	b92b      	cbnz	r3, 800789a <quorem+0x96>
 800788e:	9b01      	ldr	r3, [sp, #4]
 8007890:	3b04      	subs	r3, #4
 8007892:	429d      	cmp	r5, r3
 8007894:	461a      	mov	r2, r3
 8007896:	d32f      	bcc.n	80078f8 <quorem+0xf4>
 8007898:	613c      	str	r4, [r7, #16]
 800789a:	4638      	mov	r0, r7
 800789c:	f001 f9c4 	bl	8008c28 <__mcmp>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	db25      	blt.n	80078f0 <quorem+0xec>
 80078a4:	4629      	mov	r1, r5
 80078a6:	2000      	movs	r0, #0
 80078a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80078ac:	f8d1 c000 	ldr.w	ip, [r1]
 80078b0:	fa1f fe82 	uxth.w	lr, r2
 80078b4:	fa1f f38c 	uxth.w	r3, ip
 80078b8:	eba3 030e 	sub.w	r3, r3, lr
 80078bc:	4403      	add	r3, r0
 80078be:	0c12      	lsrs	r2, r2, #16
 80078c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80078c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078ce:	45c1      	cmp	r9, r8
 80078d0:	f841 3b04 	str.w	r3, [r1], #4
 80078d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80078d8:	d2e6      	bcs.n	80078a8 <quorem+0xa4>
 80078da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078e2:	b922      	cbnz	r2, 80078ee <quorem+0xea>
 80078e4:	3b04      	subs	r3, #4
 80078e6:	429d      	cmp	r5, r3
 80078e8:	461a      	mov	r2, r3
 80078ea:	d30b      	bcc.n	8007904 <quorem+0x100>
 80078ec:	613c      	str	r4, [r7, #16]
 80078ee:	3601      	adds	r6, #1
 80078f0:	4630      	mov	r0, r6
 80078f2:	b003      	add	sp, #12
 80078f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f8:	6812      	ldr	r2, [r2, #0]
 80078fa:	3b04      	subs	r3, #4
 80078fc:	2a00      	cmp	r2, #0
 80078fe:	d1cb      	bne.n	8007898 <quorem+0x94>
 8007900:	3c01      	subs	r4, #1
 8007902:	e7c6      	b.n	8007892 <quorem+0x8e>
 8007904:	6812      	ldr	r2, [r2, #0]
 8007906:	3b04      	subs	r3, #4
 8007908:	2a00      	cmp	r2, #0
 800790a:	d1ef      	bne.n	80078ec <quorem+0xe8>
 800790c:	3c01      	subs	r4, #1
 800790e:	e7ea      	b.n	80078e6 <quorem+0xe2>
 8007910:	2000      	movs	r0, #0
 8007912:	e7ee      	b.n	80078f2 <quorem+0xee>
 8007914:	0000      	movs	r0, r0
	...

08007918 <_dtoa_r>:
 8007918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791c:	69c7      	ldr	r7, [r0, #28]
 800791e:	b099      	sub	sp, #100	@ 0x64
 8007920:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007924:	ec55 4b10 	vmov	r4, r5, d0
 8007928:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800792a:	9109      	str	r1, [sp, #36]	@ 0x24
 800792c:	4683      	mov	fp, r0
 800792e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007930:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007932:	b97f      	cbnz	r7, 8007954 <_dtoa_r+0x3c>
 8007934:	2010      	movs	r0, #16
 8007936:	f000 fdfd 	bl	8008534 <malloc>
 800793a:	4602      	mov	r2, r0
 800793c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007940:	b920      	cbnz	r0, 800794c <_dtoa_r+0x34>
 8007942:	4ba7      	ldr	r3, [pc, #668]	@ (8007be0 <_dtoa_r+0x2c8>)
 8007944:	21ef      	movs	r1, #239	@ 0xef
 8007946:	48a7      	ldr	r0, [pc, #668]	@ (8007be4 <_dtoa_r+0x2cc>)
 8007948:	f002 fc2a 	bl	800a1a0 <__assert_func>
 800794c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007950:	6007      	str	r7, [r0, #0]
 8007952:	60c7      	str	r7, [r0, #12]
 8007954:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007958:	6819      	ldr	r1, [r3, #0]
 800795a:	b159      	cbz	r1, 8007974 <_dtoa_r+0x5c>
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	604a      	str	r2, [r1, #4]
 8007960:	2301      	movs	r3, #1
 8007962:	4093      	lsls	r3, r2
 8007964:	608b      	str	r3, [r1, #8]
 8007966:	4658      	mov	r0, fp
 8007968:	f000 feda 	bl	8008720 <_Bfree>
 800796c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007970:	2200      	movs	r2, #0
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	1e2b      	subs	r3, r5, #0
 8007976:	bfb9      	ittee	lt
 8007978:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800797c:	9303      	strlt	r3, [sp, #12]
 800797e:	2300      	movge	r3, #0
 8007980:	6033      	strge	r3, [r6, #0]
 8007982:	9f03      	ldr	r7, [sp, #12]
 8007984:	4b98      	ldr	r3, [pc, #608]	@ (8007be8 <_dtoa_r+0x2d0>)
 8007986:	bfbc      	itt	lt
 8007988:	2201      	movlt	r2, #1
 800798a:	6032      	strlt	r2, [r6, #0]
 800798c:	43bb      	bics	r3, r7
 800798e:	d112      	bne.n	80079b6 <_dtoa_r+0x9e>
 8007990:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007992:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800799c:	4323      	orrs	r3, r4
 800799e:	f000 854d 	beq.w	800843c <_dtoa_r+0xb24>
 80079a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007bfc <_dtoa_r+0x2e4>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 854f 	beq.w	800844c <_dtoa_r+0xb34>
 80079ae:	f10a 0303 	add.w	r3, sl, #3
 80079b2:	f000 bd49 	b.w	8008448 <_dtoa_r+0xb30>
 80079b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079ba:	2200      	movs	r2, #0
 80079bc:	ec51 0b17 	vmov	r0, r1, d7
 80079c0:	2300      	movs	r3, #0
 80079c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80079c6:	f7f9 f887 	bl	8000ad8 <__aeabi_dcmpeq>
 80079ca:	4680      	mov	r8, r0
 80079cc:	b158      	cbz	r0, 80079e6 <_dtoa_r+0xce>
 80079ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80079d0:	2301      	movs	r3, #1
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079d6:	b113      	cbz	r3, 80079de <_dtoa_r+0xc6>
 80079d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80079da:	4b84      	ldr	r3, [pc, #528]	@ (8007bec <_dtoa_r+0x2d4>)
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007c00 <_dtoa_r+0x2e8>
 80079e2:	f000 bd33 	b.w	800844c <_dtoa_r+0xb34>
 80079e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80079ea:	aa16      	add	r2, sp, #88	@ 0x58
 80079ec:	a917      	add	r1, sp, #92	@ 0x5c
 80079ee:	4658      	mov	r0, fp
 80079f0:	f001 fa3a 	bl	8008e68 <__d2b>
 80079f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80079f8:	4681      	mov	r9, r0
 80079fa:	2e00      	cmp	r6, #0
 80079fc:	d077      	beq.n	8007aee <_dtoa_r+0x1d6>
 80079fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007a10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007a14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007a18:	4619      	mov	r1, r3
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	4b74      	ldr	r3, [pc, #464]	@ (8007bf0 <_dtoa_r+0x2d8>)
 8007a1e:	f7f8 fc3b 	bl	8000298 <__aeabi_dsub>
 8007a22:	a369      	add	r3, pc, #420	@ (adr r3, 8007bc8 <_dtoa_r+0x2b0>)
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	f7f8 fdee 	bl	8000608 <__aeabi_dmul>
 8007a2c:	a368      	add	r3, pc, #416	@ (adr r3, 8007bd0 <_dtoa_r+0x2b8>)
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	f7f8 fc33 	bl	800029c <__adddf3>
 8007a36:	4604      	mov	r4, r0
 8007a38:	4630      	mov	r0, r6
 8007a3a:	460d      	mov	r5, r1
 8007a3c:	f7f8 fd7a 	bl	8000534 <__aeabi_i2d>
 8007a40:	a365      	add	r3, pc, #404	@ (adr r3, 8007bd8 <_dtoa_r+0x2c0>)
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	f7f8 fddf 	bl	8000608 <__aeabi_dmul>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	4620      	mov	r0, r4
 8007a50:	4629      	mov	r1, r5
 8007a52:	f7f8 fc23 	bl	800029c <__adddf3>
 8007a56:	4604      	mov	r4, r0
 8007a58:	460d      	mov	r5, r1
 8007a5a:	f7f9 f885 	bl	8000b68 <__aeabi_d2iz>
 8007a5e:	2200      	movs	r2, #0
 8007a60:	4607      	mov	r7, r0
 8007a62:	2300      	movs	r3, #0
 8007a64:	4620      	mov	r0, r4
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7f9 f840 	bl	8000aec <__aeabi_dcmplt>
 8007a6c:	b140      	cbz	r0, 8007a80 <_dtoa_r+0x168>
 8007a6e:	4638      	mov	r0, r7
 8007a70:	f7f8 fd60 	bl	8000534 <__aeabi_i2d>
 8007a74:	4622      	mov	r2, r4
 8007a76:	462b      	mov	r3, r5
 8007a78:	f7f9 f82e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a7c:	b900      	cbnz	r0, 8007a80 <_dtoa_r+0x168>
 8007a7e:	3f01      	subs	r7, #1
 8007a80:	2f16      	cmp	r7, #22
 8007a82:	d851      	bhi.n	8007b28 <_dtoa_r+0x210>
 8007a84:	4b5b      	ldr	r3, [pc, #364]	@ (8007bf4 <_dtoa_r+0x2dc>)
 8007a86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a92:	f7f9 f82b 	bl	8000aec <__aeabi_dcmplt>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d048      	beq.n	8007b2c <_dtoa_r+0x214>
 8007a9a:	3f01      	subs	r7, #1
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007aa0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007aa2:	1b9b      	subs	r3, r3, r6
 8007aa4:	1e5a      	subs	r2, r3, #1
 8007aa6:	bf44      	itt	mi
 8007aa8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007aac:	2300      	movmi	r3, #0
 8007aae:	9208      	str	r2, [sp, #32]
 8007ab0:	bf54      	ite	pl
 8007ab2:	f04f 0800 	movpl.w	r8, #0
 8007ab6:	9308      	strmi	r3, [sp, #32]
 8007ab8:	2f00      	cmp	r7, #0
 8007aba:	db39      	blt.n	8007b30 <_dtoa_r+0x218>
 8007abc:	9b08      	ldr	r3, [sp, #32]
 8007abe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007ac0:	443b      	add	r3, r7
 8007ac2:	9308      	str	r3, [sp, #32]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aca:	2b09      	cmp	r3, #9
 8007acc:	d864      	bhi.n	8007b98 <_dtoa_r+0x280>
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	bfc4      	itt	gt
 8007ad2:	3b04      	subgt	r3, #4
 8007ad4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad8:	f1a3 0302 	sub.w	r3, r3, #2
 8007adc:	bfcc      	ite	gt
 8007ade:	2400      	movgt	r4, #0
 8007ae0:	2401      	movle	r4, #1
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d863      	bhi.n	8007bae <_dtoa_r+0x296>
 8007ae6:	e8df f003 	tbb	[pc, r3]
 8007aea:	372a      	.short	0x372a
 8007aec:	5535      	.short	0x5535
 8007aee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007af2:	441e      	add	r6, r3
 8007af4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	bfc1      	itttt	gt
 8007afc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007b00:	409f      	lslgt	r7, r3
 8007b02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007b06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007b0a:	bfd6      	itet	le
 8007b0c:	f1c3 0320 	rsble	r3, r3, #32
 8007b10:	ea47 0003 	orrgt.w	r0, r7, r3
 8007b14:	fa04 f003 	lslle.w	r0, r4, r3
 8007b18:	f7f8 fcfc 	bl	8000514 <__aeabi_ui2d>
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b22:	3e01      	subs	r6, #1
 8007b24:	9214      	str	r2, [sp, #80]	@ 0x50
 8007b26:	e777      	b.n	8007a18 <_dtoa_r+0x100>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e7b8      	b.n	8007a9e <_dtoa_r+0x186>
 8007b2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007b2e:	e7b7      	b.n	8007aa0 <_dtoa_r+0x188>
 8007b30:	427b      	negs	r3, r7
 8007b32:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b34:	2300      	movs	r3, #0
 8007b36:	eba8 0807 	sub.w	r8, r8, r7
 8007b3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b3c:	e7c4      	b.n	8007ac8 <_dtoa_r+0x1b0>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	dc35      	bgt.n	8007bb4 <_dtoa_r+0x29c>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	9307      	str	r3, [sp, #28]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b52:	e00b      	b.n	8007b6c <_dtoa_r+0x254>
 8007b54:	2301      	movs	r3, #1
 8007b56:	e7f3      	b.n	8007b40 <_dtoa_r+0x228>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b5e:	18fb      	adds	r3, r7, r3
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	3301      	adds	r3, #1
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	9307      	str	r3, [sp, #28]
 8007b68:	bfb8      	it	lt
 8007b6a:	2301      	movlt	r3, #1
 8007b6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007b70:	2100      	movs	r1, #0
 8007b72:	2204      	movs	r2, #4
 8007b74:	f102 0514 	add.w	r5, r2, #20
 8007b78:	429d      	cmp	r5, r3
 8007b7a:	d91f      	bls.n	8007bbc <_dtoa_r+0x2a4>
 8007b7c:	6041      	str	r1, [r0, #4]
 8007b7e:	4658      	mov	r0, fp
 8007b80:	f000 fd8e 	bl	80086a0 <_Balloc>
 8007b84:	4682      	mov	sl, r0
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d13c      	bne.n	8007c04 <_dtoa_r+0x2ec>
 8007b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8007bf8 <_dtoa_r+0x2e0>)
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007b92:	e6d8      	b.n	8007946 <_dtoa_r+0x2e>
 8007b94:	2301      	movs	r3, #1
 8007b96:	e7e0      	b.n	8007b5a <_dtoa_r+0x242>
 8007b98:	2401      	movs	r4, #1
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	9307      	str	r3, [sp, #28]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2312      	movs	r3, #18
 8007bac:	e7d0      	b.n	8007b50 <_dtoa_r+0x238>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bb2:	e7f5      	b.n	8007ba0 <_dtoa_r+0x288>
 8007bb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	9307      	str	r3, [sp, #28]
 8007bba:	e7d7      	b.n	8007b6c <_dtoa_r+0x254>
 8007bbc:	3101      	adds	r1, #1
 8007bbe:	0052      	lsls	r2, r2, #1
 8007bc0:	e7d8      	b.n	8007b74 <_dtoa_r+0x25c>
 8007bc2:	bf00      	nop
 8007bc4:	f3af 8000 	nop.w
 8007bc8:	636f4361 	.word	0x636f4361
 8007bcc:	3fd287a7 	.word	0x3fd287a7
 8007bd0:	8b60c8b3 	.word	0x8b60c8b3
 8007bd4:	3fc68a28 	.word	0x3fc68a28
 8007bd8:	509f79fb 	.word	0x509f79fb
 8007bdc:	3fd34413 	.word	0x3fd34413
 8007be0:	0800af96 	.word	0x0800af96
 8007be4:	0800afad 	.word	0x0800afad
 8007be8:	7ff00000 	.word	0x7ff00000
 8007bec:	0800af61 	.word	0x0800af61
 8007bf0:	3ff80000 	.word	0x3ff80000
 8007bf4:	0800b0a8 	.word	0x0800b0a8
 8007bf8:	0800b005 	.word	0x0800b005
 8007bfc:	0800af92 	.word	0x0800af92
 8007c00:	0800af60 	.word	0x0800af60
 8007c04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c08:	6018      	str	r0, [r3, #0]
 8007c0a:	9b07      	ldr	r3, [sp, #28]
 8007c0c:	2b0e      	cmp	r3, #14
 8007c0e:	f200 80a4 	bhi.w	8007d5a <_dtoa_r+0x442>
 8007c12:	2c00      	cmp	r4, #0
 8007c14:	f000 80a1 	beq.w	8007d5a <_dtoa_r+0x442>
 8007c18:	2f00      	cmp	r7, #0
 8007c1a:	dd33      	ble.n	8007c84 <_dtoa_r+0x36c>
 8007c1c:	4bad      	ldr	r3, [pc, #692]	@ (8007ed4 <_dtoa_r+0x5bc>)
 8007c1e:	f007 020f 	and.w	r2, r7, #15
 8007c22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c26:	ed93 7b00 	vldr	d7, [r3]
 8007c2a:	05f8      	lsls	r0, r7, #23
 8007c2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007c30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c34:	d516      	bpl.n	8007c64 <_dtoa_r+0x34c>
 8007c36:	4ba8      	ldr	r3, [pc, #672]	@ (8007ed8 <_dtoa_r+0x5c0>)
 8007c38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c40:	f7f8 fe0c 	bl	800085c <__aeabi_ddiv>
 8007c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c48:	f004 040f 	and.w	r4, r4, #15
 8007c4c:	2603      	movs	r6, #3
 8007c4e:	4da2      	ldr	r5, [pc, #648]	@ (8007ed8 <_dtoa_r+0x5c0>)
 8007c50:	b954      	cbnz	r4, 8007c68 <_dtoa_r+0x350>
 8007c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c5a:	f7f8 fdff 	bl	800085c <__aeabi_ddiv>
 8007c5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c62:	e028      	b.n	8007cb6 <_dtoa_r+0x39e>
 8007c64:	2602      	movs	r6, #2
 8007c66:	e7f2      	b.n	8007c4e <_dtoa_r+0x336>
 8007c68:	07e1      	lsls	r1, r4, #31
 8007c6a:	d508      	bpl.n	8007c7e <_dtoa_r+0x366>
 8007c6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c74:	f7f8 fcc8 	bl	8000608 <__aeabi_dmul>
 8007c78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c7c:	3601      	adds	r6, #1
 8007c7e:	1064      	asrs	r4, r4, #1
 8007c80:	3508      	adds	r5, #8
 8007c82:	e7e5      	b.n	8007c50 <_dtoa_r+0x338>
 8007c84:	f000 80d2 	beq.w	8007e2c <_dtoa_r+0x514>
 8007c88:	427c      	negs	r4, r7
 8007c8a:	4b92      	ldr	r3, [pc, #584]	@ (8007ed4 <_dtoa_r+0x5bc>)
 8007c8c:	4d92      	ldr	r5, [pc, #584]	@ (8007ed8 <_dtoa_r+0x5c0>)
 8007c8e:	f004 020f 	and.w	r2, r4, #15
 8007c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c9e:	f7f8 fcb3 	bl	8000608 <__aeabi_dmul>
 8007ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ca6:	1124      	asrs	r4, r4, #4
 8007ca8:	2300      	movs	r3, #0
 8007caa:	2602      	movs	r6, #2
 8007cac:	2c00      	cmp	r4, #0
 8007cae:	f040 80b2 	bne.w	8007e16 <_dtoa_r+0x4fe>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1d3      	bne.n	8007c5e <_dtoa_r+0x346>
 8007cb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007cb8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 80b7 	beq.w	8007e30 <_dtoa_r+0x518>
 8007cc2:	4b86      	ldr	r3, [pc, #536]	@ (8007edc <_dtoa_r+0x5c4>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	4629      	mov	r1, r5
 8007cca:	f7f8 ff0f 	bl	8000aec <__aeabi_dcmplt>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f000 80ae 	beq.w	8007e30 <_dtoa_r+0x518>
 8007cd4:	9b07      	ldr	r3, [sp, #28]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 80aa 	beq.w	8007e30 <_dtoa_r+0x518>
 8007cdc:	9b00      	ldr	r3, [sp, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	dd37      	ble.n	8007d52 <_dtoa_r+0x43a>
 8007ce2:	1e7b      	subs	r3, r7, #1
 8007ce4:	9304      	str	r3, [sp, #16]
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	4b7d      	ldr	r3, [pc, #500]	@ (8007ee0 <_dtoa_r+0x5c8>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	4629      	mov	r1, r5
 8007cee:	f7f8 fc8b 	bl	8000608 <__aeabi_dmul>
 8007cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cf6:	9c00      	ldr	r4, [sp, #0]
 8007cf8:	3601      	adds	r6, #1
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f7f8 fc1a 	bl	8000534 <__aeabi_i2d>
 8007d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d04:	f7f8 fc80 	bl	8000608 <__aeabi_dmul>
 8007d08:	4b76      	ldr	r3, [pc, #472]	@ (8007ee4 <_dtoa_r+0x5cc>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f7f8 fac6 	bl	800029c <__adddf3>
 8007d10:	4605      	mov	r5, r0
 8007d12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007d16:	2c00      	cmp	r4, #0
 8007d18:	f040 808d 	bne.w	8007e36 <_dtoa_r+0x51e>
 8007d1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d20:	4b71      	ldr	r3, [pc, #452]	@ (8007ee8 <_dtoa_r+0x5d0>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	f7f8 fab8 	bl	8000298 <__aeabi_dsub>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d30:	462a      	mov	r2, r5
 8007d32:	4633      	mov	r3, r6
 8007d34:	f7f8 fef8 	bl	8000b28 <__aeabi_dcmpgt>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	f040 828b 	bne.w	8008254 <_dtoa_r+0x93c>
 8007d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d42:	462a      	mov	r2, r5
 8007d44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d48:	f7f8 fed0 	bl	8000aec <__aeabi_dcmplt>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	f040 8128 	bne.w	8007fa2 <_dtoa_r+0x68a>
 8007d52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007d56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007d5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f2c0 815a 	blt.w	8008016 <_dtoa_r+0x6fe>
 8007d62:	2f0e      	cmp	r7, #14
 8007d64:	f300 8157 	bgt.w	8008016 <_dtoa_r+0x6fe>
 8007d68:	4b5a      	ldr	r3, [pc, #360]	@ (8007ed4 <_dtoa_r+0x5bc>)
 8007d6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d6e:	ed93 7b00 	vldr	d7, [r3]
 8007d72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	ed8d 7b00 	vstr	d7, [sp]
 8007d7a:	da03      	bge.n	8007d84 <_dtoa_r+0x46c>
 8007d7c:	9b07      	ldr	r3, [sp, #28]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f340 8101 	ble.w	8007f86 <_dtoa_r+0x66e>
 8007d84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d88:	4656      	mov	r6, sl
 8007d8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d8e:	4620      	mov	r0, r4
 8007d90:	4629      	mov	r1, r5
 8007d92:	f7f8 fd63 	bl	800085c <__aeabi_ddiv>
 8007d96:	f7f8 fee7 	bl	8000b68 <__aeabi_d2iz>
 8007d9a:	4680      	mov	r8, r0
 8007d9c:	f7f8 fbca 	bl	8000534 <__aeabi_i2d>
 8007da0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007da4:	f7f8 fc30 	bl	8000608 <__aeabi_dmul>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4620      	mov	r0, r4
 8007dae:	4629      	mov	r1, r5
 8007db0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007db4:	f7f8 fa70 	bl	8000298 <__aeabi_dsub>
 8007db8:	f806 4b01 	strb.w	r4, [r6], #1
 8007dbc:	9d07      	ldr	r5, [sp, #28]
 8007dbe:	eba6 040a 	sub.w	r4, r6, sl
 8007dc2:	42a5      	cmp	r5, r4
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	f040 8117 	bne.w	8007ffa <_dtoa_r+0x6e2>
 8007dcc:	f7f8 fa66 	bl	800029c <__adddf3>
 8007dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	460d      	mov	r5, r1
 8007dd8:	f7f8 fea6 	bl	8000b28 <__aeabi_dcmpgt>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	f040 80f9 	bne.w	8007fd4 <_dtoa_r+0x6bc>
 8007de2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007de6:	4620      	mov	r0, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7f8 fe75 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dee:	b118      	cbz	r0, 8007df8 <_dtoa_r+0x4e0>
 8007df0:	f018 0f01 	tst.w	r8, #1
 8007df4:	f040 80ee 	bne.w	8007fd4 <_dtoa_r+0x6bc>
 8007df8:	4649      	mov	r1, r9
 8007dfa:	4658      	mov	r0, fp
 8007dfc:	f000 fc90 	bl	8008720 <_Bfree>
 8007e00:	2300      	movs	r3, #0
 8007e02:	7033      	strb	r3, [r6, #0]
 8007e04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e06:	3701      	adds	r7, #1
 8007e08:	601f      	str	r7, [r3, #0]
 8007e0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 831d 	beq.w	800844c <_dtoa_r+0xb34>
 8007e12:	601e      	str	r6, [r3, #0]
 8007e14:	e31a      	b.n	800844c <_dtoa_r+0xb34>
 8007e16:	07e2      	lsls	r2, r4, #31
 8007e18:	d505      	bpl.n	8007e26 <_dtoa_r+0x50e>
 8007e1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e1e:	f7f8 fbf3 	bl	8000608 <__aeabi_dmul>
 8007e22:	3601      	adds	r6, #1
 8007e24:	2301      	movs	r3, #1
 8007e26:	1064      	asrs	r4, r4, #1
 8007e28:	3508      	adds	r5, #8
 8007e2a:	e73f      	b.n	8007cac <_dtoa_r+0x394>
 8007e2c:	2602      	movs	r6, #2
 8007e2e:	e742      	b.n	8007cb6 <_dtoa_r+0x39e>
 8007e30:	9c07      	ldr	r4, [sp, #28]
 8007e32:	9704      	str	r7, [sp, #16]
 8007e34:	e761      	b.n	8007cfa <_dtoa_r+0x3e2>
 8007e36:	4b27      	ldr	r3, [pc, #156]	@ (8007ed4 <_dtoa_r+0x5bc>)
 8007e38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e42:	4454      	add	r4, sl
 8007e44:	2900      	cmp	r1, #0
 8007e46:	d053      	beq.n	8007ef0 <_dtoa_r+0x5d8>
 8007e48:	4928      	ldr	r1, [pc, #160]	@ (8007eec <_dtoa_r+0x5d4>)
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	f7f8 fd06 	bl	800085c <__aeabi_ddiv>
 8007e50:	4633      	mov	r3, r6
 8007e52:	462a      	mov	r2, r5
 8007e54:	f7f8 fa20 	bl	8000298 <__aeabi_dsub>
 8007e58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e5c:	4656      	mov	r6, sl
 8007e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e62:	f7f8 fe81 	bl	8000b68 <__aeabi_d2iz>
 8007e66:	4605      	mov	r5, r0
 8007e68:	f7f8 fb64 	bl	8000534 <__aeabi_i2d>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e74:	f7f8 fa10 	bl	8000298 <__aeabi_dsub>
 8007e78:	3530      	adds	r5, #48	@ 0x30
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e82:	f806 5b01 	strb.w	r5, [r6], #1
 8007e86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e8a:	f7f8 fe2f 	bl	8000aec <__aeabi_dcmplt>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d171      	bne.n	8007f76 <_dtoa_r+0x65e>
 8007e92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e96:	4911      	ldr	r1, [pc, #68]	@ (8007edc <_dtoa_r+0x5c4>)
 8007e98:	2000      	movs	r0, #0
 8007e9a:	f7f8 f9fd 	bl	8000298 <__aeabi_dsub>
 8007e9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ea2:	f7f8 fe23 	bl	8000aec <__aeabi_dcmplt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	f040 8095 	bne.w	8007fd6 <_dtoa_r+0x6be>
 8007eac:	42a6      	cmp	r6, r4
 8007eae:	f43f af50 	beq.w	8007d52 <_dtoa_r+0x43a>
 8007eb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee0 <_dtoa_r+0x5c8>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f7f8 fba5 	bl	8000608 <__aeabi_dmul>
 8007ebe:	4b08      	ldr	r3, [pc, #32]	@ (8007ee0 <_dtoa_r+0x5c8>)
 8007ec0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eca:	f7f8 fb9d 	bl	8000608 <__aeabi_dmul>
 8007ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed2:	e7c4      	b.n	8007e5e <_dtoa_r+0x546>
 8007ed4:	0800b0a8 	.word	0x0800b0a8
 8007ed8:	0800b080 	.word	0x0800b080
 8007edc:	3ff00000 	.word	0x3ff00000
 8007ee0:	40240000 	.word	0x40240000
 8007ee4:	401c0000 	.word	0x401c0000
 8007ee8:	40140000 	.word	0x40140000
 8007eec:	3fe00000 	.word	0x3fe00000
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f7f8 fb88 	bl	8000608 <__aeabi_dmul>
 8007ef8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007efc:	9415      	str	r4, [sp, #84]	@ 0x54
 8007efe:	4656      	mov	r6, sl
 8007f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f04:	f7f8 fe30 	bl	8000b68 <__aeabi_d2iz>
 8007f08:	4605      	mov	r5, r0
 8007f0a:	f7f8 fb13 	bl	8000534 <__aeabi_i2d>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f16:	f7f8 f9bf 	bl	8000298 <__aeabi_dsub>
 8007f1a:	3530      	adds	r5, #48	@ 0x30
 8007f1c:	f806 5b01 	strb.w	r5, [r6], #1
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	42a6      	cmp	r6, r4
 8007f26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f2a:	f04f 0200 	mov.w	r2, #0
 8007f2e:	d124      	bne.n	8007f7a <_dtoa_r+0x662>
 8007f30:	4bac      	ldr	r3, [pc, #688]	@ (80081e4 <_dtoa_r+0x8cc>)
 8007f32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f36:	f7f8 f9b1 	bl	800029c <__adddf3>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f42:	f7f8 fdf1 	bl	8000b28 <__aeabi_dcmpgt>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d145      	bne.n	8007fd6 <_dtoa_r+0x6be>
 8007f4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f4e:	49a5      	ldr	r1, [pc, #660]	@ (80081e4 <_dtoa_r+0x8cc>)
 8007f50:	2000      	movs	r0, #0
 8007f52:	f7f8 f9a1 	bl	8000298 <__aeabi_dsub>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f5e:	f7f8 fdc5 	bl	8000aec <__aeabi_dcmplt>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	f43f aef5 	beq.w	8007d52 <_dtoa_r+0x43a>
 8007f68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007f6a:	1e73      	subs	r3, r6, #1
 8007f6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f72:	2b30      	cmp	r3, #48	@ 0x30
 8007f74:	d0f8      	beq.n	8007f68 <_dtoa_r+0x650>
 8007f76:	9f04      	ldr	r7, [sp, #16]
 8007f78:	e73e      	b.n	8007df8 <_dtoa_r+0x4e0>
 8007f7a:	4b9b      	ldr	r3, [pc, #620]	@ (80081e8 <_dtoa_r+0x8d0>)
 8007f7c:	f7f8 fb44 	bl	8000608 <__aeabi_dmul>
 8007f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f84:	e7bc      	b.n	8007f00 <_dtoa_r+0x5e8>
 8007f86:	d10c      	bne.n	8007fa2 <_dtoa_r+0x68a>
 8007f88:	4b98      	ldr	r3, [pc, #608]	@ (80081ec <_dtoa_r+0x8d4>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f90:	f7f8 fb3a 	bl	8000608 <__aeabi_dmul>
 8007f94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f98:	f7f8 fdbc 	bl	8000b14 <__aeabi_dcmpge>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	f000 8157 	beq.w	8008250 <_dtoa_r+0x938>
 8007fa2:	2400      	movs	r4, #0
 8007fa4:	4625      	mov	r5, r4
 8007fa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fa8:	43db      	mvns	r3, r3
 8007faa:	9304      	str	r3, [sp, #16]
 8007fac:	4656      	mov	r6, sl
 8007fae:	2700      	movs	r7, #0
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	4658      	mov	r0, fp
 8007fb4:	f000 fbb4 	bl	8008720 <_Bfree>
 8007fb8:	2d00      	cmp	r5, #0
 8007fba:	d0dc      	beq.n	8007f76 <_dtoa_r+0x65e>
 8007fbc:	b12f      	cbz	r7, 8007fca <_dtoa_r+0x6b2>
 8007fbe:	42af      	cmp	r7, r5
 8007fc0:	d003      	beq.n	8007fca <_dtoa_r+0x6b2>
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	4658      	mov	r0, fp
 8007fc6:	f000 fbab 	bl	8008720 <_Bfree>
 8007fca:	4629      	mov	r1, r5
 8007fcc:	4658      	mov	r0, fp
 8007fce:	f000 fba7 	bl	8008720 <_Bfree>
 8007fd2:	e7d0      	b.n	8007f76 <_dtoa_r+0x65e>
 8007fd4:	9704      	str	r7, [sp, #16]
 8007fd6:	4633      	mov	r3, r6
 8007fd8:	461e      	mov	r6, r3
 8007fda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fde:	2a39      	cmp	r2, #57	@ 0x39
 8007fe0:	d107      	bne.n	8007ff2 <_dtoa_r+0x6da>
 8007fe2:	459a      	cmp	sl, r3
 8007fe4:	d1f8      	bne.n	8007fd8 <_dtoa_r+0x6c0>
 8007fe6:	9a04      	ldr	r2, [sp, #16]
 8007fe8:	3201      	adds	r2, #1
 8007fea:	9204      	str	r2, [sp, #16]
 8007fec:	2230      	movs	r2, #48	@ 0x30
 8007fee:	f88a 2000 	strb.w	r2, [sl]
 8007ff2:	781a      	ldrb	r2, [r3, #0]
 8007ff4:	3201      	adds	r2, #1
 8007ff6:	701a      	strb	r2, [r3, #0]
 8007ff8:	e7bd      	b.n	8007f76 <_dtoa_r+0x65e>
 8007ffa:	4b7b      	ldr	r3, [pc, #492]	@ (80081e8 <_dtoa_r+0x8d0>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f7f8 fb03 	bl	8000608 <__aeabi_dmul>
 8008002:	2200      	movs	r2, #0
 8008004:	2300      	movs	r3, #0
 8008006:	4604      	mov	r4, r0
 8008008:	460d      	mov	r5, r1
 800800a:	f7f8 fd65 	bl	8000ad8 <__aeabi_dcmpeq>
 800800e:	2800      	cmp	r0, #0
 8008010:	f43f aebb 	beq.w	8007d8a <_dtoa_r+0x472>
 8008014:	e6f0      	b.n	8007df8 <_dtoa_r+0x4e0>
 8008016:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008018:	2a00      	cmp	r2, #0
 800801a:	f000 80db 	beq.w	80081d4 <_dtoa_r+0x8bc>
 800801e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008020:	2a01      	cmp	r2, #1
 8008022:	f300 80bf 	bgt.w	80081a4 <_dtoa_r+0x88c>
 8008026:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008028:	2a00      	cmp	r2, #0
 800802a:	f000 80b7 	beq.w	800819c <_dtoa_r+0x884>
 800802e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008032:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008034:	4646      	mov	r6, r8
 8008036:	9a08      	ldr	r2, [sp, #32]
 8008038:	2101      	movs	r1, #1
 800803a:	441a      	add	r2, r3
 800803c:	4658      	mov	r0, fp
 800803e:	4498      	add	r8, r3
 8008040:	9208      	str	r2, [sp, #32]
 8008042:	f000 fc6b 	bl	800891c <__i2b>
 8008046:	4605      	mov	r5, r0
 8008048:	b15e      	cbz	r6, 8008062 <_dtoa_r+0x74a>
 800804a:	9b08      	ldr	r3, [sp, #32]
 800804c:	2b00      	cmp	r3, #0
 800804e:	dd08      	ble.n	8008062 <_dtoa_r+0x74a>
 8008050:	42b3      	cmp	r3, r6
 8008052:	9a08      	ldr	r2, [sp, #32]
 8008054:	bfa8      	it	ge
 8008056:	4633      	movge	r3, r6
 8008058:	eba8 0803 	sub.w	r8, r8, r3
 800805c:	1af6      	subs	r6, r6, r3
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	9308      	str	r3, [sp, #32]
 8008062:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008064:	b1f3      	cbz	r3, 80080a4 <_dtoa_r+0x78c>
 8008066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 80b7 	beq.w	80081dc <_dtoa_r+0x8c4>
 800806e:	b18c      	cbz	r4, 8008094 <_dtoa_r+0x77c>
 8008070:	4629      	mov	r1, r5
 8008072:	4622      	mov	r2, r4
 8008074:	4658      	mov	r0, fp
 8008076:	f000 fd11 	bl	8008a9c <__pow5mult>
 800807a:	464a      	mov	r2, r9
 800807c:	4601      	mov	r1, r0
 800807e:	4605      	mov	r5, r0
 8008080:	4658      	mov	r0, fp
 8008082:	f000 fc61 	bl	8008948 <__multiply>
 8008086:	4649      	mov	r1, r9
 8008088:	9004      	str	r0, [sp, #16]
 800808a:	4658      	mov	r0, fp
 800808c:	f000 fb48 	bl	8008720 <_Bfree>
 8008090:	9b04      	ldr	r3, [sp, #16]
 8008092:	4699      	mov	r9, r3
 8008094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008096:	1b1a      	subs	r2, r3, r4
 8008098:	d004      	beq.n	80080a4 <_dtoa_r+0x78c>
 800809a:	4649      	mov	r1, r9
 800809c:	4658      	mov	r0, fp
 800809e:	f000 fcfd 	bl	8008a9c <__pow5mult>
 80080a2:	4681      	mov	r9, r0
 80080a4:	2101      	movs	r1, #1
 80080a6:	4658      	mov	r0, fp
 80080a8:	f000 fc38 	bl	800891c <__i2b>
 80080ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ae:	4604      	mov	r4, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 81cf 	beq.w	8008454 <_dtoa_r+0xb3c>
 80080b6:	461a      	mov	r2, r3
 80080b8:	4601      	mov	r1, r0
 80080ba:	4658      	mov	r0, fp
 80080bc:	f000 fcee 	bl	8008a9c <__pow5mult>
 80080c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	4604      	mov	r4, r0
 80080c6:	f300 8095 	bgt.w	80081f4 <_dtoa_r+0x8dc>
 80080ca:	9b02      	ldr	r3, [sp, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f040 8087 	bne.w	80081e0 <_dtoa_r+0x8c8>
 80080d2:	9b03      	ldr	r3, [sp, #12]
 80080d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f040 8089 	bne.w	80081f0 <_dtoa_r+0x8d8>
 80080de:	9b03      	ldr	r3, [sp, #12]
 80080e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080e4:	0d1b      	lsrs	r3, r3, #20
 80080e6:	051b      	lsls	r3, r3, #20
 80080e8:	b12b      	cbz	r3, 80080f6 <_dtoa_r+0x7de>
 80080ea:	9b08      	ldr	r3, [sp, #32]
 80080ec:	3301      	adds	r3, #1
 80080ee:	9308      	str	r3, [sp, #32]
 80080f0:	f108 0801 	add.w	r8, r8, #1
 80080f4:	2301      	movs	r3, #1
 80080f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80080f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 81b0 	beq.w	8008460 <_dtoa_r+0xb48>
 8008100:	6923      	ldr	r3, [r4, #16]
 8008102:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008106:	6918      	ldr	r0, [r3, #16]
 8008108:	f000 fbbc 	bl	8008884 <__hi0bits>
 800810c:	f1c0 0020 	rsb	r0, r0, #32
 8008110:	9b08      	ldr	r3, [sp, #32]
 8008112:	4418      	add	r0, r3
 8008114:	f010 001f 	ands.w	r0, r0, #31
 8008118:	d077      	beq.n	800820a <_dtoa_r+0x8f2>
 800811a:	f1c0 0320 	rsb	r3, r0, #32
 800811e:	2b04      	cmp	r3, #4
 8008120:	dd6b      	ble.n	80081fa <_dtoa_r+0x8e2>
 8008122:	9b08      	ldr	r3, [sp, #32]
 8008124:	f1c0 001c 	rsb	r0, r0, #28
 8008128:	4403      	add	r3, r0
 800812a:	4480      	add	r8, r0
 800812c:	4406      	add	r6, r0
 800812e:	9308      	str	r3, [sp, #32]
 8008130:	f1b8 0f00 	cmp.w	r8, #0
 8008134:	dd05      	ble.n	8008142 <_dtoa_r+0x82a>
 8008136:	4649      	mov	r1, r9
 8008138:	4642      	mov	r2, r8
 800813a:	4658      	mov	r0, fp
 800813c:	f000 fd08 	bl	8008b50 <__lshift>
 8008140:	4681      	mov	r9, r0
 8008142:	9b08      	ldr	r3, [sp, #32]
 8008144:	2b00      	cmp	r3, #0
 8008146:	dd05      	ble.n	8008154 <_dtoa_r+0x83c>
 8008148:	4621      	mov	r1, r4
 800814a:	461a      	mov	r2, r3
 800814c:	4658      	mov	r0, fp
 800814e:	f000 fcff 	bl	8008b50 <__lshift>
 8008152:	4604      	mov	r4, r0
 8008154:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008156:	2b00      	cmp	r3, #0
 8008158:	d059      	beq.n	800820e <_dtoa_r+0x8f6>
 800815a:	4621      	mov	r1, r4
 800815c:	4648      	mov	r0, r9
 800815e:	f000 fd63 	bl	8008c28 <__mcmp>
 8008162:	2800      	cmp	r0, #0
 8008164:	da53      	bge.n	800820e <_dtoa_r+0x8f6>
 8008166:	1e7b      	subs	r3, r7, #1
 8008168:	9304      	str	r3, [sp, #16]
 800816a:	4649      	mov	r1, r9
 800816c:	2300      	movs	r3, #0
 800816e:	220a      	movs	r2, #10
 8008170:	4658      	mov	r0, fp
 8008172:	f000 faf7 	bl	8008764 <__multadd>
 8008176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008178:	4681      	mov	r9, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 8172 	beq.w	8008464 <_dtoa_r+0xb4c>
 8008180:	2300      	movs	r3, #0
 8008182:	4629      	mov	r1, r5
 8008184:	220a      	movs	r2, #10
 8008186:	4658      	mov	r0, fp
 8008188:	f000 faec 	bl	8008764 <__multadd>
 800818c:	9b00      	ldr	r3, [sp, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	4605      	mov	r5, r0
 8008192:	dc67      	bgt.n	8008264 <_dtoa_r+0x94c>
 8008194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008196:	2b02      	cmp	r3, #2
 8008198:	dc41      	bgt.n	800821e <_dtoa_r+0x906>
 800819a:	e063      	b.n	8008264 <_dtoa_r+0x94c>
 800819c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800819e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80081a2:	e746      	b.n	8008032 <_dtoa_r+0x71a>
 80081a4:	9b07      	ldr	r3, [sp, #28]
 80081a6:	1e5c      	subs	r4, r3, #1
 80081a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081aa:	42a3      	cmp	r3, r4
 80081ac:	bfbf      	itttt	lt
 80081ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80081b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80081b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80081b4:	1ae3      	sublt	r3, r4, r3
 80081b6:	bfb4      	ite	lt
 80081b8:	18d2      	addlt	r2, r2, r3
 80081ba:	1b1c      	subge	r4, r3, r4
 80081bc:	9b07      	ldr	r3, [sp, #28]
 80081be:	bfbc      	itt	lt
 80081c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80081c2:	2400      	movlt	r4, #0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	bfb5      	itete	lt
 80081c8:	eba8 0603 	sublt.w	r6, r8, r3
 80081cc:	9b07      	ldrge	r3, [sp, #28]
 80081ce:	2300      	movlt	r3, #0
 80081d0:	4646      	movge	r6, r8
 80081d2:	e730      	b.n	8008036 <_dtoa_r+0x71e>
 80081d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80081d8:	4646      	mov	r6, r8
 80081da:	e735      	b.n	8008048 <_dtoa_r+0x730>
 80081dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081de:	e75c      	b.n	800809a <_dtoa_r+0x782>
 80081e0:	2300      	movs	r3, #0
 80081e2:	e788      	b.n	80080f6 <_dtoa_r+0x7de>
 80081e4:	3fe00000 	.word	0x3fe00000
 80081e8:	40240000 	.word	0x40240000
 80081ec:	40140000 	.word	0x40140000
 80081f0:	9b02      	ldr	r3, [sp, #8]
 80081f2:	e780      	b.n	80080f6 <_dtoa_r+0x7de>
 80081f4:	2300      	movs	r3, #0
 80081f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80081f8:	e782      	b.n	8008100 <_dtoa_r+0x7e8>
 80081fa:	d099      	beq.n	8008130 <_dtoa_r+0x818>
 80081fc:	9a08      	ldr	r2, [sp, #32]
 80081fe:	331c      	adds	r3, #28
 8008200:	441a      	add	r2, r3
 8008202:	4498      	add	r8, r3
 8008204:	441e      	add	r6, r3
 8008206:	9208      	str	r2, [sp, #32]
 8008208:	e792      	b.n	8008130 <_dtoa_r+0x818>
 800820a:	4603      	mov	r3, r0
 800820c:	e7f6      	b.n	80081fc <_dtoa_r+0x8e4>
 800820e:	9b07      	ldr	r3, [sp, #28]
 8008210:	9704      	str	r7, [sp, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	dc20      	bgt.n	8008258 <_dtoa_r+0x940>
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800821a:	2b02      	cmp	r3, #2
 800821c:	dd1e      	ble.n	800825c <_dtoa_r+0x944>
 800821e:	9b00      	ldr	r3, [sp, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	f47f aec0 	bne.w	8007fa6 <_dtoa_r+0x68e>
 8008226:	4621      	mov	r1, r4
 8008228:	2205      	movs	r2, #5
 800822a:	4658      	mov	r0, fp
 800822c:	f000 fa9a 	bl	8008764 <__multadd>
 8008230:	4601      	mov	r1, r0
 8008232:	4604      	mov	r4, r0
 8008234:	4648      	mov	r0, r9
 8008236:	f000 fcf7 	bl	8008c28 <__mcmp>
 800823a:	2800      	cmp	r0, #0
 800823c:	f77f aeb3 	ble.w	8007fa6 <_dtoa_r+0x68e>
 8008240:	4656      	mov	r6, sl
 8008242:	2331      	movs	r3, #49	@ 0x31
 8008244:	f806 3b01 	strb.w	r3, [r6], #1
 8008248:	9b04      	ldr	r3, [sp, #16]
 800824a:	3301      	adds	r3, #1
 800824c:	9304      	str	r3, [sp, #16]
 800824e:	e6ae      	b.n	8007fae <_dtoa_r+0x696>
 8008250:	9c07      	ldr	r4, [sp, #28]
 8008252:	9704      	str	r7, [sp, #16]
 8008254:	4625      	mov	r5, r4
 8008256:	e7f3      	b.n	8008240 <_dtoa_r+0x928>
 8008258:	9b07      	ldr	r3, [sp, #28]
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 8104 	beq.w	800846c <_dtoa_r+0xb54>
 8008264:	2e00      	cmp	r6, #0
 8008266:	dd05      	ble.n	8008274 <_dtoa_r+0x95c>
 8008268:	4629      	mov	r1, r5
 800826a:	4632      	mov	r2, r6
 800826c:	4658      	mov	r0, fp
 800826e:	f000 fc6f 	bl	8008b50 <__lshift>
 8008272:	4605      	mov	r5, r0
 8008274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d05a      	beq.n	8008330 <_dtoa_r+0xa18>
 800827a:	6869      	ldr	r1, [r5, #4]
 800827c:	4658      	mov	r0, fp
 800827e:	f000 fa0f 	bl	80086a0 <_Balloc>
 8008282:	4606      	mov	r6, r0
 8008284:	b928      	cbnz	r0, 8008292 <_dtoa_r+0x97a>
 8008286:	4b84      	ldr	r3, [pc, #528]	@ (8008498 <_dtoa_r+0xb80>)
 8008288:	4602      	mov	r2, r0
 800828a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800828e:	f7ff bb5a 	b.w	8007946 <_dtoa_r+0x2e>
 8008292:	692a      	ldr	r2, [r5, #16]
 8008294:	3202      	adds	r2, #2
 8008296:	0092      	lsls	r2, r2, #2
 8008298:	f105 010c 	add.w	r1, r5, #12
 800829c:	300c      	adds	r0, #12
 800829e:	f7ff fa9c 	bl	80077da <memcpy>
 80082a2:	2201      	movs	r2, #1
 80082a4:	4631      	mov	r1, r6
 80082a6:	4658      	mov	r0, fp
 80082a8:	f000 fc52 	bl	8008b50 <__lshift>
 80082ac:	f10a 0301 	add.w	r3, sl, #1
 80082b0:	9307      	str	r3, [sp, #28]
 80082b2:	9b00      	ldr	r3, [sp, #0]
 80082b4:	4453      	add	r3, sl
 80082b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082b8:	9b02      	ldr	r3, [sp, #8]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	462f      	mov	r7, r5
 80082c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80082c2:	4605      	mov	r5, r0
 80082c4:	9b07      	ldr	r3, [sp, #28]
 80082c6:	4621      	mov	r1, r4
 80082c8:	3b01      	subs	r3, #1
 80082ca:	4648      	mov	r0, r9
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	f7ff fa99 	bl	8007804 <quorem>
 80082d2:	4639      	mov	r1, r7
 80082d4:	9002      	str	r0, [sp, #8]
 80082d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082da:	4648      	mov	r0, r9
 80082dc:	f000 fca4 	bl	8008c28 <__mcmp>
 80082e0:	462a      	mov	r2, r5
 80082e2:	9008      	str	r0, [sp, #32]
 80082e4:	4621      	mov	r1, r4
 80082e6:	4658      	mov	r0, fp
 80082e8:	f000 fcba 	bl	8008c60 <__mdiff>
 80082ec:	68c2      	ldr	r2, [r0, #12]
 80082ee:	4606      	mov	r6, r0
 80082f0:	bb02      	cbnz	r2, 8008334 <_dtoa_r+0xa1c>
 80082f2:	4601      	mov	r1, r0
 80082f4:	4648      	mov	r0, r9
 80082f6:	f000 fc97 	bl	8008c28 <__mcmp>
 80082fa:	4602      	mov	r2, r0
 80082fc:	4631      	mov	r1, r6
 80082fe:	4658      	mov	r0, fp
 8008300:	920e      	str	r2, [sp, #56]	@ 0x38
 8008302:	f000 fa0d 	bl	8008720 <_Bfree>
 8008306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008308:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800830a:	9e07      	ldr	r6, [sp, #28]
 800830c:	ea43 0102 	orr.w	r1, r3, r2
 8008310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008312:	4319      	orrs	r1, r3
 8008314:	d110      	bne.n	8008338 <_dtoa_r+0xa20>
 8008316:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800831a:	d029      	beq.n	8008370 <_dtoa_r+0xa58>
 800831c:	9b08      	ldr	r3, [sp, #32]
 800831e:	2b00      	cmp	r3, #0
 8008320:	dd02      	ble.n	8008328 <_dtoa_r+0xa10>
 8008322:	9b02      	ldr	r3, [sp, #8]
 8008324:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008328:	9b00      	ldr	r3, [sp, #0]
 800832a:	f883 8000 	strb.w	r8, [r3]
 800832e:	e63f      	b.n	8007fb0 <_dtoa_r+0x698>
 8008330:	4628      	mov	r0, r5
 8008332:	e7bb      	b.n	80082ac <_dtoa_r+0x994>
 8008334:	2201      	movs	r2, #1
 8008336:	e7e1      	b.n	80082fc <_dtoa_r+0x9e4>
 8008338:	9b08      	ldr	r3, [sp, #32]
 800833a:	2b00      	cmp	r3, #0
 800833c:	db04      	blt.n	8008348 <_dtoa_r+0xa30>
 800833e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008340:	430b      	orrs	r3, r1
 8008342:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008344:	430b      	orrs	r3, r1
 8008346:	d120      	bne.n	800838a <_dtoa_r+0xa72>
 8008348:	2a00      	cmp	r2, #0
 800834a:	dded      	ble.n	8008328 <_dtoa_r+0xa10>
 800834c:	4649      	mov	r1, r9
 800834e:	2201      	movs	r2, #1
 8008350:	4658      	mov	r0, fp
 8008352:	f000 fbfd 	bl	8008b50 <__lshift>
 8008356:	4621      	mov	r1, r4
 8008358:	4681      	mov	r9, r0
 800835a:	f000 fc65 	bl	8008c28 <__mcmp>
 800835e:	2800      	cmp	r0, #0
 8008360:	dc03      	bgt.n	800836a <_dtoa_r+0xa52>
 8008362:	d1e1      	bne.n	8008328 <_dtoa_r+0xa10>
 8008364:	f018 0f01 	tst.w	r8, #1
 8008368:	d0de      	beq.n	8008328 <_dtoa_r+0xa10>
 800836a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800836e:	d1d8      	bne.n	8008322 <_dtoa_r+0xa0a>
 8008370:	9a00      	ldr	r2, [sp, #0]
 8008372:	2339      	movs	r3, #57	@ 0x39
 8008374:	7013      	strb	r3, [r2, #0]
 8008376:	4633      	mov	r3, r6
 8008378:	461e      	mov	r6, r3
 800837a:	3b01      	subs	r3, #1
 800837c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008380:	2a39      	cmp	r2, #57	@ 0x39
 8008382:	d052      	beq.n	800842a <_dtoa_r+0xb12>
 8008384:	3201      	adds	r2, #1
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	e612      	b.n	8007fb0 <_dtoa_r+0x698>
 800838a:	2a00      	cmp	r2, #0
 800838c:	dd07      	ble.n	800839e <_dtoa_r+0xa86>
 800838e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008392:	d0ed      	beq.n	8008370 <_dtoa_r+0xa58>
 8008394:	9a00      	ldr	r2, [sp, #0]
 8008396:	f108 0301 	add.w	r3, r8, #1
 800839a:	7013      	strb	r3, [r2, #0]
 800839c:	e608      	b.n	8007fb0 <_dtoa_r+0x698>
 800839e:	9b07      	ldr	r3, [sp, #28]
 80083a0:	9a07      	ldr	r2, [sp, #28]
 80083a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80083a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d028      	beq.n	80083fe <_dtoa_r+0xae6>
 80083ac:	4649      	mov	r1, r9
 80083ae:	2300      	movs	r3, #0
 80083b0:	220a      	movs	r2, #10
 80083b2:	4658      	mov	r0, fp
 80083b4:	f000 f9d6 	bl	8008764 <__multadd>
 80083b8:	42af      	cmp	r7, r5
 80083ba:	4681      	mov	r9, r0
 80083bc:	f04f 0300 	mov.w	r3, #0
 80083c0:	f04f 020a 	mov.w	r2, #10
 80083c4:	4639      	mov	r1, r7
 80083c6:	4658      	mov	r0, fp
 80083c8:	d107      	bne.n	80083da <_dtoa_r+0xac2>
 80083ca:	f000 f9cb 	bl	8008764 <__multadd>
 80083ce:	4607      	mov	r7, r0
 80083d0:	4605      	mov	r5, r0
 80083d2:	9b07      	ldr	r3, [sp, #28]
 80083d4:	3301      	adds	r3, #1
 80083d6:	9307      	str	r3, [sp, #28]
 80083d8:	e774      	b.n	80082c4 <_dtoa_r+0x9ac>
 80083da:	f000 f9c3 	bl	8008764 <__multadd>
 80083de:	4629      	mov	r1, r5
 80083e0:	4607      	mov	r7, r0
 80083e2:	2300      	movs	r3, #0
 80083e4:	220a      	movs	r2, #10
 80083e6:	4658      	mov	r0, fp
 80083e8:	f000 f9bc 	bl	8008764 <__multadd>
 80083ec:	4605      	mov	r5, r0
 80083ee:	e7f0      	b.n	80083d2 <_dtoa_r+0xaba>
 80083f0:	9b00      	ldr	r3, [sp, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	bfcc      	ite	gt
 80083f6:	461e      	movgt	r6, r3
 80083f8:	2601      	movle	r6, #1
 80083fa:	4456      	add	r6, sl
 80083fc:	2700      	movs	r7, #0
 80083fe:	4649      	mov	r1, r9
 8008400:	2201      	movs	r2, #1
 8008402:	4658      	mov	r0, fp
 8008404:	f000 fba4 	bl	8008b50 <__lshift>
 8008408:	4621      	mov	r1, r4
 800840a:	4681      	mov	r9, r0
 800840c:	f000 fc0c 	bl	8008c28 <__mcmp>
 8008410:	2800      	cmp	r0, #0
 8008412:	dcb0      	bgt.n	8008376 <_dtoa_r+0xa5e>
 8008414:	d102      	bne.n	800841c <_dtoa_r+0xb04>
 8008416:	f018 0f01 	tst.w	r8, #1
 800841a:	d1ac      	bne.n	8008376 <_dtoa_r+0xa5e>
 800841c:	4633      	mov	r3, r6
 800841e:	461e      	mov	r6, r3
 8008420:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008424:	2a30      	cmp	r2, #48	@ 0x30
 8008426:	d0fa      	beq.n	800841e <_dtoa_r+0xb06>
 8008428:	e5c2      	b.n	8007fb0 <_dtoa_r+0x698>
 800842a:	459a      	cmp	sl, r3
 800842c:	d1a4      	bne.n	8008378 <_dtoa_r+0xa60>
 800842e:	9b04      	ldr	r3, [sp, #16]
 8008430:	3301      	adds	r3, #1
 8008432:	9304      	str	r3, [sp, #16]
 8008434:	2331      	movs	r3, #49	@ 0x31
 8008436:	f88a 3000 	strb.w	r3, [sl]
 800843a:	e5b9      	b.n	8007fb0 <_dtoa_r+0x698>
 800843c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800843e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800849c <_dtoa_r+0xb84>
 8008442:	b11b      	cbz	r3, 800844c <_dtoa_r+0xb34>
 8008444:	f10a 0308 	add.w	r3, sl, #8
 8008448:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800844a:	6013      	str	r3, [r2, #0]
 800844c:	4650      	mov	r0, sl
 800844e:	b019      	add	sp, #100	@ 0x64
 8008450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008456:	2b01      	cmp	r3, #1
 8008458:	f77f ae37 	ble.w	80080ca <_dtoa_r+0x7b2>
 800845c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800845e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008460:	2001      	movs	r0, #1
 8008462:	e655      	b.n	8008110 <_dtoa_r+0x7f8>
 8008464:	9b00      	ldr	r3, [sp, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f77f aed6 	ble.w	8008218 <_dtoa_r+0x900>
 800846c:	4656      	mov	r6, sl
 800846e:	4621      	mov	r1, r4
 8008470:	4648      	mov	r0, r9
 8008472:	f7ff f9c7 	bl	8007804 <quorem>
 8008476:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800847a:	f806 8b01 	strb.w	r8, [r6], #1
 800847e:	9b00      	ldr	r3, [sp, #0]
 8008480:	eba6 020a 	sub.w	r2, r6, sl
 8008484:	4293      	cmp	r3, r2
 8008486:	ddb3      	ble.n	80083f0 <_dtoa_r+0xad8>
 8008488:	4649      	mov	r1, r9
 800848a:	2300      	movs	r3, #0
 800848c:	220a      	movs	r2, #10
 800848e:	4658      	mov	r0, fp
 8008490:	f000 f968 	bl	8008764 <__multadd>
 8008494:	4681      	mov	r9, r0
 8008496:	e7ea      	b.n	800846e <_dtoa_r+0xb56>
 8008498:	0800b005 	.word	0x0800b005
 800849c:	0800af89 	.word	0x0800af89

080084a0 <_free_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4605      	mov	r5, r0
 80084a4:	2900      	cmp	r1, #0
 80084a6:	d041      	beq.n	800852c <_free_r+0x8c>
 80084a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ac:	1f0c      	subs	r4, r1, #4
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bfb8      	it	lt
 80084b2:	18e4      	addlt	r4, r4, r3
 80084b4:	f000 f8e8 	bl	8008688 <__malloc_lock>
 80084b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008530 <_free_r+0x90>)
 80084ba:	6813      	ldr	r3, [r2, #0]
 80084bc:	b933      	cbnz	r3, 80084cc <_free_r+0x2c>
 80084be:	6063      	str	r3, [r4, #4]
 80084c0:	6014      	str	r4, [r2, #0]
 80084c2:	4628      	mov	r0, r5
 80084c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084c8:	f000 b8e4 	b.w	8008694 <__malloc_unlock>
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d908      	bls.n	80084e2 <_free_r+0x42>
 80084d0:	6820      	ldr	r0, [r4, #0]
 80084d2:	1821      	adds	r1, r4, r0
 80084d4:	428b      	cmp	r3, r1
 80084d6:	bf01      	itttt	eq
 80084d8:	6819      	ldreq	r1, [r3, #0]
 80084da:	685b      	ldreq	r3, [r3, #4]
 80084dc:	1809      	addeq	r1, r1, r0
 80084de:	6021      	streq	r1, [r4, #0]
 80084e0:	e7ed      	b.n	80084be <_free_r+0x1e>
 80084e2:	461a      	mov	r2, r3
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	b10b      	cbz	r3, 80084ec <_free_r+0x4c>
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	d9fa      	bls.n	80084e2 <_free_r+0x42>
 80084ec:	6811      	ldr	r1, [r2, #0]
 80084ee:	1850      	adds	r0, r2, r1
 80084f0:	42a0      	cmp	r0, r4
 80084f2:	d10b      	bne.n	800850c <_free_r+0x6c>
 80084f4:	6820      	ldr	r0, [r4, #0]
 80084f6:	4401      	add	r1, r0
 80084f8:	1850      	adds	r0, r2, r1
 80084fa:	4283      	cmp	r3, r0
 80084fc:	6011      	str	r1, [r2, #0]
 80084fe:	d1e0      	bne.n	80084c2 <_free_r+0x22>
 8008500:	6818      	ldr	r0, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	6053      	str	r3, [r2, #4]
 8008506:	4408      	add	r0, r1
 8008508:	6010      	str	r0, [r2, #0]
 800850a:	e7da      	b.n	80084c2 <_free_r+0x22>
 800850c:	d902      	bls.n	8008514 <_free_r+0x74>
 800850e:	230c      	movs	r3, #12
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	e7d6      	b.n	80084c2 <_free_r+0x22>
 8008514:	6820      	ldr	r0, [r4, #0]
 8008516:	1821      	adds	r1, r4, r0
 8008518:	428b      	cmp	r3, r1
 800851a:	bf04      	itt	eq
 800851c:	6819      	ldreq	r1, [r3, #0]
 800851e:	685b      	ldreq	r3, [r3, #4]
 8008520:	6063      	str	r3, [r4, #4]
 8008522:	bf04      	itt	eq
 8008524:	1809      	addeq	r1, r1, r0
 8008526:	6021      	streq	r1, [r4, #0]
 8008528:	6054      	str	r4, [r2, #4]
 800852a:	e7ca      	b.n	80084c2 <_free_r+0x22>
 800852c:	bd38      	pop	{r3, r4, r5, pc}
 800852e:	bf00      	nop
 8008530:	20004e20 	.word	0x20004e20

08008534 <malloc>:
 8008534:	4b02      	ldr	r3, [pc, #8]	@ (8008540 <malloc+0xc>)
 8008536:	4601      	mov	r1, r0
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	f000 b825 	b.w	8008588 <_malloc_r>
 800853e:	bf00      	nop
 8008540:	2000001c 	.word	0x2000001c

08008544 <sbrk_aligned>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	4e0f      	ldr	r6, [pc, #60]	@ (8008584 <sbrk_aligned+0x40>)
 8008548:	460c      	mov	r4, r1
 800854a:	6831      	ldr	r1, [r6, #0]
 800854c:	4605      	mov	r5, r0
 800854e:	b911      	cbnz	r1, 8008556 <sbrk_aligned+0x12>
 8008550:	f001 fe0c 	bl	800a16c <_sbrk_r>
 8008554:	6030      	str	r0, [r6, #0]
 8008556:	4621      	mov	r1, r4
 8008558:	4628      	mov	r0, r5
 800855a:	f001 fe07 	bl	800a16c <_sbrk_r>
 800855e:	1c43      	adds	r3, r0, #1
 8008560:	d103      	bne.n	800856a <sbrk_aligned+0x26>
 8008562:	f04f 34ff 	mov.w	r4, #4294967295
 8008566:	4620      	mov	r0, r4
 8008568:	bd70      	pop	{r4, r5, r6, pc}
 800856a:	1cc4      	adds	r4, r0, #3
 800856c:	f024 0403 	bic.w	r4, r4, #3
 8008570:	42a0      	cmp	r0, r4
 8008572:	d0f8      	beq.n	8008566 <sbrk_aligned+0x22>
 8008574:	1a21      	subs	r1, r4, r0
 8008576:	4628      	mov	r0, r5
 8008578:	f001 fdf8 	bl	800a16c <_sbrk_r>
 800857c:	3001      	adds	r0, #1
 800857e:	d1f2      	bne.n	8008566 <sbrk_aligned+0x22>
 8008580:	e7ef      	b.n	8008562 <sbrk_aligned+0x1e>
 8008582:	bf00      	nop
 8008584:	20004e1c 	.word	0x20004e1c

08008588 <_malloc_r>:
 8008588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800858c:	1ccd      	adds	r5, r1, #3
 800858e:	f025 0503 	bic.w	r5, r5, #3
 8008592:	3508      	adds	r5, #8
 8008594:	2d0c      	cmp	r5, #12
 8008596:	bf38      	it	cc
 8008598:	250c      	movcc	r5, #12
 800859a:	2d00      	cmp	r5, #0
 800859c:	4606      	mov	r6, r0
 800859e:	db01      	blt.n	80085a4 <_malloc_r+0x1c>
 80085a0:	42a9      	cmp	r1, r5
 80085a2:	d904      	bls.n	80085ae <_malloc_r+0x26>
 80085a4:	230c      	movs	r3, #12
 80085a6:	6033      	str	r3, [r6, #0]
 80085a8:	2000      	movs	r0, #0
 80085aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008684 <_malloc_r+0xfc>
 80085b2:	f000 f869 	bl	8008688 <__malloc_lock>
 80085b6:	f8d8 3000 	ldr.w	r3, [r8]
 80085ba:	461c      	mov	r4, r3
 80085bc:	bb44      	cbnz	r4, 8008610 <_malloc_r+0x88>
 80085be:	4629      	mov	r1, r5
 80085c0:	4630      	mov	r0, r6
 80085c2:	f7ff ffbf 	bl	8008544 <sbrk_aligned>
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	4604      	mov	r4, r0
 80085ca:	d158      	bne.n	800867e <_malloc_r+0xf6>
 80085cc:	f8d8 4000 	ldr.w	r4, [r8]
 80085d0:	4627      	mov	r7, r4
 80085d2:	2f00      	cmp	r7, #0
 80085d4:	d143      	bne.n	800865e <_malloc_r+0xd6>
 80085d6:	2c00      	cmp	r4, #0
 80085d8:	d04b      	beq.n	8008672 <_malloc_r+0xea>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	4639      	mov	r1, r7
 80085de:	4630      	mov	r0, r6
 80085e0:	eb04 0903 	add.w	r9, r4, r3
 80085e4:	f001 fdc2 	bl	800a16c <_sbrk_r>
 80085e8:	4581      	cmp	r9, r0
 80085ea:	d142      	bne.n	8008672 <_malloc_r+0xea>
 80085ec:	6821      	ldr	r1, [r4, #0]
 80085ee:	1a6d      	subs	r5, r5, r1
 80085f0:	4629      	mov	r1, r5
 80085f2:	4630      	mov	r0, r6
 80085f4:	f7ff ffa6 	bl	8008544 <sbrk_aligned>
 80085f8:	3001      	adds	r0, #1
 80085fa:	d03a      	beq.n	8008672 <_malloc_r+0xea>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	442b      	add	r3, r5
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	f8d8 3000 	ldr.w	r3, [r8]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	bb62      	cbnz	r2, 8008664 <_malloc_r+0xdc>
 800860a:	f8c8 7000 	str.w	r7, [r8]
 800860e:	e00f      	b.n	8008630 <_malloc_r+0xa8>
 8008610:	6822      	ldr	r2, [r4, #0]
 8008612:	1b52      	subs	r2, r2, r5
 8008614:	d420      	bmi.n	8008658 <_malloc_r+0xd0>
 8008616:	2a0b      	cmp	r2, #11
 8008618:	d917      	bls.n	800864a <_malloc_r+0xc2>
 800861a:	1961      	adds	r1, r4, r5
 800861c:	42a3      	cmp	r3, r4
 800861e:	6025      	str	r5, [r4, #0]
 8008620:	bf18      	it	ne
 8008622:	6059      	strne	r1, [r3, #4]
 8008624:	6863      	ldr	r3, [r4, #4]
 8008626:	bf08      	it	eq
 8008628:	f8c8 1000 	streq.w	r1, [r8]
 800862c:	5162      	str	r2, [r4, r5]
 800862e:	604b      	str	r3, [r1, #4]
 8008630:	4630      	mov	r0, r6
 8008632:	f000 f82f 	bl	8008694 <__malloc_unlock>
 8008636:	f104 000b 	add.w	r0, r4, #11
 800863a:	1d23      	adds	r3, r4, #4
 800863c:	f020 0007 	bic.w	r0, r0, #7
 8008640:	1ac2      	subs	r2, r0, r3
 8008642:	bf1c      	itt	ne
 8008644:	1a1b      	subne	r3, r3, r0
 8008646:	50a3      	strne	r3, [r4, r2]
 8008648:	e7af      	b.n	80085aa <_malloc_r+0x22>
 800864a:	6862      	ldr	r2, [r4, #4]
 800864c:	42a3      	cmp	r3, r4
 800864e:	bf0c      	ite	eq
 8008650:	f8c8 2000 	streq.w	r2, [r8]
 8008654:	605a      	strne	r2, [r3, #4]
 8008656:	e7eb      	b.n	8008630 <_malloc_r+0xa8>
 8008658:	4623      	mov	r3, r4
 800865a:	6864      	ldr	r4, [r4, #4]
 800865c:	e7ae      	b.n	80085bc <_malloc_r+0x34>
 800865e:	463c      	mov	r4, r7
 8008660:	687f      	ldr	r7, [r7, #4]
 8008662:	e7b6      	b.n	80085d2 <_malloc_r+0x4a>
 8008664:	461a      	mov	r2, r3
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	42a3      	cmp	r3, r4
 800866a:	d1fb      	bne.n	8008664 <_malloc_r+0xdc>
 800866c:	2300      	movs	r3, #0
 800866e:	6053      	str	r3, [r2, #4]
 8008670:	e7de      	b.n	8008630 <_malloc_r+0xa8>
 8008672:	230c      	movs	r3, #12
 8008674:	6033      	str	r3, [r6, #0]
 8008676:	4630      	mov	r0, r6
 8008678:	f000 f80c 	bl	8008694 <__malloc_unlock>
 800867c:	e794      	b.n	80085a8 <_malloc_r+0x20>
 800867e:	6005      	str	r5, [r0, #0]
 8008680:	e7d6      	b.n	8008630 <_malloc_r+0xa8>
 8008682:	bf00      	nop
 8008684:	20004e20 	.word	0x20004e20

08008688 <__malloc_lock>:
 8008688:	4801      	ldr	r0, [pc, #4]	@ (8008690 <__malloc_lock+0x8>)
 800868a:	f7ff b8a4 	b.w	80077d6 <__retarget_lock_acquire_recursive>
 800868e:	bf00      	nop
 8008690:	20004e18 	.word	0x20004e18

08008694 <__malloc_unlock>:
 8008694:	4801      	ldr	r0, [pc, #4]	@ (800869c <__malloc_unlock+0x8>)
 8008696:	f7ff b89f 	b.w	80077d8 <__retarget_lock_release_recursive>
 800869a:	bf00      	nop
 800869c:	20004e18 	.word	0x20004e18

080086a0 <_Balloc>:
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	69c6      	ldr	r6, [r0, #28]
 80086a4:	4604      	mov	r4, r0
 80086a6:	460d      	mov	r5, r1
 80086a8:	b976      	cbnz	r6, 80086c8 <_Balloc+0x28>
 80086aa:	2010      	movs	r0, #16
 80086ac:	f7ff ff42 	bl	8008534 <malloc>
 80086b0:	4602      	mov	r2, r0
 80086b2:	61e0      	str	r0, [r4, #28]
 80086b4:	b920      	cbnz	r0, 80086c0 <_Balloc+0x20>
 80086b6:	4b18      	ldr	r3, [pc, #96]	@ (8008718 <_Balloc+0x78>)
 80086b8:	4818      	ldr	r0, [pc, #96]	@ (800871c <_Balloc+0x7c>)
 80086ba:	216b      	movs	r1, #107	@ 0x6b
 80086bc:	f001 fd70 	bl	800a1a0 <__assert_func>
 80086c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086c4:	6006      	str	r6, [r0, #0]
 80086c6:	60c6      	str	r6, [r0, #12]
 80086c8:	69e6      	ldr	r6, [r4, #28]
 80086ca:	68f3      	ldr	r3, [r6, #12]
 80086cc:	b183      	cbz	r3, 80086f0 <_Balloc+0x50>
 80086ce:	69e3      	ldr	r3, [r4, #28]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086d6:	b9b8      	cbnz	r0, 8008708 <_Balloc+0x68>
 80086d8:	2101      	movs	r1, #1
 80086da:	fa01 f605 	lsl.w	r6, r1, r5
 80086de:	1d72      	adds	r2, r6, #5
 80086e0:	0092      	lsls	r2, r2, #2
 80086e2:	4620      	mov	r0, r4
 80086e4:	f001 fd7a 	bl	800a1dc <_calloc_r>
 80086e8:	b160      	cbz	r0, 8008704 <_Balloc+0x64>
 80086ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086ee:	e00e      	b.n	800870e <_Balloc+0x6e>
 80086f0:	2221      	movs	r2, #33	@ 0x21
 80086f2:	2104      	movs	r1, #4
 80086f4:	4620      	mov	r0, r4
 80086f6:	f001 fd71 	bl	800a1dc <_calloc_r>
 80086fa:	69e3      	ldr	r3, [r4, #28]
 80086fc:	60f0      	str	r0, [r6, #12]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e4      	bne.n	80086ce <_Balloc+0x2e>
 8008704:	2000      	movs	r0, #0
 8008706:	bd70      	pop	{r4, r5, r6, pc}
 8008708:	6802      	ldr	r2, [r0, #0]
 800870a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800870e:	2300      	movs	r3, #0
 8008710:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008714:	e7f7      	b.n	8008706 <_Balloc+0x66>
 8008716:	bf00      	nop
 8008718:	0800af96 	.word	0x0800af96
 800871c:	0800b016 	.word	0x0800b016

08008720 <_Bfree>:
 8008720:	b570      	push	{r4, r5, r6, lr}
 8008722:	69c6      	ldr	r6, [r0, #28]
 8008724:	4605      	mov	r5, r0
 8008726:	460c      	mov	r4, r1
 8008728:	b976      	cbnz	r6, 8008748 <_Bfree+0x28>
 800872a:	2010      	movs	r0, #16
 800872c:	f7ff ff02 	bl	8008534 <malloc>
 8008730:	4602      	mov	r2, r0
 8008732:	61e8      	str	r0, [r5, #28]
 8008734:	b920      	cbnz	r0, 8008740 <_Bfree+0x20>
 8008736:	4b09      	ldr	r3, [pc, #36]	@ (800875c <_Bfree+0x3c>)
 8008738:	4809      	ldr	r0, [pc, #36]	@ (8008760 <_Bfree+0x40>)
 800873a:	218f      	movs	r1, #143	@ 0x8f
 800873c:	f001 fd30 	bl	800a1a0 <__assert_func>
 8008740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008744:	6006      	str	r6, [r0, #0]
 8008746:	60c6      	str	r6, [r0, #12]
 8008748:	b13c      	cbz	r4, 800875a <_Bfree+0x3a>
 800874a:	69eb      	ldr	r3, [r5, #28]
 800874c:	6862      	ldr	r2, [r4, #4]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008754:	6021      	str	r1, [r4, #0]
 8008756:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800875a:	bd70      	pop	{r4, r5, r6, pc}
 800875c:	0800af96 	.word	0x0800af96
 8008760:	0800b016 	.word	0x0800b016

08008764 <__multadd>:
 8008764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008768:	690d      	ldr	r5, [r1, #16]
 800876a:	4607      	mov	r7, r0
 800876c:	460c      	mov	r4, r1
 800876e:	461e      	mov	r6, r3
 8008770:	f101 0c14 	add.w	ip, r1, #20
 8008774:	2000      	movs	r0, #0
 8008776:	f8dc 3000 	ldr.w	r3, [ip]
 800877a:	b299      	uxth	r1, r3
 800877c:	fb02 6101 	mla	r1, r2, r1, r6
 8008780:	0c1e      	lsrs	r6, r3, #16
 8008782:	0c0b      	lsrs	r3, r1, #16
 8008784:	fb02 3306 	mla	r3, r2, r6, r3
 8008788:	b289      	uxth	r1, r1
 800878a:	3001      	adds	r0, #1
 800878c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008790:	4285      	cmp	r5, r0
 8008792:	f84c 1b04 	str.w	r1, [ip], #4
 8008796:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800879a:	dcec      	bgt.n	8008776 <__multadd+0x12>
 800879c:	b30e      	cbz	r6, 80087e2 <__multadd+0x7e>
 800879e:	68a3      	ldr	r3, [r4, #8]
 80087a0:	42ab      	cmp	r3, r5
 80087a2:	dc19      	bgt.n	80087d8 <__multadd+0x74>
 80087a4:	6861      	ldr	r1, [r4, #4]
 80087a6:	4638      	mov	r0, r7
 80087a8:	3101      	adds	r1, #1
 80087aa:	f7ff ff79 	bl	80086a0 <_Balloc>
 80087ae:	4680      	mov	r8, r0
 80087b0:	b928      	cbnz	r0, 80087be <__multadd+0x5a>
 80087b2:	4602      	mov	r2, r0
 80087b4:	4b0c      	ldr	r3, [pc, #48]	@ (80087e8 <__multadd+0x84>)
 80087b6:	480d      	ldr	r0, [pc, #52]	@ (80087ec <__multadd+0x88>)
 80087b8:	21ba      	movs	r1, #186	@ 0xba
 80087ba:	f001 fcf1 	bl	800a1a0 <__assert_func>
 80087be:	6922      	ldr	r2, [r4, #16]
 80087c0:	3202      	adds	r2, #2
 80087c2:	f104 010c 	add.w	r1, r4, #12
 80087c6:	0092      	lsls	r2, r2, #2
 80087c8:	300c      	adds	r0, #12
 80087ca:	f7ff f806 	bl	80077da <memcpy>
 80087ce:	4621      	mov	r1, r4
 80087d0:	4638      	mov	r0, r7
 80087d2:	f7ff ffa5 	bl	8008720 <_Bfree>
 80087d6:	4644      	mov	r4, r8
 80087d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087dc:	3501      	adds	r5, #1
 80087de:	615e      	str	r6, [r3, #20]
 80087e0:	6125      	str	r5, [r4, #16]
 80087e2:	4620      	mov	r0, r4
 80087e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e8:	0800b005 	.word	0x0800b005
 80087ec:	0800b016 	.word	0x0800b016

080087f0 <__s2b>:
 80087f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f4:	460c      	mov	r4, r1
 80087f6:	4615      	mov	r5, r2
 80087f8:	461f      	mov	r7, r3
 80087fa:	2209      	movs	r2, #9
 80087fc:	3308      	adds	r3, #8
 80087fe:	4606      	mov	r6, r0
 8008800:	fb93 f3f2 	sdiv	r3, r3, r2
 8008804:	2100      	movs	r1, #0
 8008806:	2201      	movs	r2, #1
 8008808:	429a      	cmp	r2, r3
 800880a:	db09      	blt.n	8008820 <__s2b+0x30>
 800880c:	4630      	mov	r0, r6
 800880e:	f7ff ff47 	bl	80086a0 <_Balloc>
 8008812:	b940      	cbnz	r0, 8008826 <__s2b+0x36>
 8008814:	4602      	mov	r2, r0
 8008816:	4b19      	ldr	r3, [pc, #100]	@ (800887c <__s2b+0x8c>)
 8008818:	4819      	ldr	r0, [pc, #100]	@ (8008880 <__s2b+0x90>)
 800881a:	21d3      	movs	r1, #211	@ 0xd3
 800881c:	f001 fcc0 	bl	800a1a0 <__assert_func>
 8008820:	0052      	lsls	r2, r2, #1
 8008822:	3101      	adds	r1, #1
 8008824:	e7f0      	b.n	8008808 <__s2b+0x18>
 8008826:	9b08      	ldr	r3, [sp, #32]
 8008828:	6143      	str	r3, [r0, #20]
 800882a:	2d09      	cmp	r5, #9
 800882c:	f04f 0301 	mov.w	r3, #1
 8008830:	6103      	str	r3, [r0, #16]
 8008832:	dd16      	ble.n	8008862 <__s2b+0x72>
 8008834:	f104 0909 	add.w	r9, r4, #9
 8008838:	46c8      	mov	r8, r9
 800883a:	442c      	add	r4, r5
 800883c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008840:	4601      	mov	r1, r0
 8008842:	3b30      	subs	r3, #48	@ 0x30
 8008844:	220a      	movs	r2, #10
 8008846:	4630      	mov	r0, r6
 8008848:	f7ff ff8c 	bl	8008764 <__multadd>
 800884c:	45a0      	cmp	r8, r4
 800884e:	d1f5      	bne.n	800883c <__s2b+0x4c>
 8008850:	f1a5 0408 	sub.w	r4, r5, #8
 8008854:	444c      	add	r4, r9
 8008856:	1b2d      	subs	r5, r5, r4
 8008858:	1963      	adds	r3, r4, r5
 800885a:	42bb      	cmp	r3, r7
 800885c:	db04      	blt.n	8008868 <__s2b+0x78>
 800885e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008862:	340a      	adds	r4, #10
 8008864:	2509      	movs	r5, #9
 8008866:	e7f6      	b.n	8008856 <__s2b+0x66>
 8008868:	f814 3b01 	ldrb.w	r3, [r4], #1
 800886c:	4601      	mov	r1, r0
 800886e:	3b30      	subs	r3, #48	@ 0x30
 8008870:	220a      	movs	r2, #10
 8008872:	4630      	mov	r0, r6
 8008874:	f7ff ff76 	bl	8008764 <__multadd>
 8008878:	e7ee      	b.n	8008858 <__s2b+0x68>
 800887a:	bf00      	nop
 800887c:	0800b005 	.word	0x0800b005
 8008880:	0800b016 	.word	0x0800b016

08008884 <__hi0bits>:
 8008884:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008888:	4603      	mov	r3, r0
 800888a:	bf36      	itet	cc
 800888c:	0403      	lslcc	r3, r0, #16
 800888e:	2000      	movcs	r0, #0
 8008890:	2010      	movcc	r0, #16
 8008892:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008896:	bf3c      	itt	cc
 8008898:	021b      	lslcc	r3, r3, #8
 800889a:	3008      	addcc	r0, #8
 800889c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088a0:	bf3c      	itt	cc
 80088a2:	011b      	lslcc	r3, r3, #4
 80088a4:	3004      	addcc	r0, #4
 80088a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088aa:	bf3c      	itt	cc
 80088ac:	009b      	lslcc	r3, r3, #2
 80088ae:	3002      	addcc	r0, #2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	db05      	blt.n	80088c0 <__hi0bits+0x3c>
 80088b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80088b8:	f100 0001 	add.w	r0, r0, #1
 80088bc:	bf08      	it	eq
 80088be:	2020      	moveq	r0, #32
 80088c0:	4770      	bx	lr

080088c2 <__lo0bits>:
 80088c2:	6803      	ldr	r3, [r0, #0]
 80088c4:	4602      	mov	r2, r0
 80088c6:	f013 0007 	ands.w	r0, r3, #7
 80088ca:	d00b      	beq.n	80088e4 <__lo0bits+0x22>
 80088cc:	07d9      	lsls	r1, r3, #31
 80088ce:	d421      	bmi.n	8008914 <__lo0bits+0x52>
 80088d0:	0798      	lsls	r0, r3, #30
 80088d2:	bf49      	itett	mi
 80088d4:	085b      	lsrmi	r3, r3, #1
 80088d6:	089b      	lsrpl	r3, r3, #2
 80088d8:	2001      	movmi	r0, #1
 80088da:	6013      	strmi	r3, [r2, #0]
 80088dc:	bf5c      	itt	pl
 80088de:	6013      	strpl	r3, [r2, #0]
 80088e0:	2002      	movpl	r0, #2
 80088e2:	4770      	bx	lr
 80088e4:	b299      	uxth	r1, r3
 80088e6:	b909      	cbnz	r1, 80088ec <__lo0bits+0x2a>
 80088e8:	0c1b      	lsrs	r3, r3, #16
 80088ea:	2010      	movs	r0, #16
 80088ec:	b2d9      	uxtb	r1, r3
 80088ee:	b909      	cbnz	r1, 80088f4 <__lo0bits+0x32>
 80088f0:	3008      	adds	r0, #8
 80088f2:	0a1b      	lsrs	r3, r3, #8
 80088f4:	0719      	lsls	r1, r3, #28
 80088f6:	bf04      	itt	eq
 80088f8:	091b      	lsreq	r3, r3, #4
 80088fa:	3004      	addeq	r0, #4
 80088fc:	0799      	lsls	r1, r3, #30
 80088fe:	bf04      	itt	eq
 8008900:	089b      	lsreq	r3, r3, #2
 8008902:	3002      	addeq	r0, #2
 8008904:	07d9      	lsls	r1, r3, #31
 8008906:	d403      	bmi.n	8008910 <__lo0bits+0x4e>
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	f100 0001 	add.w	r0, r0, #1
 800890e:	d003      	beq.n	8008918 <__lo0bits+0x56>
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	4770      	bx	lr
 8008914:	2000      	movs	r0, #0
 8008916:	4770      	bx	lr
 8008918:	2020      	movs	r0, #32
 800891a:	4770      	bx	lr

0800891c <__i2b>:
 800891c:	b510      	push	{r4, lr}
 800891e:	460c      	mov	r4, r1
 8008920:	2101      	movs	r1, #1
 8008922:	f7ff febd 	bl	80086a0 <_Balloc>
 8008926:	4602      	mov	r2, r0
 8008928:	b928      	cbnz	r0, 8008936 <__i2b+0x1a>
 800892a:	4b05      	ldr	r3, [pc, #20]	@ (8008940 <__i2b+0x24>)
 800892c:	4805      	ldr	r0, [pc, #20]	@ (8008944 <__i2b+0x28>)
 800892e:	f240 1145 	movw	r1, #325	@ 0x145
 8008932:	f001 fc35 	bl	800a1a0 <__assert_func>
 8008936:	2301      	movs	r3, #1
 8008938:	6144      	str	r4, [r0, #20]
 800893a:	6103      	str	r3, [r0, #16]
 800893c:	bd10      	pop	{r4, pc}
 800893e:	bf00      	nop
 8008940:	0800b005 	.word	0x0800b005
 8008944:	0800b016 	.word	0x0800b016

08008948 <__multiply>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	4614      	mov	r4, r2
 800894e:	690a      	ldr	r2, [r1, #16]
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	429a      	cmp	r2, r3
 8008954:	bfa8      	it	ge
 8008956:	4623      	movge	r3, r4
 8008958:	460f      	mov	r7, r1
 800895a:	bfa4      	itt	ge
 800895c:	460c      	movge	r4, r1
 800895e:	461f      	movge	r7, r3
 8008960:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008964:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008968:	68a3      	ldr	r3, [r4, #8]
 800896a:	6861      	ldr	r1, [r4, #4]
 800896c:	eb0a 0609 	add.w	r6, sl, r9
 8008970:	42b3      	cmp	r3, r6
 8008972:	b085      	sub	sp, #20
 8008974:	bfb8      	it	lt
 8008976:	3101      	addlt	r1, #1
 8008978:	f7ff fe92 	bl	80086a0 <_Balloc>
 800897c:	b930      	cbnz	r0, 800898c <__multiply+0x44>
 800897e:	4602      	mov	r2, r0
 8008980:	4b44      	ldr	r3, [pc, #272]	@ (8008a94 <__multiply+0x14c>)
 8008982:	4845      	ldr	r0, [pc, #276]	@ (8008a98 <__multiply+0x150>)
 8008984:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008988:	f001 fc0a 	bl	800a1a0 <__assert_func>
 800898c:	f100 0514 	add.w	r5, r0, #20
 8008990:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008994:	462b      	mov	r3, r5
 8008996:	2200      	movs	r2, #0
 8008998:	4543      	cmp	r3, r8
 800899a:	d321      	bcc.n	80089e0 <__multiply+0x98>
 800899c:	f107 0114 	add.w	r1, r7, #20
 80089a0:	f104 0214 	add.w	r2, r4, #20
 80089a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80089a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80089ac:	9302      	str	r3, [sp, #8]
 80089ae:	1b13      	subs	r3, r2, r4
 80089b0:	3b15      	subs	r3, #21
 80089b2:	f023 0303 	bic.w	r3, r3, #3
 80089b6:	3304      	adds	r3, #4
 80089b8:	f104 0715 	add.w	r7, r4, #21
 80089bc:	42ba      	cmp	r2, r7
 80089be:	bf38      	it	cc
 80089c0:	2304      	movcc	r3, #4
 80089c2:	9301      	str	r3, [sp, #4]
 80089c4:	9b02      	ldr	r3, [sp, #8]
 80089c6:	9103      	str	r1, [sp, #12]
 80089c8:	428b      	cmp	r3, r1
 80089ca:	d80c      	bhi.n	80089e6 <__multiply+0x9e>
 80089cc:	2e00      	cmp	r6, #0
 80089ce:	dd03      	ble.n	80089d8 <__multiply+0x90>
 80089d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d05b      	beq.n	8008a90 <__multiply+0x148>
 80089d8:	6106      	str	r6, [r0, #16]
 80089da:	b005      	add	sp, #20
 80089dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e0:	f843 2b04 	str.w	r2, [r3], #4
 80089e4:	e7d8      	b.n	8008998 <__multiply+0x50>
 80089e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80089ea:	f1ba 0f00 	cmp.w	sl, #0
 80089ee:	d024      	beq.n	8008a3a <__multiply+0xf2>
 80089f0:	f104 0e14 	add.w	lr, r4, #20
 80089f4:	46a9      	mov	r9, r5
 80089f6:	f04f 0c00 	mov.w	ip, #0
 80089fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089fe:	f8d9 3000 	ldr.w	r3, [r9]
 8008a02:	fa1f fb87 	uxth.w	fp, r7
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	fb0a 330b 	mla	r3, sl, fp, r3
 8008a0c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008a10:	f8d9 7000 	ldr.w	r7, [r9]
 8008a14:	4463      	add	r3, ip
 8008a16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008a1a:	fb0a c70b 	mla	r7, sl, fp, ip
 8008a1e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a28:	4572      	cmp	r2, lr
 8008a2a:	f849 3b04 	str.w	r3, [r9], #4
 8008a2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008a32:	d8e2      	bhi.n	80089fa <__multiply+0xb2>
 8008a34:	9b01      	ldr	r3, [sp, #4]
 8008a36:	f845 c003 	str.w	ip, [r5, r3]
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008a40:	3104      	adds	r1, #4
 8008a42:	f1b9 0f00 	cmp.w	r9, #0
 8008a46:	d021      	beq.n	8008a8c <__multiply+0x144>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	f104 0c14 	add.w	ip, r4, #20
 8008a4e:	46ae      	mov	lr, r5
 8008a50:	f04f 0a00 	mov.w	sl, #0
 8008a54:	f8bc b000 	ldrh.w	fp, [ip]
 8008a58:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008a5c:	fb09 770b 	mla	r7, r9, fp, r7
 8008a60:	4457      	add	r7, sl
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a68:	f84e 3b04 	str.w	r3, [lr], #4
 8008a6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a74:	f8be 3000 	ldrh.w	r3, [lr]
 8008a78:	fb09 330a 	mla	r3, r9, sl, r3
 8008a7c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008a80:	4562      	cmp	r2, ip
 8008a82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a86:	d8e5      	bhi.n	8008a54 <__multiply+0x10c>
 8008a88:	9f01      	ldr	r7, [sp, #4]
 8008a8a:	51eb      	str	r3, [r5, r7]
 8008a8c:	3504      	adds	r5, #4
 8008a8e:	e799      	b.n	80089c4 <__multiply+0x7c>
 8008a90:	3e01      	subs	r6, #1
 8008a92:	e79b      	b.n	80089cc <__multiply+0x84>
 8008a94:	0800b005 	.word	0x0800b005
 8008a98:	0800b016 	.word	0x0800b016

08008a9c <__pow5mult>:
 8008a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa0:	4615      	mov	r5, r2
 8008aa2:	f012 0203 	ands.w	r2, r2, #3
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	460e      	mov	r6, r1
 8008aaa:	d007      	beq.n	8008abc <__pow5mult+0x20>
 8008aac:	4c25      	ldr	r4, [pc, #148]	@ (8008b44 <__pow5mult+0xa8>)
 8008aae:	3a01      	subs	r2, #1
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ab6:	f7ff fe55 	bl	8008764 <__multadd>
 8008aba:	4606      	mov	r6, r0
 8008abc:	10ad      	asrs	r5, r5, #2
 8008abe:	d03d      	beq.n	8008b3c <__pow5mult+0xa0>
 8008ac0:	69fc      	ldr	r4, [r7, #28]
 8008ac2:	b97c      	cbnz	r4, 8008ae4 <__pow5mult+0x48>
 8008ac4:	2010      	movs	r0, #16
 8008ac6:	f7ff fd35 	bl	8008534 <malloc>
 8008aca:	4602      	mov	r2, r0
 8008acc:	61f8      	str	r0, [r7, #28]
 8008ace:	b928      	cbnz	r0, 8008adc <__pow5mult+0x40>
 8008ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b48 <__pow5mult+0xac>)
 8008ad2:	481e      	ldr	r0, [pc, #120]	@ (8008b4c <__pow5mult+0xb0>)
 8008ad4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ad8:	f001 fb62 	bl	800a1a0 <__assert_func>
 8008adc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ae0:	6004      	str	r4, [r0, #0]
 8008ae2:	60c4      	str	r4, [r0, #12]
 8008ae4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ae8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008aec:	b94c      	cbnz	r4, 8008b02 <__pow5mult+0x66>
 8008aee:	f240 2171 	movw	r1, #625	@ 0x271
 8008af2:	4638      	mov	r0, r7
 8008af4:	f7ff ff12 	bl	800891c <__i2b>
 8008af8:	2300      	movs	r3, #0
 8008afa:	f8c8 0008 	str.w	r0, [r8, #8]
 8008afe:	4604      	mov	r4, r0
 8008b00:	6003      	str	r3, [r0, #0]
 8008b02:	f04f 0900 	mov.w	r9, #0
 8008b06:	07eb      	lsls	r3, r5, #31
 8008b08:	d50a      	bpl.n	8008b20 <__pow5mult+0x84>
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4622      	mov	r2, r4
 8008b0e:	4638      	mov	r0, r7
 8008b10:	f7ff ff1a 	bl	8008948 <__multiply>
 8008b14:	4631      	mov	r1, r6
 8008b16:	4680      	mov	r8, r0
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7ff fe01 	bl	8008720 <_Bfree>
 8008b1e:	4646      	mov	r6, r8
 8008b20:	106d      	asrs	r5, r5, #1
 8008b22:	d00b      	beq.n	8008b3c <__pow5mult+0xa0>
 8008b24:	6820      	ldr	r0, [r4, #0]
 8008b26:	b938      	cbnz	r0, 8008b38 <__pow5mult+0x9c>
 8008b28:	4622      	mov	r2, r4
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	f7ff ff0b 	bl	8008948 <__multiply>
 8008b32:	6020      	str	r0, [r4, #0]
 8008b34:	f8c0 9000 	str.w	r9, [r0]
 8008b38:	4604      	mov	r4, r0
 8008b3a:	e7e4      	b.n	8008b06 <__pow5mult+0x6a>
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b42:	bf00      	nop
 8008b44:	0800b070 	.word	0x0800b070
 8008b48:	0800af96 	.word	0x0800af96
 8008b4c:	0800b016 	.word	0x0800b016

08008b50 <__lshift>:
 8008b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b54:	460c      	mov	r4, r1
 8008b56:	6849      	ldr	r1, [r1, #4]
 8008b58:	6923      	ldr	r3, [r4, #16]
 8008b5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b5e:	68a3      	ldr	r3, [r4, #8]
 8008b60:	4607      	mov	r7, r0
 8008b62:	4691      	mov	r9, r2
 8008b64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b68:	f108 0601 	add.w	r6, r8, #1
 8008b6c:	42b3      	cmp	r3, r6
 8008b6e:	db0b      	blt.n	8008b88 <__lshift+0x38>
 8008b70:	4638      	mov	r0, r7
 8008b72:	f7ff fd95 	bl	80086a0 <_Balloc>
 8008b76:	4605      	mov	r5, r0
 8008b78:	b948      	cbnz	r0, 8008b8e <__lshift+0x3e>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	4b28      	ldr	r3, [pc, #160]	@ (8008c20 <__lshift+0xd0>)
 8008b7e:	4829      	ldr	r0, [pc, #164]	@ (8008c24 <__lshift+0xd4>)
 8008b80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008b84:	f001 fb0c 	bl	800a1a0 <__assert_func>
 8008b88:	3101      	adds	r1, #1
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	e7ee      	b.n	8008b6c <__lshift+0x1c>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f100 0114 	add.w	r1, r0, #20
 8008b94:	f100 0210 	add.w	r2, r0, #16
 8008b98:	4618      	mov	r0, r3
 8008b9a:	4553      	cmp	r3, sl
 8008b9c:	db33      	blt.n	8008c06 <__lshift+0xb6>
 8008b9e:	6920      	ldr	r0, [r4, #16]
 8008ba0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ba4:	f104 0314 	add.w	r3, r4, #20
 8008ba8:	f019 091f 	ands.w	r9, r9, #31
 8008bac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bb4:	d02b      	beq.n	8008c0e <__lshift+0xbe>
 8008bb6:	f1c9 0e20 	rsb	lr, r9, #32
 8008bba:	468a      	mov	sl, r1
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	6818      	ldr	r0, [r3, #0]
 8008bc0:	fa00 f009 	lsl.w	r0, r0, r9
 8008bc4:	4310      	orrs	r0, r2
 8008bc6:	f84a 0b04 	str.w	r0, [sl], #4
 8008bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bce:	459c      	cmp	ip, r3
 8008bd0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008bd4:	d8f3      	bhi.n	8008bbe <__lshift+0x6e>
 8008bd6:	ebac 0304 	sub.w	r3, ip, r4
 8008bda:	3b15      	subs	r3, #21
 8008bdc:	f023 0303 	bic.w	r3, r3, #3
 8008be0:	3304      	adds	r3, #4
 8008be2:	f104 0015 	add.w	r0, r4, #21
 8008be6:	4584      	cmp	ip, r0
 8008be8:	bf38      	it	cc
 8008bea:	2304      	movcc	r3, #4
 8008bec:	50ca      	str	r2, [r1, r3]
 8008bee:	b10a      	cbz	r2, 8008bf4 <__lshift+0xa4>
 8008bf0:	f108 0602 	add.w	r6, r8, #2
 8008bf4:	3e01      	subs	r6, #1
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	612e      	str	r6, [r5, #16]
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	f7ff fd90 	bl	8008720 <_Bfree>
 8008c00:	4628      	mov	r0, r5
 8008c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c06:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	e7c5      	b.n	8008b9a <__lshift+0x4a>
 8008c0e:	3904      	subs	r1, #4
 8008c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c14:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c18:	459c      	cmp	ip, r3
 8008c1a:	d8f9      	bhi.n	8008c10 <__lshift+0xc0>
 8008c1c:	e7ea      	b.n	8008bf4 <__lshift+0xa4>
 8008c1e:	bf00      	nop
 8008c20:	0800b005 	.word	0x0800b005
 8008c24:	0800b016 	.word	0x0800b016

08008c28 <__mcmp>:
 8008c28:	690a      	ldr	r2, [r1, #16]
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	6900      	ldr	r0, [r0, #16]
 8008c2e:	1a80      	subs	r0, r0, r2
 8008c30:	b530      	push	{r4, r5, lr}
 8008c32:	d10e      	bne.n	8008c52 <__mcmp+0x2a>
 8008c34:	3314      	adds	r3, #20
 8008c36:	3114      	adds	r1, #20
 8008c38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c48:	4295      	cmp	r5, r2
 8008c4a:	d003      	beq.n	8008c54 <__mcmp+0x2c>
 8008c4c:	d205      	bcs.n	8008c5a <__mcmp+0x32>
 8008c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c52:	bd30      	pop	{r4, r5, pc}
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	d3f3      	bcc.n	8008c40 <__mcmp+0x18>
 8008c58:	e7fb      	b.n	8008c52 <__mcmp+0x2a>
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	e7f9      	b.n	8008c52 <__mcmp+0x2a>
	...

08008c60 <__mdiff>:
 8008c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	4689      	mov	r9, r1
 8008c66:	4606      	mov	r6, r0
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4648      	mov	r0, r9
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	f7ff ffdb 	bl	8008c28 <__mcmp>
 8008c72:	1e05      	subs	r5, r0, #0
 8008c74:	d112      	bne.n	8008c9c <__mdiff+0x3c>
 8008c76:	4629      	mov	r1, r5
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f7ff fd11 	bl	80086a0 <_Balloc>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	b928      	cbnz	r0, 8008c8e <__mdiff+0x2e>
 8008c82:	4b3f      	ldr	r3, [pc, #252]	@ (8008d80 <__mdiff+0x120>)
 8008c84:	f240 2137 	movw	r1, #567	@ 0x237
 8008c88:	483e      	ldr	r0, [pc, #248]	@ (8008d84 <__mdiff+0x124>)
 8008c8a:	f001 fa89 	bl	800a1a0 <__assert_func>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c94:	4610      	mov	r0, r2
 8008c96:	b003      	add	sp, #12
 8008c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9c:	bfbc      	itt	lt
 8008c9e:	464b      	movlt	r3, r9
 8008ca0:	46a1      	movlt	r9, r4
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ca8:	bfba      	itte	lt
 8008caa:	461c      	movlt	r4, r3
 8008cac:	2501      	movlt	r5, #1
 8008cae:	2500      	movge	r5, #0
 8008cb0:	f7ff fcf6 	bl	80086a0 <_Balloc>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	b918      	cbnz	r0, 8008cc0 <__mdiff+0x60>
 8008cb8:	4b31      	ldr	r3, [pc, #196]	@ (8008d80 <__mdiff+0x120>)
 8008cba:	f240 2145 	movw	r1, #581	@ 0x245
 8008cbe:	e7e3      	b.n	8008c88 <__mdiff+0x28>
 8008cc0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008cc4:	6926      	ldr	r6, [r4, #16]
 8008cc6:	60c5      	str	r5, [r0, #12]
 8008cc8:	f109 0310 	add.w	r3, r9, #16
 8008ccc:	f109 0514 	add.w	r5, r9, #20
 8008cd0:	f104 0e14 	add.w	lr, r4, #20
 8008cd4:	f100 0b14 	add.w	fp, r0, #20
 8008cd8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008cdc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	46d9      	mov	r9, fp
 8008ce4:	f04f 0c00 	mov.w	ip, #0
 8008ce8:	9b01      	ldr	r3, [sp, #4]
 8008cea:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008cee:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	fa1f f38a 	uxth.w	r3, sl
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	b283      	uxth	r3, r0
 8008cfc:	1acb      	subs	r3, r1, r3
 8008cfe:	0c00      	lsrs	r0, r0, #16
 8008d00:	4463      	add	r3, ip
 8008d02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008d06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008d10:	4576      	cmp	r6, lr
 8008d12:	f849 3b04 	str.w	r3, [r9], #4
 8008d16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d1a:	d8e5      	bhi.n	8008ce8 <__mdiff+0x88>
 8008d1c:	1b33      	subs	r3, r6, r4
 8008d1e:	3b15      	subs	r3, #21
 8008d20:	f023 0303 	bic.w	r3, r3, #3
 8008d24:	3415      	adds	r4, #21
 8008d26:	3304      	adds	r3, #4
 8008d28:	42a6      	cmp	r6, r4
 8008d2a:	bf38      	it	cc
 8008d2c:	2304      	movcc	r3, #4
 8008d2e:	441d      	add	r5, r3
 8008d30:	445b      	add	r3, fp
 8008d32:	461e      	mov	r6, r3
 8008d34:	462c      	mov	r4, r5
 8008d36:	4544      	cmp	r4, r8
 8008d38:	d30e      	bcc.n	8008d58 <__mdiff+0xf8>
 8008d3a:	f108 0103 	add.w	r1, r8, #3
 8008d3e:	1b49      	subs	r1, r1, r5
 8008d40:	f021 0103 	bic.w	r1, r1, #3
 8008d44:	3d03      	subs	r5, #3
 8008d46:	45a8      	cmp	r8, r5
 8008d48:	bf38      	it	cc
 8008d4a:	2100      	movcc	r1, #0
 8008d4c:	440b      	add	r3, r1
 8008d4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d52:	b191      	cbz	r1, 8008d7a <__mdiff+0x11a>
 8008d54:	6117      	str	r7, [r2, #16]
 8008d56:	e79d      	b.n	8008c94 <__mdiff+0x34>
 8008d58:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d5c:	46e6      	mov	lr, ip
 8008d5e:	0c08      	lsrs	r0, r1, #16
 8008d60:	fa1c fc81 	uxtah	ip, ip, r1
 8008d64:	4471      	add	r1, lr
 8008d66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d6a:	b289      	uxth	r1, r1
 8008d6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d70:	f846 1b04 	str.w	r1, [r6], #4
 8008d74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d78:	e7dd      	b.n	8008d36 <__mdiff+0xd6>
 8008d7a:	3f01      	subs	r7, #1
 8008d7c:	e7e7      	b.n	8008d4e <__mdiff+0xee>
 8008d7e:	bf00      	nop
 8008d80:	0800b005 	.word	0x0800b005
 8008d84:	0800b016 	.word	0x0800b016

08008d88 <__ulp>:
 8008d88:	b082      	sub	sp, #8
 8008d8a:	ed8d 0b00 	vstr	d0, [sp]
 8008d8e:	9a01      	ldr	r2, [sp, #4]
 8008d90:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd0 <__ulp+0x48>)
 8008d92:	4013      	ands	r3, r2
 8008d94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	dc08      	bgt.n	8008dae <__ulp+0x26>
 8008d9c:	425b      	negs	r3, r3
 8008d9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008da2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008da6:	da04      	bge.n	8008db2 <__ulp+0x2a>
 8008da8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008dac:	4113      	asrs	r3, r2
 8008dae:	2200      	movs	r2, #0
 8008db0:	e008      	b.n	8008dc4 <__ulp+0x3c>
 8008db2:	f1a2 0314 	sub.w	r3, r2, #20
 8008db6:	2b1e      	cmp	r3, #30
 8008db8:	bfda      	itte	le
 8008dba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008dbe:	40da      	lsrle	r2, r3
 8008dc0:	2201      	movgt	r2, #1
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	ec41 0b10 	vmov	d0, r0, r1
 8008dcc:	b002      	add	sp, #8
 8008dce:	4770      	bx	lr
 8008dd0:	7ff00000 	.word	0x7ff00000

08008dd4 <__b2d>:
 8008dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd8:	6906      	ldr	r6, [r0, #16]
 8008dda:	f100 0814 	add.w	r8, r0, #20
 8008dde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008de2:	1f37      	subs	r7, r6, #4
 8008de4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008de8:	4610      	mov	r0, r2
 8008dea:	f7ff fd4b 	bl	8008884 <__hi0bits>
 8008dee:	f1c0 0320 	rsb	r3, r0, #32
 8008df2:	280a      	cmp	r0, #10
 8008df4:	600b      	str	r3, [r1, #0]
 8008df6:	491b      	ldr	r1, [pc, #108]	@ (8008e64 <__b2d+0x90>)
 8008df8:	dc15      	bgt.n	8008e26 <__b2d+0x52>
 8008dfa:	f1c0 0c0b 	rsb	ip, r0, #11
 8008dfe:	fa22 f30c 	lsr.w	r3, r2, ip
 8008e02:	45b8      	cmp	r8, r7
 8008e04:	ea43 0501 	orr.w	r5, r3, r1
 8008e08:	bf34      	ite	cc
 8008e0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e0e:	2300      	movcs	r3, #0
 8008e10:	3015      	adds	r0, #21
 8008e12:	fa02 f000 	lsl.w	r0, r2, r0
 8008e16:	fa23 f30c 	lsr.w	r3, r3, ip
 8008e1a:	4303      	orrs	r3, r0
 8008e1c:	461c      	mov	r4, r3
 8008e1e:	ec45 4b10 	vmov	d0, r4, r5
 8008e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e26:	45b8      	cmp	r8, r7
 8008e28:	bf3a      	itte	cc
 8008e2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e2e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008e32:	2300      	movcs	r3, #0
 8008e34:	380b      	subs	r0, #11
 8008e36:	d012      	beq.n	8008e5e <__b2d+0x8a>
 8008e38:	f1c0 0120 	rsb	r1, r0, #32
 8008e3c:	fa23 f401 	lsr.w	r4, r3, r1
 8008e40:	4082      	lsls	r2, r0
 8008e42:	4322      	orrs	r2, r4
 8008e44:	4547      	cmp	r7, r8
 8008e46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008e4a:	bf8c      	ite	hi
 8008e4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008e50:	2200      	movls	r2, #0
 8008e52:	4083      	lsls	r3, r0
 8008e54:	40ca      	lsrs	r2, r1
 8008e56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	e7de      	b.n	8008e1c <__b2d+0x48>
 8008e5e:	ea42 0501 	orr.w	r5, r2, r1
 8008e62:	e7db      	b.n	8008e1c <__b2d+0x48>
 8008e64:	3ff00000 	.word	0x3ff00000

08008e68 <__d2b>:
 8008e68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e6c:	460f      	mov	r7, r1
 8008e6e:	2101      	movs	r1, #1
 8008e70:	ec59 8b10 	vmov	r8, r9, d0
 8008e74:	4616      	mov	r6, r2
 8008e76:	f7ff fc13 	bl	80086a0 <_Balloc>
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	b930      	cbnz	r0, 8008e8c <__d2b+0x24>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	4b23      	ldr	r3, [pc, #140]	@ (8008f10 <__d2b+0xa8>)
 8008e82:	4824      	ldr	r0, [pc, #144]	@ (8008f14 <__d2b+0xac>)
 8008e84:	f240 310f 	movw	r1, #783	@ 0x30f
 8008e88:	f001 f98a 	bl	800a1a0 <__assert_func>
 8008e8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e94:	b10d      	cbz	r5, 8008e9a <__d2b+0x32>
 8008e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e9a:	9301      	str	r3, [sp, #4]
 8008e9c:	f1b8 0300 	subs.w	r3, r8, #0
 8008ea0:	d023      	beq.n	8008eea <__d2b+0x82>
 8008ea2:	4668      	mov	r0, sp
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	f7ff fd0c 	bl	80088c2 <__lo0bits>
 8008eaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008eae:	b1d0      	cbz	r0, 8008ee6 <__d2b+0x7e>
 8008eb0:	f1c0 0320 	rsb	r3, r0, #32
 8008eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb8:	430b      	orrs	r3, r1
 8008eba:	40c2      	lsrs	r2, r0
 8008ebc:	6163      	str	r3, [r4, #20]
 8008ebe:	9201      	str	r2, [sp, #4]
 8008ec0:	9b01      	ldr	r3, [sp, #4]
 8008ec2:	61a3      	str	r3, [r4, #24]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bf0c      	ite	eq
 8008ec8:	2201      	moveq	r2, #1
 8008eca:	2202      	movne	r2, #2
 8008ecc:	6122      	str	r2, [r4, #16]
 8008ece:	b1a5      	cbz	r5, 8008efa <__d2b+0x92>
 8008ed0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ed4:	4405      	add	r5, r0
 8008ed6:	603d      	str	r5, [r7, #0]
 8008ed8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008edc:	6030      	str	r0, [r6, #0]
 8008ede:	4620      	mov	r0, r4
 8008ee0:	b003      	add	sp, #12
 8008ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ee6:	6161      	str	r1, [r4, #20]
 8008ee8:	e7ea      	b.n	8008ec0 <__d2b+0x58>
 8008eea:	a801      	add	r0, sp, #4
 8008eec:	f7ff fce9 	bl	80088c2 <__lo0bits>
 8008ef0:	9b01      	ldr	r3, [sp, #4]
 8008ef2:	6163      	str	r3, [r4, #20]
 8008ef4:	3020      	adds	r0, #32
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	e7e8      	b.n	8008ecc <__d2b+0x64>
 8008efa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008efe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f02:	6038      	str	r0, [r7, #0]
 8008f04:	6918      	ldr	r0, [r3, #16]
 8008f06:	f7ff fcbd 	bl	8008884 <__hi0bits>
 8008f0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f0e:	e7e5      	b.n	8008edc <__d2b+0x74>
 8008f10:	0800b005 	.word	0x0800b005
 8008f14:	0800b016 	.word	0x0800b016

08008f18 <__ratio>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	e9cd 1000 	strd	r1, r0, [sp]
 8008f22:	a902      	add	r1, sp, #8
 8008f24:	f7ff ff56 	bl	8008dd4 <__b2d>
 8008f28:	9800      	ldr	r0, [sp, #0]
 8008f2a:	a903      	add	r1, sp, #12
 8008f2c:	ec55 4b10 	vmov	r4, r5, d0
 8008f30:	f7ff ff50 	bl	8008dd4 <__b2d>
 8008f34:	9b01      	ldr	r3, [sp, #4]
 8008f36:	6919      	ldr	r1, [r3, #16]
 8008f38:	9b00      	ldr	r3, [sp, #0]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	1ac9      	subs	r1, r1, r3
 8008f3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008f42:	1a9b      	subs	r3, r3, r2
 8008f44:	ec5b ab10 	vmov	sl, fp, d0
 8008f48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	bfce      	itee	gt
 8008f50:	462a      	movgt	r2, r5
 8008f52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f56:	465a      	movle	r2, fp
 8008f58:	462f      	mov	r7, r5
 8008f5a:	46d9      	mov	r9, fp
 8008f5c:	bfcc      	ite	gt
 8008f5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f62:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008f66:	464b      	mov	r3, r9
 8008f68:	4652      	mov	r2, sl
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	f7f7 fc75 	bl	800085c <__aeabi_ddiv>
 8008f72:	ec41 0b10 	vmov	d0, r0, r1
 8008f76:	b005      	add	sp, #20
 8008f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f7c <__copybits>:
 8008f7c:	3901      	subs	r1, #1
 8008f7e:	b570      	push	{r4, r5, r6, lr}
 8008f80:	1149      	asrs	r1, r1, #5
 8008f82:	6914      	ldr	r4, [r2, #16]
 8008f84:	3101      	adds	r1, #1
 8008f86:	f102 0314 	add.w	r3, r2, #20
 8008f8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f92:	1f05      	subs	r5, r0, #4
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	d30c      	bcc.n	8008fb2 <__copybits+0x36>
 8008f98:	1aa3      	subs	r3, r4, r2
 8008f9a:	3b11      	subs	r3, #17
 8008f9c:	f023 0303 	bic.w	r3, r3, #3
 8008fa0:	3211      	adds	r2, #17
 8008fa2:	42a2      	cmp	r2, r4
 8008fa4:	bf88      	it	hi
 8008fa6:	2300      	movhi	r3, #0
 8008fa8:	4418      	add	r0, r3
 8008faa:	2300      	movs	r3, #0
 8008fac:	4288      	cmp	r0, r1
 8008fae:	d305      	bcc.n	8008fbc <__copybits+0x40>
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
 8008fb2:	f853 6b04 	ldr.w	r6, [r3], #4
 8008fb6:	f845 6f04 	str.w	r6, [r5, #4]!
 8008fba:	e7eb      	b.n	8008f94 <__copybits+0x18>
 8008fbc:	f840 3b04 	str.w	r3, [r0], #4
 8008fc0:	e7f4      	b.n	8008fac <__copybits+0x30>

08008fc2 <__any_on>:
 8008fc2:	f100 0214 	add.w	r2, r0, #20
 8008fc6:	6900      	ldr	r0, [r0, #16]
 8008fc8:	114b      	asrs	r3, r1, #5
 8008fca:	4298      	cmp	r0, r3
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	db11      	blt.n	8008ff4 <__any_on+0x32>
 8008fd0:	dd0a      	ble.n	8008fe8 <__any_on+0x26>
 8008fd2:	f011 011f 	ands.w	r1, r1, #31
 8008fd6:	d007      	beq.n	8008fe8 <__any_on+0x26>
 8008fd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008fdc:	fa24 f001 	lsr.w	r0, r4, r1
 8008fe0:	fa00 f101 	lsl.w	r1, r0, r1
 8008fe4:	428c      	cmp	r4, r1
 8008fe6:	d10b      	bne.n	8009000 <__any_on+0x3e>
 8008fe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d803      	bhi.n	8008ff8 <__any_on+0x36>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	bd10      	pop	{r4, pc}
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	e7f7      	b.n	8008fe8 <__any_on+0x26>
 8008ff8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	d0f5      	beq.n	8008fec <__any_on+0x2a>
 8009000:	2001      	movs	r0, #1
 8009002:	e7f6      	b.n	8008ff2 <__any_on+0x30>

08009004 <sulp>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	4604      	mov	r4, r0
 8009008:	460d      	mov	r5, r1
 800900a:	ec45 4b10 	vmov	d0, r4, r5
 800900e:	4616      	mov	r6, r2
 8009010:	f7ff feba 	bl	8008d88 <__ulp>
 8009014:	ec51 0b10 	vmov	r0, r1, d0
 8009018:	b17e      	cbz	r6, 800903a <sulp+0x36>
 800901a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800901e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009022:	2b00      	cmp	r3, #0
 8009024:	dd09      	ble.n	800903a <sulp+0x36>
 8009026:	051b      	lsls	r3, r3, #20
 8009028:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800902c:	2400      	movs	r4, #0
 800902e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009032:	4622      	mov	r2, r4
 8009034:	462b      	mov	r3, r5
 8009036:	f7f7 fae7 	bl	8000608 <__aeabi_dmul>
 800903a:	ec41 0b10 	vmov	d0, r0, r1
 800903e:	bd70      	pop	{r4, r5, r6, pc}

08009040 <_strtod_l>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	b09f      	sub	sp, #124	@ 0x7c
 8009046:	460c      	mov	r4, r1
 8009048:	9217      	str	r2, [sp, #92]	@ 0x5c
 800904a:	2200      	movs	r2, #0
 800904c:	921a      	str	r2, [sp, #104]	@ 0x68
 800904e:	9005      	str	r0, [sp, #20]
 8009050:	f04f 0a00 	mov.w	sl, #0
 8009054:	f04f 0b00 	mov.w	fp, #0
 8009058:	460a      	mov	r2, r1
 800905a:	9219      	str	r2, [sp, #100]	@ 0x64
 800905c:	7811      	ldrb	r1, [r2, #0]
 800905e:	292b      	cmp	r1, #43	@ 0x2b
 8009060:	d04a      	beq.n	80090f8 <_strtod_l+0xb8>
 8009062:	d838      	bhi.n	80090d6 <_strtod_l+0x96>
 8009064:	290d      	cmp	r1, #13
 8009066:	d832      	bhi.n	80090ce <_strtod_l+0x8e>
 8009068:	2908      	cmp	r1, #8
 800906a:	d832      	bhi.n	80090d2 <_strtod_l+0x92>
 800906c:	2900      	cmp	r1, #0
 800906e:	d03b      	beq.n	80090e8 <_strtod_l+0xa8>
 8009070:	2200      	movs	r2, #0
 8009072:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009074:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009076:	782a      	ldrb	r2, [r5, #0]
 8009078:	2a30      	cmp	r2, #48	@ 0x30
 800907a:	f040 80b3 	bne.w	80091e4 <_strtod_l+0x1a4>
 800907e:	786a      	ldrb	r2, [r5, #1]
 8009080:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009084:	2a58      	cmp	r2, #88	@ 0x58
 8009086:	d16e      	bne.n	8009166 <_strtod_l+0x126>
 8009088:	9302      	str	r3, [sp, #8]
 800908a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	4a8e      	ldr	r2, [pc, #568]	@ (80092cc <_strtod_l+0x28c>)
 8009094:	9805      	ldr	r0, [sp, #20]
 8009096:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009098:	a919      	add	r1, sp, #100	@ 0x64
 800909a:	f001 f91b 	bl	800a2d4 <__gethex>
 800909e:	f010 060f 	ands.w	r6, r0, #15
 80090a2:	4604      	mov	r4, r0
 80090a4:	d005      	beq.n	80090b2 <_strtod_l+0x72>
 80090a6:	2e06      	cmp	r6, #6
 80090a8:	d128      	bne.n	80090fc <_strtod_l+0xbc>
 80090aa:	3501      	adds	r5, #1
 80090ac:	2300      	movs	r3, #0
 80090ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80090b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f040 858e 	bne.w	8009bd6 <_strtod_l+0xb96>
 80090ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090bc:	b1cb      	cbz	r3, 80090f2 <_strtod_l+0xb2>
 80090be:	4652      	mov	r2, sl
 80090c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80090c4:	ec43 2b10 	vmov	d0, r2, r3
 80090c8:	b01f      	add	sp, #124	@ 0x7c
 80090ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ce:	2920      	cmp	r1, #32
 80090d0:	d1ce      	bne.n	8009070 <_strtod_l+0x30>
 80090d2:	3201      	adds	r2, #1
 80090d4:	e7c1      	b.n	800905a <_strtod_l+0x1a>
 80090d6:	292d      	cmp	r1, #45	@ 0x2d
 80090d8:	d1ca      	bne.n	8009070 <_strtod_l+0x30>
 80090da:	2101      	movs	r1, #1
 80090dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80090de:	1c51      	adds	r1, r2, #1
 80090e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80090e2:	7852      	ldrb	r2, [r2, #1]
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	d1c5      	bne.n	8009074 <_strtod_l+0x34>
 80090e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f040 8570 	bne.w	8009bd2 <_strtod_l+0xb92>
 80090f2:	4652      	mov	r2, sl
 80090f4:	465b      	mov	r3, fp
 80090f6:	e7e5      	b.n	80090c4 <_strtod_l+0x84>
 80090f8:	2100      	movs	r1, #0
 80090fa:	e7ef      	b.n	80090dc <_strtod_l+0x9c>
 80090fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80090fe:	b13a      	cbz	r2, 8009110 <_strtod_l+0xd0>
 8009100:	2135      	movs	r1, #53	@ 0x35
 8009102:	a81c      	add	r0, sp, #112	@ 0x70
 8009104:	f7ff ff3a 	bl	8008f7c <__copybits>
 8009108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800910a:	9805      	ldr	r0, [sp, #20]
 800910c:	f7ff fb08 	bl	8008720 <_Bfree>
 8009110:	3e01      	subs	r6, #1
 8009112:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009114:	2e04      	cmp	r6, #4
 8009116:	d806      	bhi.n	8009126 <_strtod_l+0xe6>
 8009118:	e8df f006 	tbb	[pc, r6]
 800911c:	201d0314 	.word	0x201d0314
 8009120:	14          	.byte	0x14
 8009121:	00          	.byte	0x00
 8009122:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009126:	05e1      	lsls	r1, r4, #23
 8009128:	bf48      	it	mi
 800912a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800912e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009132:	0d1b      	lsrs	r3, r3, #20
 8009134:	051b      	lsls	r3, r3, #20
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1bb      	bne.n	80090b2 <_strtod_l+0x72>
 800913a:	f7fe fb21 	bl	8007780 <__errno>
 800913e:	2322      	movs	r3, #34	@ 0x22
 8009140:	6003      	str	r3, [r0, #0]
 8009142:	e7b6      	b.n	80090b2 <_strtod_l+0x72>
 8009144:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009148:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800914c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009150:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009154:	e7e7      	b.n	8009126 <_strtod_l+0xe6>
 8009156:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80092d4 <_strtod_l+0x294>
 800915a:	e7e4      	b.n	8009126 <_strtod_l+0xe6>
 800915c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009160:	f04f 3aff 	mov.w	sl, #4294967295
 8009164:	e7df      	b.n	8009126 <_strtod_l+0xe6>
 8009166:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	9219      	str	r2, [sp, #100]	@ 0x64
 800916c:	785b      	ldrb	r3, [r3, #1]
 800916e:	2b30      	cmp	r3, #48	@ 0x30
 8009170:	d0f9      	beq.n	8009166 <_strtod_l+0x126>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d09d      	beq.n	80090b2 <_strtod_l+0x72>
 8009176:	2301      	movs	r3, #1
 8009178:	9309      	str	r3, [sp, #36]	@ 0x24
 800917a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800917c:	930c      	str	r3, [sp, #48]	@ 0x30
 800917e:	2300      	movs	r3, #0
 8009180:	9308      	str	r3, [sp, #32]
 8009182:	930a      	str	r3, [sp, #40]	@ 0x28
 8009184:	461f      	mov	r7, r3
 8009186:	220a      	movs	r2, #10
 8009188:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800918a:	7805      	ldrb	r5, [r0, #0]
 800918c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009190:	b2d9      	uxtb	r1, r3
 8009192:	2909      	cmp	r1, #9
 8009194:	d928      	bls.n	80091e8 <_strtod_l+0x1a8>
 8009196:	494e      	ldr	r1, [pc, #312]	@ (80092d0 <_strtod_l+0x290>)
 8009198:	2201      	movs	r2, #1
 800919a:	f000 ffd5 	bl	800a148 <strncmp>
 800919e:	2800      	cmp	r0, #0
 80091a0:	d032      	beq.n	8009208 <_strtod_l+0x1c8>
 80091a2:	2000      	movs	r0, #0
 80091a4:	462a      	mov	r2, r5
 80091a6:	4681      	mov	r9, r0
 80091a8:	463d      	mov	r5, r7
 80091aa:	4603      	mov	r3, r0
 80091ac:	2a65      	cmp	r2, #101	@ 0x65
 80091ae:	d001      	beq.n	80091b4 <_strtod_l+0x174>
 80091b0:	2a45      	cmp	r2, #69	@ 0x45
 80091b2:	d114      	bne.n	80091de <_strtod_l+0x19e>
 80091b4:	b91d      	cbnz	r5, 80091be <_strtod_l+0x17e>
 80091b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091b8:	4302      	orrs	r2, r0
 80091ba:	d095      	beq.n	80090e8 <_strtod_l+0xa8>
 80091bc:	2500      	movs	r5, #0
 80091be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80091c0:	1c62      	adds	r2, r4, #1
 80091c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80091c4:	7862      	ldrb	r2, [r4, #1]
 80091c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80091c8:	d077      	beq.n	80092ba <_strtod_l+0x27a>
 80091ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80091cc:	d07b      	beq.n	80092c6 <_strtod_l+0x286>
 80091ce:	f04f 0c00 	mov.w	ip, #0
 80091d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80091d6:	2909      	cmp	r1, #9
 80091d8:	f240 8082 	bls.w	80092e0 <_strtod_l+0x2a0>
 80091dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80091de:	f04f 0800 	mov.w	r8, #0
 80091e2:	e0a2      	b.n	800932a <_strtod_l+0x2ea>
 80091e4:	2300      	movs	r3, #0
 80091e6:	e7c7      	b.n	8009178 <_strtod_l+0x138>
 80091e8:	2f08      	cmp	r7, #8
 80091ea:	bfd5      	itete	le
 80091ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80091ee:	9908      	ldrgt	r1, [sp, #32]
 80091f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80091f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80091f8:	f100 0001 	add.w	r0, r0, #1
 80091fc:	bfd4      	ite	le
 80091fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009200:	9308      	strgt	r3, [sp, #32]
 8009202:	3701      	adds	r7, #1
 8009204:	9019      	str	r0, [sp, #100]	@ 0x64
 8009206:	e7bf      	b.n	8009188 <_strtod_l+0x148>
 8009208:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	9219      	str	r2, [sp, #100]	@ 0x64
 800920e:	785a      	ldrb	r2, [r3, #1]
 8009210:	b37f      	cbz	r7, 8009272 <_strtod_l+0x232>
 8009212:	4681      	mov	r9, r0
 8009214:	463d      	mov	r5, r7
 8009216:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800921a:	2b09      	cmp	r3, #9
 800921c:	d912      	bls.n	8009244 <_strtod_l+0x204>
 800921e:	2301      	movs	r3, #1
 8009220:	e7c4      	b.n	80091ac <_strtod_l+0x16c>
 8009222:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009224:	1c5a      	adds	r2, r3, #1
 8009226:	9219      	str	r2, [sp, #100]	@ 0x64
 8009228:	785a      	ldrb	r2, [r3, #1]
 800922a:	3001      	adds	r0, #1
 800922c:	2a30      	cmp	r2, #48	@ 0x30
 800922e:	d0f8      	beq.n	8009222 <_strtod_l+0x1e2>
 8009230:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009234:	2b08      	cmp	r3, #8
 8009236:	f200 84d3 	bhi.w	8009be0 <_strtod_l+0xba0>
 800923a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800923c:	930c      	str	r3, [sp, #48]	@ 0x30
 800923e:	4681      	mov	r9, r0
 8009240:	2000      	movs	r0, #0
 8009242:	4605      	mov	r5, r0
 8009244:	3a30      	subs	r2, #48	@ 0x30
 8009246:	f100 0301 	add.w	r3, r0, #1
 800924a:	d02a      	beq.n	80092a2 <_strtod_l+0x262>
 800924c:	4499      	add	r9, r3
 800924e:	eb00 0c05 	add.w	ip, r0, r5
 8009252:	462b      	mov	r3, r5
 8009254:	210a      	movs	r1, #10
 8009256:	4563      	cmp	r3, ip
 8009258:	d10d      	bne.n	8009276 <_strtod_l+0x236>
 800925a:	1c69      	adds	r1, r5, #1
 800925c:	4401      	add	r1, r0
 800925e:	4428      	add	r0, r5
 8009260:	2808      	cmp	r0, #8
 8009262:	dc16      	bgt.n	8009292 <_strtod_l+0x252>
 8009264:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009266:	230a      	movs	r3, #10
 8009268:	fb03 2300 	mla	r3, r3, r0, r2
 800926c:	930a      	str	r3, [sp, #40]	@ 0x28
 800926e:	2300      	movs	r3, #0
 8009270:	e018      	b.n	80092a4 <_strtod_l+0x264>
 8009272:	4638      	mov	r0, r7
 8009274:	e7da      	b.n	800922c <_strtod_l+0x1ec>
 8009276:	2b08      	cmp	r3, #8
 8009278:	f103 0301 	add.w	r3, r3, #1
 800927c:	dc03      	bgt.n	8009286 <_strtod_l+0x246>
 800927e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009280:	434e      	muls	r6, r1
 8009282:	960a      	str	r6, [sp, #40]	@ 0x28
 8009284:	e7e7      	b.n	8009256 <_strtod_l+0x216>
 8009286:	2b10      	cmp	r3, #16
 8009288:	bfde      	ittt	le
 800928a:	9e08      	ldrle	r6, [sp, #32]
 800928c:	434e      	mulle	r6, r1
 800928e:	9608      	strle	r6, [sp, #32]
 8009290:	e7e1      	b.n	8009256 <_strtod_l+0x216>
 8009292:	280f      	cmp	r0, #15
 8009294:	dceb      	bgt.n	800926e <_strtod_l+0x22e>
 8009296:	9808      	ldr	r0, [sp, #32]
 8009298:	230a      	movs	r3, #10
 800929a:	fb03 2300 	mla	r3, r3, r0, r2
 800929e:	9308      	str	r3, [sp, #32]
 80092a0:	e7e5      	b.n	800926e <_strtod_l+0x22e>
 80092a2:	4629      	mov	r1, r5
 80092a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092a6:	1c50      	adds	r0, r2, #1
 80092a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80092aa:	7852      	ldrb	r2, [r2, #1]
 80092ac:	4618      	mov	r0, r3
 80092ae:	460d      	mov	r5, r1
 80092b0:	e7b1      	b.n	8009216 <_strtod_l+0x1d6>
 80092b2:	f04f 0900 	mov.w	r9, #0
 80092b6:	2301      	movs	r3, #1
 80092b8:	e77d      	b.n	80091b6 <_strtod_l+0x176>
 80092ba:	f04f 0c00 	mov.w	ip, #0
 80092be:	1ca2      	adds	r2, r4, #2
 80092c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80092c2:	78a2      	ldrb	r2, [r4, #2]
 80092c4:	e785      	b.n	80091d2 <_strtod_l+0x192>
 80092c6:	f04f 0c01 	mov.w	ip, #1
 80092ca:	e7f8      	b.n	80092be <_strtod_l+0x27e>
 80092cc:	0800b188 	.word	0x0800b188
 80092d0:	0800b170 	.word	0x0800b170
 80092d4:	7ff00000 	.word	0x7ff00000
 80092d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092da:	1c51      	adds	r1, r2, #1
 80092dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80092de:	7852      	ldrb	r2, [r2, #1]
 80092e0:	2a30      	cmp	r2, #48	@ 0x30
 80092e2:	d0f9      	beq.n	80092d8 <_strtod_l+0x298>
 80092e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80092e8:	2908      	cmp	r1, #8
 80092ea:	f63f af78 	bhi.w	80091de <_strtod_l+0x19e>
 80092ee:	3a30      	subs	r2, #48	@ 0x30
 80092f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80092f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80092f6:	f04f 080a 	mov.w	r8, #10
 80092fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092fc:	1c56      	adds	r6, r2, #1
 80092fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8009300:	7852      	ldrb	r2, [r2, #1]
 8009302:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009306:	f1be 0f09 	cmp.w	lr, #9
 800930a:	d939      	bls.n	8009380 <_strtod_l+0x340>
 800930c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800930e:	1a76      	subs	r6, r6, r1
 8009310:	2e08      	cmp	r6, #8
 8009312:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009316:	dc03      	bgt.n	8009320 <_strtod_l+0x2e0>
 8009318:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800931a:	4588      	cmp	r8, r1
 800931c:	bfa8      	it	ge
 800931e:	4688      	movge	r8, r1
 8009320:	f1bc 0f00 	cmp.w	ip, #0
 8009324:	d001      	beq.n	800932a <_strtod_l+0x2ea>
 8009326:	f1c8 0800 	rsb	r8, r8, #0
 800932a:	2d00      	cmp	r5, #0
 800932c:	d14e      	bne.n	80093cc <_strtod_l+0x38c>
 800932e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009330:	4308      	orrs	r0, r1
 8009332:	f47f aebe 	bne.w	80090b2 <_strtod_l+0x72>
 8009336:	2b00      	cmp	r3, #0
 8009338:	f47f aed6 	bne.w	80090e8 <_strtod_l+0xa8>
 800933c:	2a69      	cmp	r2, #105	@ 0x69
 800933e:	d028      	beq.n	8009392 <_strtod_l+0x352>
 8009340:	dc25      	bgt.n	800938e <_strtod_l+0x34e>
 8009342:	2a49      	cmp	r2, #73	@ 0x49
 8009344:	d025      	beq.n	8009392 <_strtod_l+0x352>
 8009346:	2a4e      	cmp	r2, #78	@ 0x4e
 8009348:	f47f aece 	bne.w	80090e8 <_strtod_l+0xa8>
 800934c:	499b      	ldr	r1, [pc, #620]	@ (80095bc <_strtod_l+0x57c>)
 800934e:	a819      	add	r0, sp, #100	@ 0x64
 8009350:	f001 f9e2 	bl	800a718 <__match>
 8009354:	2800      	cmp	r0, #0
 8009356:	f43f aec7 	beq.w	80090e8 <_strtod_l+0xa8>
 800935a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b28      	cmp	r3, #40	@ 0x28
 8009360:	d12e      	bne.n	80093c0 <_strtod_l+0x380>
 8009362:	4997      	ldr	r1, [pc, #604]	@ (80095c0 <_strtod_l+0x580>)
 8009364:	aa1c      	add	r2, sp, #112	@ 0x70
 8009366:	a819      	add	r0, sp, #100	@ 0x64
 8009368:	f001 f9ea 	bl	800a740 <__hexnan>
 800936c:	2805      	cmp	r0, #5
 800936e:	d127      	bne.n	80093c0 <_strtod_l+0x380>
 8009370:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009372:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009376:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800937a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800937e:	e698      	b.n	80090b2 <_strtod_l+0x72>
 8009380:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009382:	fb08 2101 	mla	r1, r8, r1, r2
 8009386:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800938a:	920e      	str	r2, [sp, #56]	@ 0x38
 800938c:	e7b5      	b.n	80092fa <_strtod_l+0x2ba>
 800938e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009390:	e7da      	b.n	8009348 <_strtod_l+0x308>
 8009392:	498c      	ldr	r1, [pc, #560]	@ (80095c4 <_strtod_l+0x584>)
 8009394:	a819      	add	r0, sp, #100	@ 0x64
 8009396:	f001 f9bf 	bl	800a718 <__match>
 800939a:	2800      	cmp	r0, #0
 800939c:	f43f aea4 	beq.w	80090e8 <_strtod_l+0xa8>
 80093a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093a2:	4989      	ldr	r1, [pc, #548]	@ (80095c8 <_strtod_l+0x588>)
 80093a4:	3b01      	subs	r3, #1
 80093a6:	a819      	add	r0, sp, #100	@ 0x64
 80093a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80093aa:	f001 f9b5 	bl	800a718 <__match>
 80093ae:	b910      	cbnz	r0, 80093b6 <_strtod_l+0x376>
 80093b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093b2:	3301      	adds	r3, #1
 80093b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80093b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80095d8 <_strtod_l+0x598>
 80093ba:	f04f 0a00 	mov.w	sl, #0
 80093be:	e678      	b.n	80090b2 <_strtod_l+0x72>
 80093c0:	4882      	ldr	r0, [pc, #520]	@ (80095cc <_strtod_l+0x58c>)
 80093c2:	f000 fee5 	bl	800a190 <nan>
 80093c6:	ec5b ab10 	vmov	sl, fp, d0
 80093ca:	e672      	b.n	80090b2 <_strtod_l+0x72>
 80093cc:	eba8 0309 	sub.w	r3, r8, r9
 80093d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093d4:	2f00      	cmp	r7, #0
 80093d6:	bf08      	it	eq
 80093d8:	462f      	moveq	r7, r5
 80093da:	2d10      	cmp	r5, #16
 80093dc:	462c      	mov	r4, r5
 80093de:	bfa8      	it	ge
 80093e0:	2410      	movge	r4, #16
 80093e2:	f7f7 f897 	bl	8000514 <__aeabi_ui2d>
 80093e6:	2d09      	cmp	r5, #9
 80093e8:	4682      	mov	sl, r0
 80093ea:	468b      	mov	fp, r1
 80093ec:	dc13      	bgt.n	8009416 <_strtod_l+0x3d6>
 80093ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f43f ae5e 	beq.w	80090b2 <_strtod_l+0x72>
 80093f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f8:	dd78      	ble.n	80094ec <_strtod_l+0x4ac>
 80093fa:	2b16      	cmp	r3, #22
 80093fc:	dc5f      	bgt.n	80094be <_strtod_l+0x47e>
 80093fe:	4974      	ldr	r1, [pc, #464]	@ (80095d0 <_strtod_l+0x590>)
 8009400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009408:	4652      	mov	r2, sl
 800940a:	465b      	mov	r3, fp
 800940c:	f7f7 f8fc 	bl	8000608 <__aeabi_dmul>
 8009410:	4682      	mov	sl, r0
 8009412:	468b      	mov	fp, r1
 8009414:	e64d      	b.n	80090b2 <_strtod_l+0x72>
 8009416:	4b6e      	ldr	r3, [pc, #440]	@ (80095d0 <_strtod_l+0x590>)
 8009418:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800941c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009420:	f7f7 f8f2 	bl	8000608 <__aeabi_dmul>
 8009424:	4682      	mov	sl, r0
 8009426:	9808      	ldr	r0, [sp, #32]
 8009428:	468b      	mov	fp, r1
 800942a:	f7f7 f873 	bl	8000514 <__aeabi_ui2d>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4650      	mov	r0, sl
 8009434:	4659      	mov	r1, fp
 8009436:	f7f6 ff31 	bl	800029c <__adddf3>
 800943a:	2d0f      	cmp	r5, #15
 800943c:	4682      	mov	sl, r0
 800943e:	468b      	mov	fp, r1
 8009440:	ddd5      	ble.n	80093ee <_strtod_l+0x3ae>
 8009442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009444:	1b2c      	subs	r4, r5, r4
 8009446:	441c      	add	r4, r3
 8009448:	2c00      	cmp	r4, #0
 800944a:	f340 8096 	ble.w	800957a <_strtod_l+0x53a>
 800944e:	f014 030f 	ands.w	r3, r4, #15
 8009452:	d00a      	beq.n	800946a <_strtod_l+0x42a>
 8009454:	495e      	ldr	r1, [pc, #376]	@ (80095d0 <_strtod_l+0x590>)
 8009456:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800945a:	4652      	mov	r2, sl
 800945c:	465b      	mov	r3, fp
 800945e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009462:	f7f7 f8d1 	bl	8000608 <__aeabi_dmul>
 8009466:	4682      	mov	sl, r0
 8009468:	468b      	mov	fp, r1
 800946a:	f034 040f 	bics.w	r4, r4, #15
 800946e:	d073      	beq.n	8009558 <_strtod_l+0x518>
 8009470:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009474:	dd48      	ble.n	8009508 <_strtod_l+0x4c8>
 8009476:	2400      	movs	r4, #0
 8009478:	46a0      	mov	r8, r4
 800947a:	940a      	str	r4, [sp, #40]	@ 0x28
 800947c:	46a1      	mov	r9, r4
 800947e:	9a05      	ldr	r2, [sp, #20]
 8009480:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80095d8 <_strtod_l+0x598>
 8009484:	2322      	movs	r3, #34	@ 0x22
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	f04f 0a00 	mov.w	sl, #0
 800948c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800948e:	2b00      	cmp	r3, #0
 8009490:	f43f ae0f 	beq.w	80090b2 <_strtod_l+0x72>
 8009494:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009496:	9805      	ldr	r0, [sp, #20]
 8009498:	f7ff f942 	bl	8008720 <_Bfree>
 800949c:	9805      	ldr	r0, [sp, #20]
 800949e:	4649      	mov	r1, r9
 80094a0:	f7ff f93e 	bl	8008720 <_Bfree>
 80094a4:	9805      	ldr	r0, [sp, #20]
 80094a6:	4641      	mov	r1, r8
 80094a8:	f7ff f93a 	bl	8008720 <_Bfree>
 80094ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80094ae:	9805      	ldr	r0, [sp, #20]
 80094b0:	f7ff f936 	bl	8008720 <_Bfree>
 80094b4:	9805      	ldr	r0, [sp, #20]
 80094b6:	4621      	mov	r1, r4
 80094b8:	f7ff f932 	bl	8008720 <_Bfree>
 80094bc:	e5f9      	b.n	80090b2 <_strtod_l+0x72>
 80094be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80094c4:	4293      	cmp	r3, r2
 80094c6:	dbbc      	blt.n	8009442 <_strtod_l+0x402>
 80094c8:	4c41      	ldr	r4, [pc, #260]	@ (80095d0 <_strtod_l+0x590>)
 80094ca:	f1c5 050f 	rsb	r5, r5, #15
 80094ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80094d2:	4652      	mov	r2, sl
 80094d4:	465b      	mov	r3, fp
 80094d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094da:	f7f7 f895 	bl	8000608 <__aeabi_dmul>
 80094de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e0:	1b5d      	subs	r5, r3, r5
 80094e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80094e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80094ea:	e78f      	b.n	800940c <_strtod_l+0x3cc>
 80094ec:	3316      	adds	r3, #22
 80094ee:	dba8      	blt.n	8009442 <_strtod_l+0x402>
 80094f0:	4b37      	ldr	r3, [pc, #220]	@ (80095d0 <_strtod_l+0x590>)
 80094f2:	eba9 0808 	sub.w	r8, r9, r8
 80094f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80094fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80094fe:	4650      	mov	r0, sl
 8009500:	4659      	mov	r1, fp
 8009502:	f7f7 f9ab 	bl	800085c <__aeabi_ddiv>
 8009506:	e783      	b.n	8009410 <_strtod_l+0x3d0>
 8009508:	4b32      	ldr	r3, [pc, #200]	@ (80095d4 <_strtod_l+0x594>)
 800950a:	9308      	str	r3, [sp, #32]
 800950c:	2300      	movs	r3, #0
 800950e:	1124      	asrs	r4, r4, #4
 8009510:	4650      	mov	r0, sl
 8009512:	4659      	mov	r1, fp
 8009514:	461e      	mov	r6, r3
 8009516:	2c01      	cmp	r4, #1
 8009518:	dc21      	bgt.n	800955e <_strtod_l+0x51e>
 800951a:	b10b      	cbz	r3, 8009520 <_strtod_l+0x4e0>
 800951c:	4682      	mov	sl, r0
 800951e:	468b      	mov	fp, r1
 8009520:	492c      	ldr	r1, [pc, #176]	@ (80095d4 <_strtod_l+0x594>)
 8009522:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009526:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800952a:	4652      	mov	r2, sl
 800952c:	465b      	mov	r3, fp
 800952e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009532:	f7f7 f869 	bl	8000608 <__aeabi_dmul>
 8009536:	4b28      	ldr	r3, [pc, #160]	@ (80095d8 <_strtod_l+0x598>)
 8009538:	460a      	mov	r2, r1
 800953a:	400b      	ands	r3, r1
 800953c:	4927      	ldr	r1, [pc, #156]	@ (80095dc <_strtod_l+0x59c>)
 800953e:	428b      	cmp	r3, r1
 8009540:	4682      	mov	sl, r0
 8009542:	d898      	bhi.n	8009476 <_strtod_l+0x436>
 8009544:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009548:	428b      	cmp	r3, r1
 800954a:	bf86      	itte	hi
 800954c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80095e0 <_strtod_l+0x5a0>
 8009550:	f04f 3aff 	movhi.w	sl, #4294967295
 8009554:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009558:	2300      	movs	r3, #0
 800955a:	9308      	str	r3, [sp, #32]
 800955c:	e07a      	b.n	8009654 <_strtod_l+0x614>
 800955e:	07e2      	lsls	r2, r4, #31
 8009560:	d505      	bpl.n	800956e <_strtod_l+0x52e>
 8009562:	9b08      	ldr	r3, [sp, #32]
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f7f7 f84e 	bl	8000608 <__aeabi_dmul>
 800956c:	2301      	movs	r3, #1
 800956e:	9a08      	ldr	r2, [sp, #32]
 8009570:	3208      	adds	r2, #8
 8009572:	3601      	adds	r6, #1
 8009574:	1064      	asrs	r4, r4, #1
 8009576:	9208      	str	r2, [sp, #32]
 8009578:	e7cd      	b.n	8009516 <_strtod_l+0x4d6>
 800957a:	d0ed      	beq.n	8009558 <_strtod_l+0x518>
 800957c:	4264      	negs	r4, r4
 800957e:	f014 020f 	ands.w	r2, r4, #15
 8009582:	d00a      	beq.n	800959a <_strtod_l+0x55a>
 8009584:	4b12      	ldr	r3, [pc, #72]	@ (80095d0 <_strtod_l+0x590>)
 8009586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800958a:	4650      	mov	r0, sl
 800958c:	4659      	mov	r1, fp
 800958e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009592:	f7f7 f963 	bl	800085c <__aeabi_ddiv>
 8009596:	4682      	mov	sl, r0
 8009598:	468b      	mov	fp, r1
 800959a:	1124      	asrs	r4, r4, #4
 800959c:	d0dc      	beq.n	8009558 <_strtod_l+0x518>
 800959e:	2c1f      	cmp	r4, #31
 80095a0:	dd20      	ble.n	80095e4 <_strtod_l+0x5a4>
 80095a2:	2400      	movs	r4, #0
 80095a4:	46a0      	mov	r8, r4
 80095a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80095a8:	46a1      	mov	r9, r4
 80095aa:	9a05      	ldr	r2, [sp, #20]
 80095ac:	2322      	movs	r3, #34	@ 0x22
 80095ae:	f04f 0a00 	mov.w	sl, #0
 80095b2:	f04f 0b00 	mov.w	fp, #0
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	e768      	b.n	800948c <_strtod_l+0x44c>
 80095ba:	bf00      	nop
 80095bc:	0800af5d 	.word	0x0800af5d
 80095c0:	0800b174 	.word	0x0800b174
 80095c4:	0800af55 	.word	0x0800af55
 80095c8:	0800af8c 	.word	0x0800af8c
 80095cc:	0800b31d 	.word	0x0800b31d
 80095d0:	0800b0a8 	.word	0x0800b0a8
 80095d4:	0800b080 	.word	0x0800b080
 80095d8:	7ff00000 	.word	0x7ff00000
 80095dc:	7ca00000 	.word	0x7ca00000
 80095e0:	7fefffff 	.word	0x7fefffff
 80095e4:	f014 0310 	ands.w	r3, r4, #16
 80095e8:	bf18      	it	ne
 80095ea:	236a      	movne	r3, #106	@ 0x6a
 80095ec:	4ea9      	ldr	r6, [pc, #676]	@ (8009894 <_strtod_l+0x854>)
 80095ee:	9308      	str	r3, [sp, #32]
 80095f0:	4650      	mov	r0, sl
 80095f2:	4659      	mov	r1, fp
 80095f4:	2300      	movs	r3, #0
 80095f6:	07e2      	lsls	r2, r4, #31
 80095f8:	d504      	bpl.n	8009604 <_strtod_l+0x5c4>
 80095fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095fe:	f7f7 f803 	bl	8000608 <__aeabi_dmul>
 8009602:	2301      	movs	r3, #1
 8009604:	1064      	asrs	r4, r4, #1
 8009606:	f106 0608 	add.w	r6, r6, #8
 800960a:	d1f4      	bne.n	80095f6 <_strtod_l+0x5b6>
 800960c:	b10b      	cbz	r3, 8009612 <_strtod_l+0x5d2>
 800960e:	4682      	mov	sl, r0
 8009610:	468b      	mov	fp, r1
 8009612:	9b08      	ldr	r3, [sp, #32]
 8009614:	b1b3      	cbz	r3, 8009644 <_strtod_l+0x604>
 8009616:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800961a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800961e:	2b00      	cmp	r3, #0
 8009620:	4659      	mov	r1, fp
 8009622:	dd0f      	ble.n	8009644 <_strtod_l+0x604>
 8009624:	2b1f      	cmp	r3, #31
 8009626:	dd55      	ble.n	80096d4 <_strtod_l+0x694>
 8009628:	2b34      	cmp	r3, #52	@ 0x34
 800962a:	bfde      	ittt	le
 800962c:	f04f 33ff 	movle.w	r3, #4294967295
 8009630:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009634:	4093      	lslle	r3, r2
 8009636:	f04f 0a00 	mov.w	sl, #0
 800963a:	bfcc      	ite	gt
 800963c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009640:	ea03 0b01 	andle.w	fp, r3, r1
 8009644:	2200      	movs	r2, #0
 8009646:	2300      	movs	r3, #0
 8009648:	4650      	mov	r0, sl
 800964a:	4659      	mov	r1, fp
 800964c:	f7f7 fa44 	bl	8000ad8 <__aeabi_dcmpeq>
 8009650:	2800      	cmp	r0, #0
 8009652:	d1a6      	bne.n	80095a2 <_strtod_l+0x562>
 8009654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800965a:	9805      	ldr	r0, [sp, #20]
 800965c:	462b      	mov	r3, r5
 800965e:	463a      	mov	r2, r7
 8009660:	f7ff f8c6 	bl	80087f0 <__s2b>
 8009664:	900a      	str	r0, [sp, #40]	@ 0x28
 8009666:	2800      	cmp	r0, #0
 8009668:	f43f af05 	beq.w	8009476 <_strtod_l+0x436>
 800966c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800966e:	2a00      	cmp	r2, #0
 8009670:	eba9 0308 	sub.w	r3, r9, r8
 8009674:	bfa8      	it	ge
 8009676:	2300      	movge	r3, #0
 8009678:	9312      	str	r3, [sp, #72]	@ 0x48
 800967a:	2400      	movs	r4, #0
 800967c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009680:	9316      	str	r3, [sp, #88]	@ 0x58
 8009682:	46a0      	mov	r8, r4
 8009684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009686:	9805      	ldr	r0, [sp, #20]
 8009688:	6859      	ldr	r1, [r3, #4]
 800968a:	f7ff f809 	bl	80086a0 <_Balloc>
 800968e:	4681      	mov	r9, r0
 8009690:	2800      	cmp	r0, #0
 8009692:	f43f aef4 	beq.w	800947e <_strtod_l+0x43e>
 8009696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009698:	691a      	ldr	r2, [r3, #16]
 800969a:	3202      	adds	r2, #2
 800969c:	f103 010c 	add.w	r1, r3, #12
 80096a0:	0092      	lsls	r2, r2, #2
 80096a2:	300c      	adds	r0, #12
 80096a4:	f7fe f899 	bl	80077da <memcpy>
 80096a8:	ec4b ab10 	vmov	d0, sl, fp
 80096ac:	9805      	ldr	r0, [sp, #20]
 80096ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80096b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80096b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80096b6:	f7ff fbd7 	bl	8008e68 <__d2b>
 80096ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80096bc:	2800      	cmp	r0, #0
 80096be:	f43f aede 	beq.w	800947e <_strtod_l+0x43e>
 80096c2:	9805      	ldr	r0, [sp, #20]
 80096c4:	2101      	movs	r1, #1
 80096c6:	f7ff f929 	bl	800891c <__i2b>
 80096ca:	4680      	mov	r8, r0
 80096cc:	b948      	cbnz	r0, 80096e2 <_strtod_l+0x6a2>
 80096ce:	f04f 0800 	mov.w	r8, #0
 80096d2:	e6d4      	b.n	800947e <_strtod_l+0x43e>
 80096d4:	f04f 32ff 	mov.w	r2, #4294967295
 80096d8:	fa02 f303 	lsl.w	r3, r2, r3
 80096dc:	ea03 0a0a 	and.w	sl, r3, sl
 80096e0:	e7b0      	b.n	8009644 <_strtod_l+0x604>
 80096e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80096e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80096e6:	2d00      	cmp	r5, #0
 80096e8:	bfab      	itete	ge
 80096ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80096ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80096ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80096f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80096f2:	bfac      	ite	ge
 80096f4:	18ef      	addge	r7, r5, r3
 80096f6:	1b5e      	sublt	r6, r3, r5
 80096f8:	9b08      	ldr	r3, [sp, #32]
 80096fa:	1aed      	subs	r5, r5, r3
 80096fc:	4415      	add	r5, r2
 80096fe:	4b66      	ldr	r3, [pc, #408]	@ (8009898 <_strtod_l+0x858>)
 8009700:	3d01      	subs	r5, #1
 8009702:	429d      	cmp	r5, r3
 8009704:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009708:	da50      	bge.n	80097ac <_strtod_l+0x76c>
 800970a:	1b5b      	subs	r3, r3, r5
 800970c:	2b1f      	cmp	r3, #31
 800970e:	eba2 0203 	sub.w	r2, r2, r3
 8009712:	f04f 0101 	mov.w	r1, #1
 8009716:	dc3d      	bgt.n	8009794 <_strtod_l+0x754>
 8009718:	fa01 f303 	lsl.w	r3, r1, r3
 800971c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800971e:	2300      	movs	r3, #0
 8009720:	9310      	str	r3, [sp, #64]	@ 0x40
 8009722:	18bd      	adds	r5, r7, r2
 8009724:	9b08      	ldr	r3, [sp, #32]
 8009726:	42af      	cmp	r7, r5
 8009728:	4416      	add	r6, r2
 800972a:	441e      	add	r6, r3
 800972c:	463b      	mov	r3, r7
 800972e:	bfa8      	it	ge
 8009730:	462b      	movge	r3, r5
 8009732:	42b3      	cmp	r3, r6
 8009734:	bfa8      	it	ge
 8009736:	4633      	movge	r3, r6
 8009738:	2b00      	cmp	r3, #0
 800973a:	bfc2      	ittt	gt
 800973c:	1aed      	subgt	r5, r5, r3
 800973e:	1af6      	subgt	r6, r6, r3
 8009740:	1aff      	subgt	r7, r7, r3
 8009742:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009744:	2b00      	cmp	r3, #0
 8009746:	dd16      	ble.n	8009776 <_strtod_l+0x736>
 8009748:	4641      	mov	r1, r8
 800974a:	9805      	ldr	r0, [sp, #20]
 800974c:	461a      	mov	r2, r3
 800974e:	f7ff f9a5 	bl	8008a9c <__pow5mult>
 8009752:	4680      	mov	r8, r0
 8009754:	2800      	cmp	r0, #0
 8009756:	d0ba      	beq.n	80096ce <_strtod_l+0x68e>
 8009758:	4601      	mov	r1, r0
 800975a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800975c:	9805      	ldr	r0, [sp, #20]
 800975e:	f7ff f8f3 	bl	8008948 <__multiply>
 8009762:	900e      	str	r0, [sp, #56]	@ 0x38
 8009764:	2800      	cmp	r0, #0
 8009766:	f43f ae8a 	beq.w	800947e <_strtod_l+0x43e>
 800976a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800976c:	9805      	ldr	r0, [sp, #20]
 800976e:	f7fe ffd7 	bl	8008720 <_Bfree>
 8009772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009774:	931a      	str	r3, [sp, #104]	@ 0x68
 8009776:	2d00      	cmp	r5, #0
 8009778:	dc1d      	bgt.n	80097b6 <_strtod_l+0x776>
 800977a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800977c:	2b00      	cmp	r3, #0
 800977e:	dd23      	ble.n	80097c8 <_strtod_l+0x788>
 8009780:	4649      	mov	r1, r9
 8009782:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009784:	9805      	ldr	r0, [sp, #20]
 8009786:	f7ff f989 	bl	8008a9c <__pow5mult>
 800978a:	4681      	mov	r9, r0
 800978c:	b9e0      	cbnz	r0, 80097c8 <_strtod_l+0x788>
 800978e:	f04f 0900 	mov.w	r9, #0
 8009792:	e674      	b.n	800947e <_strtod_l+0x43e>
 8009794:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009798:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800979c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80097a0:	35e2      	adds	r5, #226	@ 0xe2
 80097a2:	fa01 f305 	lsl.w	r3, r1, r5
 80097a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80097a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80097aa:	e7ba      	b.n	8009722 <_strtod_l+0x6e2>
 80097ac:	2300      	movs	r3, #0
 80097ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80097b0:	2301      	movs	r3, #1
 80097b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097b4:	e7b5      	b.n	8009722 <_strtod_l+0x6e2>
 80097b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097b8:	9805      	ldr	r0, [sp, #20]
 80097ba:	462a      	mov	r2, r5
 80097bc:	f7ff f9c8 	bl	8008b50 <__lshift>
 80097c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d1d9      	bne.n	800977a <_strtod_l+0x73a>
 80097c6:	e65a      	b.n	800947e <_strtod_l+0x43e>
 80097c8:	2e00      	cmp	r6, #0
 80097ca:	dd07      	ble.n	80097dc <_strtod_l+0x79c>
 80097cc:	4649      	mov	r1, r9
 80097ce:	9805      	ldr	r0, [sp, #20]
 80097d0:	4632      	mov	r2, r6
 80097d2:	f7ff f9bd 	bl	8008b50 <__lshift>
 80097d6:	4681      	mov	r9, r0
 80097d8:	2800      	cmp	r0, #0
 80097da:	d0d8      	beq.n	800978e <_strtod_l+0x74e>
 80097dc:	2f00      	cmp	r7, #0
 80097de:	dd08      	ble.n	80097f2 <_strtod_l+0x7b2>
 80097e0:	4641      	mov	r1, r8
 80097e2:	9805      	ldr	r0, [sp, #20]
 80097e4:	463a      	mov	r2, r7
 80097e6:	f7ff f9b3 	bl	8008b50 <__lshift>
 80097ea:	4680      	mov	r8, r0
 80097ec:	2800      	cmp	r0, #0
 80097ee:	f43f ae46 	beq.w	800947e <_strtod_l+0x43e>
 80097f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097f4:	9805      	ldr	r0, [sp, #20]
 80097f6:	464a      	mov	r2, r9
 80097f8:	f7ff fa32 	bl	8008c60 <__mdiff>
 80097fc:	4604      	mov	r4, r0
 80097fe:	2800      	cmp	r0, #0
 8009800:	f43f ae3d 	beq.w	800947e <_strtod_l+0x43e>
 8009804:	68c3      	ldr	r3, [r0, #12]
 8009806:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009808:	2300      	movs	r3, #0
 800980a:	60c3      	str	r3, [r0, #12]
 800980c:	4641      	mov	r1, r8
 800980e:	f7ff fa0b 	bl	8008c28 <__mcmp>
 8009812:	2800      	cmp	r0, #0
 8009814:	da46      	bge.n	80098a4 <_strtod_l+0x864>
 8009816:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009818:	ea53 030a 	orrs.w	r3, r3, sl
 800981c:	d16c      	bne.n	80098f8 <_strtod_l+0x8b8>
 800981e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009822:	2b00      	cmp	r3, #0
 8009824:	d168      	bne.n	80098f8 <_strtod_l+0x8b8>
 8009826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800982a:	0d1b      	lsrs	r3, r3, #20
 800982c:	051b      	lsls	r3, r3, #20
 800982e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009832:	d961      	bls.n	80098f8 <_strtod_l+0x8b8>
 8009834:	6963      	ldr	r3, [r4, #20]
 8009836:	b913      	cbnz	r3, 800983e <_strtod_l+0x7fe>
 8009838:	6923      	ldr	r3, [r4, #16]
 800983a:	2b01      	cmp	r3, #1
 800983c:	dd5c      	ble.n	80098f8 <_strtod_l+0x8b8>
 800983e:	4621      	mov	r1, r4
 8009840:	2201      	movs	r2, #1
 8009842:	9805      	ldr	r0, [sp, #20]
 8009844:	f7ff f984 	bl	8008b50 <__lshift>
 8009848:	4641      	mov	r1, r8
 800984a:	4604      	mov	r4, r0
 800984c:	f7ff f9ec 	bl	8008c28 <__mcmp>
 8009850:	2800      	cmp	r0, #0
 8009852:	dd51      	ble.n	80098f8 <_strtod_l+0x8b8>
 8009854:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009858:	9a08      	ldr	r2, [sp, #32]
 800985a:	0d1b      	lsrs	r3, r3, #20
 800985c:	051b      	lsls	r3, r3, #20
 800985e:	2a00      	cmp	r2, #0
 8009860:	d06b      	beq.n	800993a <_strtod_l+0x8fa>
 8009862:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009866:	d868      	bhi.n	800993a <_strtod_l+0x8fa>
 8009868:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800986c:	f67f ae9d 	bls.w	80095aa <_strtod_l+0x56a>
 8009870:	4b0a      	ldr	r3, [pc, #40]	@ (800989c <_strtod_l+0x85c>)
 8009872:	4650      	mov	r0, sl
 8009874:	4659      	mov	r1, fp
 8009876:	2200      	movs	r2, #0
 8009878:	f7f6 fec6 	bl	8000608 <__aeabi_dmul>
 800987c:	4b08      	ldr	r3, [pc, #32]	@ (80098a0 <_strtod_l+0x860>)
 800987e:	400b      	ands	r3, r1
 8009880:	4682      	mov	sl, r0
 8009882:	468b      	mov	fp, r1
 8009884:	2b00      	cmp	r3, #0
 8009886:	f47f ae05 	bne.w	8009494 <_strtod_l+0x454>
 800988a:	9a05      	ldr	r2, [sp, #20]
 800988c:	2322      	movs	r3, #34	@ 0x22
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	e600      	b.n	8009494 <_strtod_l+0x454>
 8009892:	bf00      	nop
 8009894:	0800b1a0 	.word	0x0800b1a0
 8009898:	fffffc02 	.word	0xfffffc02
 800989c:	39500000 	.word	0x39500000
 80098a0:	7ff00000 	.word	0x7ff00000
 80098a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80098a8:	d165      	bne.n	8009976 <_strtod_l+0x936>
 80098aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80098ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098b0:	b35a      	cbz	r2, 800990a <_strtod_l+0x8ca>
 80098b2:	4a9f      	ldr	r2, [pc, #636]	@ (8009b30 <_strtod_l+0xaf0>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d12b      	bne.n	8009910 <_strtod_l+0x8d0>
 80098b8:	9b08      	ldr	r3, [sp, #32]
 80098ba:	4651      	mov	r1, sl
 80098bc:	b303      	cbz	r3, 8009900 <_strtod_l+0x8c0>
 80098be:	4b9d      	ldr	r3, [pc, #628]	@ (8009b34 <_strtod_l+0xaf4>)
 80098c0:	465a      	mov	r2, fp
 80098c2:	4013      	ands	r3, r2
 80098c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80098c8:	f04f 32ff 	mov.w	r2, #4294967295
 80098cc:	d81b      	bhi.n	8009906 <_strtod_l+0x8c6>
 80098ce:	0d1b      	lsrs	r3, r3, #20
 80098d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80098d4:	fa02 f303 	lsl.w	r3, r2, r3
 80098d8:	4299      	cmp	r1, r3
 80098da:	d119      	bne.n	8009910 <_strtod_l+0x8d0>
 80098dc:	4b96      	ldr	r3, [pc, #600]	@ (8009b38 <_strtod_l+0xaf8>)
 80098de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d102      	bne.n	80098ea <_strtod_l+0x8aa>
 80098e4:	3101      	adds	r1, #1
 80098e6:	f43f adca 	beq.w	800947e <_strtod_l+0x43e>
 80098ea:	4b92      	ldr	r3, [pc, #584]	@ (8009b34 <_strtod_l+0xaf4>)
 80098ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098ee:	401a      	ands	r2, r3
 80098f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80098f4:	f04f 0a00 	mov.w	sl, #0
 80098f8:	9b08      	ldr	r3, [sp, #32]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1b8      	bne.n	8009870 <_strtod_l+0x830>
 80098fe:	e5c9      	b.n	8009494 <_strtod_l+0x454>
 8009900:	f04f 33ff 	mov.w	r3, #4294967295
 8009904:	e7e8      	b.n	80098d8 <_strtod_l+0x898>
 8009906:	4613      	mov	r3, r2
 8009908:	e7e6      	b.n	80098d8 <_strtod_l+0x898>
 800990a:	ea53 030a 	orrs.w	r3, r3, sl
 800990e:	d0a1      	beq.n	8009854 <_strtod_l+0x814>
 8009910:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009912:	b1db      	cbz	r3, 800994c <_strtod_l+0x90c>
 8009914:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009916:	4213      	tst	r3, r2
 8009918:	d0ee      	beq.n	80098f8 <_strtod_l+0x8b8>
 800991a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800991c:	9a08      	ldr	r2, [sp, #32]
 800991e:	4650      	mov	r0, sl
 8009920:	4659      	mov	r1, fp
 8009922:	b1bb      	cbz	r3, 8009954 <_strtod_l+0x914>
 8009924:	f7ff fb6e 	bl	8009004 <sulp>
 8009928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800992c:	ec53 2b10 	vmov	r2, r3, d0
 8009930:	f7f6 fcb4 	bl	800029c <__adddf3>
 8009934:	4682      	mov	sl, r0
 8009936:	468b      	mov	fp, r1
 8009938:	e7de      	b.n	80098f8 <_strtod_l+0x8b8>
 800993a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800993e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009942:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009946:	f04f 3aff 	mov.w	sl, #4294967295
 800994a:	e7d5      	b.n	80098f8 <_strtod_l+0x8b8>
 800994c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800994e:	ea13 0f0a 	tst.w	r3, sl
 8009952:	e7e1      	b.n	8009918 <_strtod_l+0x8d8>
 8009954:	f7ff fb56 	bl	8009004 <sulp>
 8009958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800995c:	ec53 2b10 	vmov	r2, r3, d0
 8009960:	f7f6 fc9a 	bl	8000298 <__aeabi_dsub>
 8009964:	2200      	movs	r2, #0
 8009966:	2300      	movs	r3, #0
 8009968:	4682      	mov	sl, r0
 800996a:	468b      	mov	fp, r1
 800996c:	f7f7 f8b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009970:	2800      	cmp	r0, #0
 8009972:	d0c1      	beq.n	80098f8 <_strtod_l+0x8b8>
 8009974:	e619      	b.n	80095aa <_strtod_l+0x56a>
 8009976:	4641      	mov	r1, r8
 8009978:	4620      	mov	r0, r4
 800997a:	f7ff facd 	bl	8008f18 <__ratio>
 800997e:	ec57 6b10 	vmov	r6, r7, d0
 8009982:	2200      	movs	r2, #0
 8009984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f7 f8b8 	bl	8000b00 <__aeabi_dcmple>
 8009990:	2800      	cmp	r0, #0
 8009992:	d06f      	beq.n	8009a74 <_strtod_l+0xa34>
 8009994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d17a      	bne.n	8009a90 <_strtod_l+0xa50>
 800999a:	f1ba 0f00 	cmp.w	sl, #0
 800999e:	d158      	bne.n	8009a52 <_strtod_l+0xa12>
 80099a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d15a      	bne.n	8009a60 <_strtod_l+0xa20>
 80099aa:	4b64      	ldr	r3, [pc, #400]	@ (8009b3c <_strtod_l+0xafc>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	4630      	mov	r0, r6
 80099b0:	4639      	mov	r1, r7
 80099b2:	f7f7 f89b 	bl	8000aec <__aeabi_dcmplt>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d159      	bne.n	8009a6e <_strtod_l+0xa2e>
 80099ba:	4630      	mov	r0, r6
 80099bc:	4639      	mov	r1, r7
 80099be:	4b60      	ldr	r3, [pc, #384]	@ (8009b40 <_strtod_l+0xb00>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	f7f6 fe21 	bl	8000608 <__aeabi_dmul>
 80099c6:	4606      	mov	r6, r0
 80099c8:	460f      	mov	r7, r1
 80099ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80099ce:	9606      	str	r6, [sp, #24]
 80099d0:	9307      	str	r3, [sp, #28]
 80099d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099d6:	4d57      	ldr	r5, [pc, #348]	@ (8009b34 <_strtod_l+0xaf4>)
 80099d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099de:	401d      	ands	r5, r3
 80099e0:	4b58      	ldr	r3, [pc, #352]	@ (8009b44 <_strtod_l+0xb04>)
 80099e2:	429d      	cmp	r5, r3
 80099e4:	f040 80b2 	bne.w	8009b4c <_strtod_l+0xb0c>
 80099e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80099ee:	ec4b ab10 	vmov	d0, sl, fp
 80099f2:	f7ff f9c9 	bl	8008d88 <__ulp>
 80099f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099fa:	ec51 0b10 	vmov	r0, r1, d0
 80099fe:	f7f6 fe03 	bl	8000608 <__aeabi_dmul>
 8009a02:	4652      	mov	r2, sl
 8009a04:	465b      	mov	r3, fp
 8009a06:	f7f6 fc49 	bl	800029c <__adddf3>
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4949      	ldr	r1, [pc, #292]	@ (8009b34 <_strtod_l+0xaf4>)
 8009a0e:	4a4e      	ldr	r2, [pc, #312]	@ (8009b48 <_strtod_l+0xb08>)
 8009a10:	4019      	ands	r1, r3
 8009a12:	4291      	cmp	r1, r2
 8009a14:	4682      	mov	sl, r0
 8009a16:	d942      	bls.n	8009a9e <_strtod_l+0xa5e>
 8009a18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a1a:	4b47      	ldr	r3, [pc, #284]	@ (8009b38 <_strtod_l+0xaf8>)
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d103      	bne.n	8009a28 <_strtod_l+0x9e8>
 8009a20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a22:	3301      	adds	r3, #1
 8009a24:	f43f ad2b 	beq.w	800947e <_strtod_l+0x43e>
 8009a28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009b38 <_strtod_l+0xaf8>
 8009a2c:	f04f 3aff 	mov.w	sl, #4294967295
 8009a30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a32:	9805      	ldr	r0, [sp, #20]
 8009a34:	f7fe fe74 	bl	8008720 <_Bfree>
 8009a38:	9805      	ldr	r0, [sp, #20]
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	f7fe fe70 	bl	8008720 <_Bfree>
 8009a40:	9805      	ldr	r0, [sp, #20]
 8009a42:	4641      	mov	r1, r8
 8009a44:	f7fe fe6c 	bl	8008720 <_Bfree>
 8009a48:	9805      	ldr	r0, [sp, #20]
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	f7fe fe68 	bl	8008720 <_Bfree>
 8009a50:	e618      	b.n	8009684 <_strtod_l+0x644>
 8009a52:	f1ba 0f01 	cmp.w	sl, #1
 8009a56:	d103      	bne.n	8009a60 <_strtod_l+0xa20>
 8009a58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f43f ada5 	beq.w	80095aa <_strtod_l+0x56a>
 8009a60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009b10 <_strtod_l+0xad0>
 8009a64:	4f35      	ldr	r7, [pc, #212]	@ (8009b3c <_strtod_l+0xafc>)
 8009a66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a6a:	2600      	movs	r6, #0
 8009a6c:	e7b1      	b.n	80099d2 <_strtod_l+0x992>
 8009a6e:	4f34      	ldr	r7, [pc, #208]	@ (8009b40 <_strtod_l+0xb00>)
 8009a70:	2600      	movs	r6, #0
 8009a72:	e7aa      	b.n	80099ca <_strtod_l+0x98a>
 8009a74:	4b32      	ldr	r3, [pc, #200]	@ (8009b40 <_strtod_l+0xb00>)
 8009a76:	4630      	mov	r0, r6
 8009a78:	4639      	mov	r1, r7
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f7f6 fdc4 	bl	8000608 <__aeabi_dmul>
 8009a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a82:	4606      	mov	r6, r0
 8009a84:	460f      	mov	r7, r1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d09f      	beq.n	80099ca <_strtod_l+0x98a>
 8009a8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009a8e:	e7a0      	b.n	80099d2 <_strtod_l+0x992>
 8009a90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009b18 <_strtod_l+0xad8>
 8009a94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a98:	ec57 6b17 	vmov	r6, r7, d7
 8009a9c:	e799      	b.n	80099d2 <_strtod_l+0x992>
 8009a9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009aa2:	9b08      	ldr	r3, [sp, #32]
 8009aa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1c1      	bne.n	8009a30 <_strtod_l+0x9f0>
 8009aac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ab0:	0d1b      	lsrs	r3, r3, #20
 8009ab2:	051b      	lsls	r3, r3, #20
 8009ab4:	429d      	cmp	r5, r3
 8009ab6:	d1bb      	bne.n	8009a30 <_strtod_l+0x9f0>
 8009ab8:	4630      	mov	r0, r6
 8009aba:	4639      	mov	r1, r7
 8009abc:	f7f7 f904 	bl	8000cc8 <__aeabi_d2lz>
 8009ac0:	f7f6 fd74 	bl	80005ac <__aeabi_l2d>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fbe4 	bl	8000298 <__aeabi_dsub>
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009ad8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ade:	ea46 060a 	orr.w	r6, r6, sl
 8009ae2:	431e      	orrs	r6, r3
 8009ae4:	d06f      	beq.n	8009bc6 <_strtod_l+0xb86>
 8009ae6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b20 <_strtod_l+0xae0>)
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	f7f6 fffe 	bl	8000aec <__aeabi_dcmplt>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	f47f accf 	bne.w	8009494 <_strtod_l+0x454>
 8009af6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009b28 <_strtod_l+0xae8>)
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b00:	f7f7 f812 	bl	8000b28 <__aeabi_dcmpgt>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d093      	beq.n	8009a30 <_strtod_l+0x9f0>
 8009b08:	e4c4      	b.n	8009494 <_strtod_l+0x454>
 8009b0a:	bf00      	nop
 8009b0c:	f3af 8000 	nop.w
 8009b10:	00000000 	.word	0x00000000
 8009b14:	bff00000 	.word	0xbff00000
 8009b18:	00000000 	.word	0x00000000
 8009b1c:	3ff00000 	.word	0x3ff00000
 8009b20:	94a03595 	.word	0x94a03595
 8009b24:	3fdfffff 	.word	0x3fdfffff
 8009b28:	35afe535 	.word	0x35afe535
 8009b2c:	3fe00000 	.word	0x3fe00000
 8009b30:	000fffff 	.word	0x000fffff
 8009b34:	7ff00000 	.word	0x7ff00000
 8009b38:	7fefffff 	.word	0x7fefffff
 8009b3c:	3ff00000 	.word	0x3ff00000
 8009b40:	3fe00000 	.word	0x3fe00000
 8009b44:	7fe00000 	.word	0x7fe00000
 8009b48:	7c9fffff 	.word	0x7c9fffff
 8009b4c:	9b08      	ldr	r3, [sp, #32]
 8009b4e:	b323      	cbz	r3, 8009b9a <_strtod_l+0xb5a>
 8009b50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009b54:	d821      	bhi.n	8009b9a <_strtod_l+0xb5a>
 8009b56:	a328      	add	r3, pc, #160	@ (adr r3, 8009bf8 <_strtod_l+0xbb8>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	4639      	mov	r1, r7
 8009b60:	f7f6 ffce 	bl	8000b00 <__aeabi_dcmple>
 8009b64:	b1a0      	cbz	r0, 8009b90 <_strtod_l+0xb50>
 8009b66:	4639      	mov	r1, r7
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7f7 f825 	bl	8000bb8 <__aeabi_d2uiz>
 8009b6e:	2801      	cmp	r0, #1
 8009b70:	bf38      	it	cc
 8009b72:	2001      	movcc	r0, #1
 8009b74:	f7f6 fcce 	bl	8000514 <__aeabi_ui2d>
 8009b78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	460f      	mov	r7, r1
 8009b7e:	b9fb      	cbnz	r3, 8009bc0 <_strtod_l+0xb80>
 8009b80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b84:	9014      	str	r0, [sp, #80]	@ 0x50
 8009b86:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009b8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009b96:	1b5b      	subs	r3, r3, r5
 8009b98:	9311      	str	r3, [sp, #68]	@ 0x44
 8009b9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009b9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009ba2:	f7ff f8f1 	bl	8008d88 <__ulp>
 8009ba6:	4650      	mov	r0, sl
 8009ba8:	ec53 2b10 	vmov	r2, r3, d0
 8009bac:	4659      	mov	r1, fp
 8009bae:	f7f6 fd2b 	bl	8000608 <__aeabi_dmul>
 8009bb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009bb6:	f7f6 fb71 	bl	800029c <__adddf3>
 8009bba:	4682      	mov	sl, r0
 8009bbc:	468b      	mov	fp, r1
 8009bbe:	e770      	b.n	8009aa2 <_strtod_l+0xa62>
 8009bc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009bc4:	e7e0      	b.n	8009b88 <_strtod_l+0xb48>
 8009bc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c00 <_strtod_l+0xbc0>)
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	f7f6 ff8e 	bl	8000aec <__aeabi_dcmplt>
 8009bd0:	e798      	b.n	8009b04 <_strtod_l+0xac4>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009bd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bda:	6013      	str	r3, [r2, #0]
 8009bdc:	f7ff ba6d 	b.w	80090ba <_strtod_l+0x7a>
 8009be0:	2a65      	cmp	r2, #101	@ 0x65
 8009be2:	f43f ab66 	beq.w	80092b2 <_strtod_l+0x272>
 8009be6:	2a45      	cmp	r2, #69	@ 0x45
 8009be8:	f43f ab63 	beq.w	80092b2 <_strtod_l+0x272>
 8009bec:	2301      	movs	r3, #1
 8009bee:	f7ff bb9e 	b.w	800932e <_strtod_l+0x2ee>
 8009bf2:	bf00      	nop
 8009bf4:	f3af 8000 	nop.w
 8009bf8:	ffc00000 	.word	0xffc00000
 8009bfc:	41dfffff 	.word	0x41dfffff
 8009c00:	94a03595 	.word	0x94a03595
 8009c04:	3fcfffff 	.word	0x3fcfffff

08009c08 <_strtod_r>:
 8009c08:	4b01      	ldr	r3, [pc, #4]	@ (8009c10 <_strtod_r+0x8>)
 8009c0a:	f7ff ba19 	b.w	8009040 <_strtod_l>
 8009c0e:	bf00      	nop
 8009c10:	2000006c 	.word	0x2000006c

08009c14 <_strtol_l.constprop.0>:
 8009c14:	2b24      	cmp	r3, #36	@ 0x24
 8009c16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c1a:	4686      	mov	lr, r0
 8009c1c:	4690      	mov	r8, r2
 8009c1e:	d801      	bhi.n	8009c24 <_strtol_l.constprop.0+0x10>
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d106      	bne.n	8009c32 <_strtol_l.constprop.0+0x1e>
 8009c24:	f7fd fdac 	bl	8007780 <__errno>
 8009c28:	2316      	movs	r3, #22
 8009c2a:	6003      	str	r3, [r0, #0]
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c32:	4834      	ldr	r0, [pc, #208]	@ (8009d04 <_strtol_l.constprop.0+0xf0>)
 8009c34:	460d      	mov	r5, r1
 8009c36:	462a      	mov	r2, r5
 8009c38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c3c:	5d06      	ldrb	r6, [r0, r4]
 8009c3e:	f016 0608 	ands.w	r6, r6, #8
 8009c42:	d1f8      	bne.n	8009c36 <_strtol_l.constprop.0+0x22>
 8009c44:	2c2d      	cmp	r4, #45	@ 0x2d
 8009c46:	d12d      	bne.n	8009ca4 <_strtol_l.constprop.0+0x90>
 8009c48:	782c      	ldrb	r4, [r5, #0]
 8009c4a:	2601      	movs	r6, #1
 8009c4c:	1c95      	adds	r5, r2, #2
 8009c4e:	f033 0210 	bics.w	r2, r3, #16
 8009c52:	d109      	bne.n	8009c68 <_strtol_l.constprop.0+0x54>
 8009c54:	2c30      	cmp	r4, #48	@ 0x30
 8009c56:	d12a      	bne.n	8009cae <_strtol_l.constprop.0+0x9a>
 8009c58:	782a      	ldrb	r2, [r5, #0]
 8009c5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009c5e:	2a58      	cmp	r2, #88	@ 0x58
 8009c60:	d125      	bne.n	8009cae <_strtol_l.constprop.0+0x9a>
 8009c62:	786c      	ldrb	r4, [r5, #1]
 8009c64:	2310      	movs	r3, #16
 8009c66:	3502      	adds	r5, #2
 8009c68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009c6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c70:	2200      	movs	r2, #0
 8009c72:	fbbc f9f3 	udiv	r9, ip, r3
 8009c76:	4610      	mov	r0, r2
 8009c78:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009c80:	2f09      	cmp	r7, #9
 8009c82:	d81b      	bhi.n	8009cbc <_strtol_l.constprop.0+0xa8>
 8009c84:	463c      	mov	r4, r7
 8009c86:	42a3      	cmp	r3, r4
 8009c88:	dd27      	ble.n	8009cda <_strtol_l.constprop.0+0xc6>
 8009c8a:	1c57      	adds	r7, r2, #1
 8009c8c:	d007      	beq.n	8009c9e <_strtol_l.constprop.0+0x8a>
 8009c8e:	4581      	cmp	r9, r0
 8009c90:	d320      	bcc.n	8009cd4 <_strtol_l.constprop.0+0xc0>
 8009c92:	d101      	bne.n	8009c98 <_strtol_l.constprop.0+0x84>
 8009c94:	45a2      	cmp	sl, r4
 8009c96:	db1d      	blt.n	8009cd4 <_strtol_l.constprop.0+0xc0>
 8009c98:	fb00 4003 	mla	r0, r0, r3, r4
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ca2:	e7eb      	b.n	8009c7c <_strtol_l.constprop.0+0x68>
 8009ca4:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ca6:	bf04      	itt	eq
 8009ca8:	782c      	ldrbeq	r4, [r5, #0]
 8009caa:	1c95      	addeq	r5, r2, #2
 8009cac:	e7cf      	b.n	8009c4e <_strtol_l.constprop.0+0x3a>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1da      	bne.n	8009c68 <_strtol_l.constprop.0+0x54>
 8009cb2:	2c30      	cmp	r4, #48	@ 0x30
 8009cb4:	bf0c      	ite	eq
 8009cb6:	2308      	moveq	r3, #8
 8009cb8:	230a      	movne	r3, #10
 8009cba:	e7d5      	b.n	8009c68 <_strtol_l.constprop.0+0x54>
 8009cbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009cc0:	2f19      	cmp	r7, #25
 8009cc2:	d801      	bhi.n	8009cc8 <_strtol_l.constprop.0+0xb4>
 8009cc4:	3c37      	subs	r4, #55	@ 0x37
 8009cc6:	e7de      	b.n	8009c86 <_strtol_l.constprop.0+0x72>
 8009cc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ccc:	2f19      	cmp	r7, #25
 8009cce:	d804      	bhi.n	8009cda <_strtol_l.constprop.0+0xc6>
 8009cd0:	3c57      	subs	r4, #87	@ 0x57
 8009cd2:	e7d8      	b.n	8009c86 <_strtol_l.constprop.0+0x72>
 8009cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd8:	e7e1      	b.n	8009c9e <_strtol_l.constprop.0+0x8a>
 8009cda:	1c53      	adds	r3, r2, #1
 8009cdc:	d108      	bne.n	8009cf0 <_strtol_l.constprop.0+0xdc>
 8009cde:	2322      	movs	r3, #34	@ 0x22
 8009ce0:	f8ce 3000 	str.w	r3, [lr]
 8009ce4:	4660      	mov	r0, ip
 8009ce6:	f1b8 0f00 	cmp.w	r8, #0
 8009cea:	d0a0      	beq.n	8009c2e <_strtol_l.constprop.0+0x1a>
 8009cec:	1e69      	subs	r1, r5, #1
 8009cee:	e006      	b.n	8009cfe <_strtol_l.constprop.0+0xea>
 8009cf0:	b106      	cbz	r6, 8009cf4 <_strtol_l.constprop.0+0xe0>
 8009cf2:	4240      	negs	r0, r0
 8009cf4:	f1b8 0f00 	cmp.w	r8, #0
 8009cf8:	d099      	beq.n	8009c2e <_strtol_l.constprop.0+0x1a>
 8009cfa:	2a00      	cmp	r2, #0
 8009cfc:	d1f6      	bne.n	8009cec <_strtol_l.constprop.0+0xd8>
 8009cfe:	f8c8 1000 	str.w	r1, [r8]
 8009d02:	e794      	b.n	8009c2e <_strtol_l.constprop.0+0x1a>
 8009d04:	0800b1c9 	.word	0x0800b1c9

08009d08 <_strtol_r>:
 8009d08:	f7ff bf84 	b.w	8009c14 <_strtol_l.constprop.0>

08009d0c <__ssputs_r>:
 8009d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d10:	688e      	ldr	r6, [r1, #8]
 8009d12:	461f      	mov	r7, r3
 8009d14:	42be      	cmp	r6, r7
 8009d16:	680b      	ldr	r3, [r1, #0]
 8009d18:	4682      	mov	sl, r0
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	4690      	mov	r8, r2
 8009d1e:	d82d      	bhi.n	8009d7c <__ssputs_r+0x70>
 8009d20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d28:	d026      	beq.n	8009d78 <__ssputs_r+0x6c>
 8009d2a:	6965      	ldr	r5, [r4, #20]
 8009d2c:	6909      	ldr	r1, [r1, #16]
 8009d2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d32:	eba3 0901 	sub.w	r9, r3, r1
 8009d36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d3a:	1c7b      	adds	r3, r7, #1
 8009d3c:	444b      	add	r3, r9
 8009d3e:	106d      	asrs	r5, r5, #1
 8009d40:	429d      	cmp	r5, r3
 8009d42:	bf38      	it	cc
 8009d44:	461d      	movcc	r5, r3
 8009d46:	0553      	lsls	r3, r2, #21
 8009d48:	d527      	bpl.n	8009d9a <__ssputs_r+0x8e>
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	f7fe fc1c 	bl	8008588 <_malloc_r>
 8009d50:	4606      	mov	r6, r0
 8009d52:	b360      	cbz	r0, 8009dae <__ssputs_r+0xa2>
 8009d54:	6921      	ldr	r1, [r4, #16]
 8009d56:	464a      	mov	r2, r9
 8009d58:	f7fd fd3f 	bl	80077da <memcpy>
 8009d5c:	89a3      	ldrh	r3, [r4, #12]
 8009d5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d66:	81a3      	strh	r3, [r4, #12]
 8009d68:	6126      	str	r6, [r4, #16]
 8009d6a:	6165      	str	r5, [r4, #20]
 8009d6c:	444e      	add	r6, r9
 8009d6e:	eba5 0509 	sub.w	r5, r5, r9
 8009d72:	6026      	str	r6, [r4, #0]
 8009d74:	60a5      	str	r5, [r4, #8]
 8009d76:	463e      	mov	r6, r7
 8009d78:	42be      	cmp	r6, r7
 8009d7a:	d900      	bls.n	8009d7e <__ssputs_r+0x72>
 8009d7c:	463e      	mov	r6, r7
 8009d7e:	6820      	ldr	r0, [r4, #0]
 8009d80:	4632      	mov	r2, r6
 8009d82:	4641      	mov	r1, r8
 8009d84:	f000 f9c6 	bl	800a114 <memmove>
 8009d88:	68a3      	ldr	r3, [r4, #8]
 8009d8a:	1b9b      	subs	r3, r3, r6
 8009d8c:	60a3      	str	r3, [r4, #8]
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	4433      	add	r3, r6
 8009d92:	6023      	str	r3, [r4, #0]
 8009d94:	2000      	movs	r0, #0
 8009d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9a:	462a      	mov	r2, r5
 8009d9c:	f000 fd7d 	bl	800a89a <_realloc_r>
 8009da0:	4606      	mov	r6, r0
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d1e0      	bne.n	8009d68 <__ssputs_r+0x5c>
 8009da6:	6921      	ldr	r1, [r4, #16]
 8009da8:	4650      	mov	r0, sl
 8009daa:	f7fe fb79 	bl	80084a0 <_free_r>
 8009dae:	230c      	movs	r3, #12
 8009db0:	f8ca 3000 	str.w	r3, [sl]
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc0:	e7e9      	b.n	8009d96 <__ssputs_r+0x8a>
	...

08009dc4 <_svfiprintf_r>:
 8009dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc8:	4698      	mov	r8, r3
 8009dca:	898b      	ldrh	r3, [r1, #12]
 8009dcc:	061b      	lsls	r3, r3, #24
 8009dce:	b09d      	sub	sp, #116	@ 0x74
 8009dd0:	4607      	mov	r7, r0
 8009dd2:	460d      	mov	r5, r1
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	d510      	bpl.n	8009dfa <_svfiprintf_r+0x36>
 8009dd8:	690b      	ldr	r3, [r1, #16]
 8009dda:	b973      	cbnz	r3, 8009dfa <_svfiprintf_r+0x36>
 8009ddc:	2140      	movs	r1, #64	@ 0x40
 8009dde:	f7fe fbd3 	bl	8008588 <_malloc_r>
 8009de2:	6028      	str	r0, [r5, #0]
 8009de4:	6128      	str	r0, [r5, #16]
 8009de6:	b930      	cbnz	r0, 8009df6 <_svfiprintf_r+0x32>
 8009de8:	230c      	movs	r3, #12
 8009dea:	603b      	str	r3, [r7, #0]
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
 8009df0:	b01d      	add	sp, #116	@ 0x74
 8009df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df6:	2340      	movs	r3, #64	@ 0x40
 8009df8:	616b      	str	r3, [r5, #20]
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dfe:	2320      	movs	r3, #32
 8009e00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e08:	2330      	movs	r3, #48	@ 0x30
 8009e0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009fa8 <_svfiprintf_r+0x1e4>
 8009e0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e12:	f04f 0901 	mov.w	r9, #1
 8009e16:	4623      	mov	r3, r4
 8009e18:	469a      	mov	sl, r3
 8009e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e1e:	b10a      	cbz	r2, 8009e24 <_svfiprintf_r+0x60>
 8009e20:	2a25      	cmp	r2, #37	@ 0x25
 8009e22:	d1f9      	bne.n	8009e18 <_svfiprintf_r+0x54>
 8009e24:	ebba 0b04 	subs.w	fp, sl, r4
 8009e28:	d00b      	beq.n	8009e42 <_svfiprintf_r+0x7e>
 8009e2a:	465b      	mov	r3, fp
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	4629      	mov	r1, r5
 8009e30:	4638      	mov	r0, r7
 8009e32:	f7ff ff6b 	bl	8009d0c <__ssputs_r>
 8009e36:	3001      	adds	r0, #1
 8009e38:	f000 80a7 	beq.w	8009f8a <_svfiprintf_r+0x1c6>
 8009e3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e3e:	445a      	add	r2, fp
 8009e40:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e42:	f89a 3000 	ldrb.w	r3, [sl]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f000 809f 	beq.w	8009f8a <_svfiprintf_r+0x1c6>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e56:	f10a 0a01 	add.w	sl, sl, #1
 8009e5a:	9304      	str	r3, [sp, #16]
 8009e5c:	9307      	str	r3, [sp, #28]
 8009e5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e62:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e64:	4654      	mov	r4, sl
 8009e66:	2205      	movs	r2, #5
 8009e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e6c:	484e      	ldr	r0, [pc, #312]	@ (8009fa8 <_svfiprintf_r+0x1e4>)
 8009e6e:	f7f6 f9b7 	bl	80001e0 <memchr>
 8009e72:	9a04      	ldr	r2, [sp, #16]
 8009e74:	b9d8      	cbnz	r0, 8009eae <_svfiprintf_r+0xea>
 8009e76:	06d0      	lsls	r0, r2, #27
 8009e78:	bf44      	itt	mi
 8009e7a:	2320      	movmi	r3, #32
 8009e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e80:	0711      	lsls	r1, r2, #28
 8009e82:	bf44      	itt	mi
 8009e84:	232b      	movmi	r3, #43	@ 0x2b
 8009e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e90:	d015      	beq.n	8009ebe <_svfiprintf_r+0xfa>
 8009e92:	9a07      	ldr	r2, [sp, #28]
 8009e94:	4654      	mov	r4, sl
 8009e96:	2000      	movs	r0, #0
 8009e98:	f04f 0c0a 	mov.w	ip, #10
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ea2:	3b30      	subs	r3, #48	@ 0x30
 8009ea4:	2b09      	cmp	r3, #9
 8009ea6:	d94b      	bls.n	8009f40 <_svfiprintf_r+0x17c>
 8009ea8:	b1b0      	cbz	r0, 8009ed8 <_svfiprintf_r+0x114>
 8009eaa:	9207      	str	r2, [sp, #28]
 8009eac:	e014      	b.n	8009ed8 <_svfiprintf_r+0x114>
 8009eae:	eba0 0308 	sub.w	r3, r0, r8
 8009eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	46a2      	mov	sl, r4
 8009ebc:	e7d2      	b.n	8009e64 <_svfiprintf_r+0xa0>
 8009ebe:	9b03      	ldr	r3, [sp, #12]
 8009ec0:	1d19      	adds	r1, r3, #4
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	9103      	str	r1, [sp, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	bfbb      	ittet	lt
 8009eca:	425b      	neglt	r3, r3
 8009ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ed0:	9307      	strge	r3, [sp, #28]
 8009ed2:	9307      	strlt	r3, [sp, #28]
 8009ed4:	bfb8      	it	lt
 8009ed6:	9204      	strlt	r2, [sp, #16]
 8009ed8:	7823      	ldrb	r3, [r4, #0]
 8009eda:	2b2e      	cmp	r3, #46	@ 0x2e
 8009edc:	d10a      	bne.n	8009ef4 <_svfiprintf_r+0x130>
 8009ede:	7863      	ldrb	r3, [r4, #1]
 8009ee0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ee2:	d132      	bne.n	8009f4a <_svfiprintf_r+0x186>
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	1d1a      	adds	r2, r3, #4
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	9203      	str	r2, [sp, #12]
 8009eec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ef0:	3402      	adds	r4, #2
 8009ef2:	9305      	str	r3, [sp, #20]
 8009ef4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009fb8 <_svfiprintf_r+0x1f4>
 8009ef8:	7821      	ldrb	r1, [r4, #0]
 8009efa:	2203      	movs	r2, #3
 8009efc:	4650      	mov	r0, sl
 8009efe:	f7f6 f96f 	bl	80001e0 <memchr>
 8009f02:	b138      	cbz	r0, 8009f14 <_svfiprintf_r+0x150>
 8009f04:	9b04      	ldr	r3, [sp, #16]
 8009f06:	eba0 000a 	sub.w	r0, r0, sl
 8009f0a:	2240      	movs	r2, #64	@ 0x40
 8009f0c:	4082      	lsls	r2, r0
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	3401      	adds	r4, #1
 8009f12:	9304      	str	r3, [sp, #16]
 8009f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f18:	4824      	ldr	r0, [pc, #144]	@ (8009fac <_svfiprintf_r+0x1e8>)
 8009f1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f1e:	2206      	movs	r2, #6
 8009f20:	f7f6 f95e 	bl	80001e0 <memchr>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d036      	beq.n	8009f96 <_svfiprintf_r+0x1d2>
 8009f28:	4b21      	ldr	r3, [pc, #132]	@ (8009fb0 <_svfiprintf_r+0x1ec>)
 8009f2a:	bb1b      	cbnz	r3, 8009f74 <_svfiprintf_r+0x1b0>
 8009f2c:	9b03      	ldr	r3, [sp, #12]
 8009f2e:	3307      	adds	r3, #7
 8009f30:	f023 0307 	bic.w	r3, r3, #7
 8009f34:	3308      	adds	r3, #8
 8009f36:	9303      	str	r3, [sp, #12]
 8009f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f3a:	4433      	add	r3, r6
 8009f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f3e:	e76a      	b.n	8009e16 <_svfiprintf_r+0x52>
 8009f40:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f44:	460c      	mov	r4, r1
 8009f46:	2001      	movs	r0, #1
 8009f48:	e7a8      	b.n	8009e9c <_svfiprintf_r+0xd8>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	3401      	adds	r4, #1
 8009f4e:	9305      	str	r3, [sp, #20]
 8009f50:	4619      	mov	r1, r3
 8009f52:	f04f 0c0a 	mov.w	ip, #10
 8009f56:	4620      	mov	r0, r4
 8009f58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f5c:	3a30      	subs	r2, #48	@ 0x30
 8009f5e:	2a09      	cmp	r2, #9
 8009f60:	d903      	bls.n	8009f6a <_svfiprintf_r+0x1a6>
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d0c6      	beq.n	8009ef4 <_svfiprintf_r+0x130>
 8009f66:	9105      	str	r1, [sp, #20]
 8009f68:	e7c4      	b.n	8009ef4 <_svfiprintf_r+0x130>
 8009f6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f6e:	4604      	mov	r4, r0
 8009f70:	2301      	movs	r3, #1
 8009f72:	e7f0      	b.n	8009f56 <_svfiprintf_r+0x192>
 8009f74:	ab03      	add	r3, sp, #12
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	462a      	mov	r2, r5
 8009f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb4 <_svfiprintf_r+0x1f0>)
 8009f7c:	a904      	add	r1, sp, #16
 8009f7e:	4638      	mov	r0, r7
 8009f80:	f7fc fcba 	bl	80068f8 <_printf_float>
 8009f84:	1c42      	adds	r2, r0, #1
 8009f86:	4606      	mov	r6, r0
 8009f88:	d1d6      	bne.n	8009f38 <_svfiprintf_r+0x174>
 8009f8a:	89ab      	ldrh	r3, [r5, #12]
 8009f8c:	065b      	lsls	r3, r3, #25
 8009f8e:	f53f af2d 	bmi.w	8009dec <_svfiprintf_r+0x28>
 8009f92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f94:	e72c      	b.n	8009df0 <_svfiprintf_r+0x2c>
 8009f96:	ab03      	add	r3, sp, #12
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	462a      	mov	r2, r5
 8009f9c:	4b05      	ldr	r3, [pc, #20]	@ (8009fb4 <_svfiprintf_r+0x1f0>)
 8009f9e:	a904      	add	r1, sp, #16
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7fc ff41 	bl	8006e28 <_printf_i>
 8009fa6:	e7ed      	b.n	8009f84 <_svfiprintf_r+0x1c0>
 8009fa8:	0800b2c9 	.word	0x0800b2c9
 8009fac:	0800b2d3 	.word	0x0800b2d3
 8009fb0:	080068f9 	.word	0x080068f9
 8009fb4:	08009d0d 	.word	0x08009d0d
 8009fb8:	0800b2cf 	.word	0x0800b2cf

08009fbc <__sflush_r>:
 8009fbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc4:	0716      	lsls	r6, r2, #28
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	460c      	mov	r4, r1
 8009fca:	d454      	bmi.n	800a076 <__sflush_r+0xba>
 8009fcc:	684b      	ldr	r3, [r1, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	dc02      	bgt.n	8009fd8 <__sflush_r+0x1c>
 8009fd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	dd48      	ble.n	800a06a <__sflush_r+0xae>
 8009fd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fda:	2e00      	cmp	r6, #0
 8009fdc:	d045      	beq.n	800a06a <__sflush_r+0xae>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009fe4:	682f      	ldr	r7, [r5, #0]
 8009fe6:	6a21      	ldr	r1, [r4, #32]
 8009fe8:	602b      	str	r3, [r5, #0]
 8009fea:	d030      	beq.n	800a04e <__sflush_r+0x92>
 8009fec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	0759      	lsls	r1, r3, #29
 8009ff2:	d505      	bpl.n	800a000 <__sflush_r+0x44>
 8009ff4:	6863      	ldr	r3, [r4, #4]
 8009ff6:	1ad2      	subs	r2, r2, r3
 8009ff8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ffa:	b10b      	cbz	r3, 800a000 <__sflush_r+0x44>
 8009ffc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ffe:	1ad2      	subs	r2, r2, r3
 800a000:	2300      	movs	r3, #0
 800a002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a004:	6a21      	ldr	r1, [r4, #32]
 800a006:	4628      	mov	r0, r5
 800a008:	47b0      	blx	r6
 800a00a:	1c43      	adds	r3, r0, #1
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	d106      	bne.n	800a01e <__sflush_r+0x62>
 800a010:	6829      	ldr	r1, [r5, #0]
 800a012:	291d      	cmp	r1, #29
 800a014:	d82b      	bhi.n	800a06e <__sflush_r+0xb2>
 800a016:	4a2a      	ldr	r2, [pc, #168]	@ (800a0c0 <__sflush_r+0x104>)
 800a018:	410a      	asrs	r2, r1
 800a01a:	07d6      	lsls	r6, r2, #31
 800a01c:	d427      	bmi.n	800a06e <__sflush_r+0xb2>
 800a01e:	2200      	movs	r2, #0
 800a020:	6062      	str	r2, [r4, #4]
 800a022:	04d9      	lsls	r1, r3, #19
 800a024:	6922      	ldr	r2, [r4, #16]
 800a026:	6022      	str	r2, [r4, #0]
 800a028:	d504      	bpl.n	800a034 <__sflush_r+0x78>
 800a02a:	1c42      	adds	r2, r0, #1
 800a02c:	d101      	bne.n	800a032 <__sflush_r+0x76>
 800a02e:	682b      	ldr	r3, [r5, #0]
 800a030:	b903      	cbnz	r3, 800a034 <__sflush_r+0x78>
 800a032:	6560      	str	r0, [r4, #84]	@ 0x54
 800a034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a036:	602f      	str	r7, [r5, #0]
 800a038:	b1b9      	cbz	r1, 800a06a <__sflush_r+0xae>
 800a03a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a03e:	4299      	cmp	r1, r3
 800a040:	d002      	beq.n	800a048 <__sflush_r+0x8c>
 800a042:	4628      	mov	r0, r5
 800a044:	f7fe fa2c 	bl	80084a0 <_free_r>
 800a048:	2300      	movs	r3, #0
 800a04a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a04c:	e00d      	b.n	800a06a <__sflush_r+0xae>
 800a04e:	2301      	movs	r3, #1
 800a050:	4628      	mov	r0, r5
 800a052:	47b0      	blx	r6
 800a054:	4602      	mov	r2, r0
 800a056:	1c50      	adds	r0, r2, #1
 800a058:	d1c9      	bne.n	8009fee <__sflush_r+0x32>
 800a05a:	682b      	ldr	r3, [r5, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d0c6      	beq.n	8009fee <__sflush_r+0x32>
 800a060:	2b1d      	cmp	r3, #29
 800a062:	d001      	beq.n	800a068 <__sflush_r+0xac>
 800a064:	2b16      	cmp	r3, #22
 800a066:	d11e      	bne.n	800a0a6 <__sflush_r+0xea>
 800a068:	602f      	str	r7, [r5, #0]
 800a06a:	2000      	movs	r0, #0
 800a06c:	e022      	b.n	800a0b4 <__sflush_r+0xf8>
 800a06e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a072:	b21b      	sxth	r3, r3
 800a074:	e01b      	b.n	800a0ae <__sflush_r+0xf2>
 800a076:	690f      	ldr	r7, [r1, #16]
 800a078:	2f00      	cmp	r7, #0
 800a07a:	d0f6      	beq.n	800a06a <__sflush_r+0xae>
 800a07c:	0793      	lsls	r3, r2, #30
 800a07e:	680e      	ldr	r6, [r1, #0]
 800a080:	bf08      	it	eq
 800a082:	694b      	ldreq	r3, [r1, #20]
 800a084:	600f      	str	r7, [r1, #0]
 800a086:	bf18      	it	ne
 800a088:	2300      	movne	r3, #0
 800a08a:	eba6 0807 	sub.w	r8, r6, r7
 800a08e:	608b      	str	r3, [r1, #8]
 800a090:	f1b8 0f00 	cmp.w	r8, #0
 800a094:	dde9      	ble.n	800a06a <__sflush_r+0xae>
 800a096:	6a21      	ldr	r1, [r4, #32]
 800a098:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a09a:	4643      	mov	r3, r8
 800a09c:	463a      	mov	r2, r7
 800a09e:	4628      	mov	r0, r5
 800a0a0:	47b0      	blx	r6
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	dc08      	bgt.n	800a0b8 <__sflush_r+0xfc>
 800a0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0ae:	81a3      	strh	r3, [r4, #12]
 800a0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b8:	4407      	add	r7, r0
 800a0ba:	eba8 0800 	sub.w	r8, r8, r0
 800a0be:	e7e7      	b.n	800a090 <__sflush_r+0xd4>
 800a0c0:	dfbffffe 	.word	0xdfbffffe

0800a0c4 <_fflush_r>:
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	690b      	ldr	r3, [r1, #16]
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	b913      	cbnz	r3, 800a0d4 <_fflush_r+0x10>
 800a0ce:	2500      	movs	r5, #0
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	b118      	cbz	r0, 800a0de <_fflush_r+0x1a>
 800a0d6:	6a03      	ldr	r3, [r0, #32]
 800a0d8:	b90b      	cbnz	r3, 800a0de <_fflush_r+0x1a>
 800a0da:	f7fd fa65 	bl	80075a8 <__sinit>
 800a0de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0f3      	beq.n	800a0ce <_fflush_r+0xa>
 800a0e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a0e8:	07d0      	lsls	r0, r2, #31
 800a0ea:	d404      	bmi.n	800a0f6 <_fflush_r+0x32>
 800a0ec:	0599      	lsls	r1, r3, #22
 800a0ee:	d402      	bmi.n	800a0f6 <_fflush_r+0x32>
 800a0f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0f2:	f7fd fb70 	bl	80077d6 <__retarget_lock_acquire_recursive>
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	f7ff ff5f 	bl	8009fbc <__sflush_r>
 800a0fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a100:	07da      	lsls	r2, r3, #31
 800a102:	4605      	mov	r5, r0
 800a104:	d4e4      	bmi.n	800a0d0 <_fflush_r+0xc>
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	059b      	lsls	r3, r3, #22
 800a10a:	d4e1      	bmi.n	800a0d0 <_fflush_r+0xc>
 800a10c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a10e:	f7fd fb63 	bl	80077d8 <__retarget_lock_release_recursive>
 800a112:	e7dd      	b.n	800a0d0 <_fflush_r+0xc>

0800a114 <memmove>:
 800a114:	4288      	cmp	r0, r1
 800a116:	b510      	push	{r4, lr}
 800a118:	eb01 0402 	add.w	r4, r1, r2
 800a11c:	d902      	bls.n	800a124 <memmove+0x10>
 800a11e:	4284      	cmp	r4, r0
 800a120:	4623      	mov	r3, r4
 800a122:	d807      	bhi.n	800a134 <memmove+0x20>
 800a124:	1e43      	subs	r3, r0, #1
 800a126:	42a1      	cmp	r1, r4
 800a128:	d008      	beq.n	800a13c <memmove+0x28>
 800a12a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a12e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a132:	e7f8      	b.n	800a126 <memmove+0x12>
 800a134:	4402      	add	r2, r0
 800a136:	4601      	mov	r1, r0
 800a138:	428a      	cmp	r2, r1
 800a13a:	d100      	bne.n	800a13e <memmove+0x2a>
 800a13c:	bd10      	pop	{r4, pc}
 800a13e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a146:	e7f7      	b.n	800a138 <memmove+0x24>

0800a148 <strncmp>:
 800a148:	b510      	push	{r4, lr}
 800a14a:	b16a      	cbz	r2, 800a168 <strncmp+0x20>
 800a14c:	3901      	subs	r1, #1
 800a14e:	1884      	adds	r4, r0, r2
 800a150:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a154:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a158:	429a      	cmp	r2, r3
 800a15a:	d103      	bne.n	800a164 <strncmp+0x1c>
 800a15c:	42a0      	cmp	r0, r4
 800a15e:	d001      	beq.n	800a164 <strncmp+0x1c>
 800a160:	2a00      	cmp	r2, #0
 800a162:	d1f5      	bne.n	800a150 <strncmp+0x8>
 800a164:	1ad0      	subs	r0, r2, r3
 800a166:	bd10      	pop	{r4, pc}
 800a168:	4610      	mov	r0, r2
 800a16a:	e7fc      	b.n	800a166 <strncmp+0x1e>

0800a16c <_sbrk_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4d06      	ldr	r5, [pc, #24]	@ (800a188 <_sbrk_r+0x1c>)
 800a170:	2300      	movs	r3, #0
 800a172:	4604      	mov	r4, r0
 800a174:	4608      	mov	r0, r1
 800a176:	602b      	str	r3, [r5, #0]
 800a178:	f7f7 fba4 	bl	80018c4 <_sbrk>
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	d102      	bne.n	800a186 <_sbrk_r+0x1a>
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	b103      	cbz	r3, 800a186 <_sbrk_r+0x1a>
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	bd38      	pop	{r3, r4, r5, pc}
 800a188:	20004e14 	.word	0x20004e14
 800a18c:	00000000 	.word	0x00000000

0800a190 <nan>:
 800a190:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a198 <nan+0x8>
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	00000000 	.word	0x00000000
 800a19c:	7ff80000 	.word	0x7ff80000

0800a1a0 <__assert_func>:
 800a1a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1a2:	4614      	mov	r4, r2
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	4b09      	ldr	r3, [pc, #36]	@ (800a1cc <__assert_func+0x2c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	68d8      	ldr	r0, [r3, #12]
 800a1ae:	b954      	cbnz	r4, 800a1c6 <__assert_func+0x26>
 800a1b0:	4b07      	ldr	r3, [pc, #28]	@ (800a1d0 <__assert_func+0x30>)
 800a1b2:	461c      	mov	r4, r3
 800a1b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1b8:	9100      	str	r1, [sp, #0]
 800a1ba:	462b      	mov	r3, r5
 800a1bc:	4905      	ldr	r1, [pc, #20]	@ (800a1d4 <__assert_func+0x34>)
 800a1be:	f000 fba7 	bl	800a910 <fiprintf>
 800a1c2:	f000 fbb7 	bl	800a934 <abort>
 800a1c6:	4b04      	ldr	r3, [pc, #16]	@ (800a1d8 <__assert_func+0x38>)
 800a1c8:	e7f4      	b.n	800a1b4 <__assert_func+0x14>
 800a1ca:	bf00      	nop
 800a1cc:	2000001c 	.word	0x2000001c
 800a1d0:	0800b31d 	.word	0x0800b31d
 800a1d4:	0800b2ef 	.word	0x0800b2ef
 800a1d8:	0800b2e2 	.word	0x0800b2e2

0800a1dc <_calloc_r>:
 800a1dc:	b570      	push	{r4, r5, r6, lr}
 800a1de:	fba1 5402 	umull	r5, r4, r1, r2
 800a1e2:	b93c      	cbnz	r4, 800a1f4 <_calloc_r+0x18>
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	f7fe f9cf 	bl	8008588 <_malloc_r>
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	b928      	cbnz	r0, 800a1fa <_calloc_r+0x1e>
 800a1ee:	2600      	movs	r6, #0
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	220c      	movs	r2, #12
 800a1f6:	6002      	str	r2, [r0, #0]
 800a1f8:	e7f9      	b.n	800a1ee <_calloc_r+0x12>
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	4621      	mov	r1, r4
 800a1fe:	f7fd fa6c 	bl	80076da <memset>
 800a202:	e7f5      	b.n	800a1f0 <_calloc_r+0x14>

0800a204 <rshift>:
 800a204:	6903      	ldr	r3, [r0, #16]
 800a206:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a20a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a20e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a212:	f100 0414 	add.w	r4, r0, #20
 800a216:	dd45      	ble.n	800a2a4 <rshift+0xa0>
 800a218:	f011 011f 	ands.w	r1, r1, #31
 800a21c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a220:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a224:	d10c      	bne.n	800a240 <rshift+0x3c>
 800a226:	f100 0710 	add.w	r7, r0, #16
 800a22a:	4629      	mov	r1, r5
 800a22c:	42b1      	cmp	r1, r6
 800a22e:	d334      	bcc.n	800a29a <rshift+0x96>
 800a230:	1a9b      	subs	r3, r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	1eea      	subs	r2, r5, #3
 800a236:	4296      	cmp	r6, r2
 800a238:	bf38      	it	cc
 800a23a:	2300      	movcc	r3, #0
 800a23c:	4423      	add	r3, r4
 800a23e:	e015      	b.n	800a26c <rshift+0x68>
 800a240:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a244:	f1c1 0820 	rsb	r8, r1, #32
 800a248:	40cf      	lsrs	r7, r1
 800a24a:	f105 0e04 	add.w	lr, r5, #4
 800a24e:	46a1      	mov	r9, r4
 800a250:	4576      	cmp	r6, lr
 800a252:	46f4      	mov	ip, lr
 800a254:	d815      	bhi.n	800a282 <rshift+0x7e>
 800a256:	1a9a      	subs	r2, r3, r2
 800a258:	0092      	lsls	r2, r2, #2
 800a25a:	3a04      	subs	r2, #4
 800a25c:	3501      	adds	r5, #1
 800a25e:	42ae      	cmp	r6, r5
 800a260:	bf38      	it	cc
 800a262:	2200      	movcc	r2, #0
 800a264:	18a3      	adds	r3, r4, r2
 800a266:	50a7      	str	r7, [r4, r2]
 800a268:	b107      	cbz	r7, 800a26c <rshift+0x68>
 800a26a:	3304      	adds	r3, #4
 800a26c:	1b1a      	subs	r2, r3, r4
 800a26e:	42a3      	cmp	r3, r4
 800a270:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a274:	bf08      	it	eq
 800a276:	2300      	moveq	r3, #0
 800a278:	6102      	str	r2, [r0, #16]
 800a27a:	bf08      	it	eq
 800a27c:	6143      	streq	r3, [r0, #20]
 800a27e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a282:	f8dc c000 	ldr.w	ip, [ip]
 800a286:	fa0c fc08 	lsl.w	ip, ip, r8
 800a28a:	ea4c 0707 	orr.w	r7, ip, r7
 800a28e:	f849 7b04 	str.w	r7, [r9], #4
 800a292:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a296:	40cf      	lsrs	r7, r1
 800a298:	e7da      	b.n	800a250 <rshift+0x4c>
 800a29a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a29e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a2a2:	e7c3      	b.n	800a22c <rshift+0x28>
 800a2a4:	4623      	mov	r3, r4
 800a2a6:	e7e1      	b.n	800a26c <rshift+0x68>

0800a2a8 <__hexdig_fun>:
 800a2a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a2ac:	2b09      	cmp	r3, #9
 800a2ae:	d802      	bhi.n	800a2b6 <__hexdig_fun+0xe>
 800a2b0:	3820      	subs	r0, #32
 800a2b2:	b2c0      	uxtb	r0, r0
 800a2b4:	4770      	bx	lr
 800a2b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a2ba:	2b05      	cmp	r3, #5
 800a2bc:	d801      	bhi.n	800a2c2 <__hexdig_fun+0x1a>
 800a2be:	3847      	subs	r0, #71	@ 0x47
 800a2c0:	e7f7      	b.n	800a2b2 <__hexdig_fun+0xa>
 800a2c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a2c6:	2b05      	cmp	r3, #5
 800a2c8:	d801      	bhi.n	800a2ce <__hexdig_fun+0x26>
 800a2ca:	3827      	subs	r0, #39	@ 0x27
 800a2cc:	e7f1      	b.n	800a2b2 <__hexdig_fun+0xa>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	4770      	bx	lr
	...

0800a2d4 <__gethex>:
 800a2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d8:	b085      	sub	sp, #20
 800a2da:	468a      	mov	sl, r1
 800a2dc:	9302      	str	r3, [sp, #8]
 800a2de:	680b      	ldr	r3, [r1, #0]
 800a2e0:	9001      	str	r0, [sp, #4]
 800a2e2:	4690      	mov	r8, r2
 800a2e4:	1c9c      	adds	r4, r3, #2
 800a2e6:	46a1      	mov	r9, r4
 800a2e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a2ec:	2830      	cmp	r0, #48	@ 0x30
 800a2ee:	d0fa      	beq.n	800a2e6 <__gethex+0x12>
 800a2f0:	eba9 0303 	sub.w	r3, r9, r3
 800a2f4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a2f8:	f7ff ffd6 	bl	800a2a8 <__hexdig_fun>
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d168      	bne.n	800a3d4 <__gethex+0x100>
 800a302:	49a0      	ldr	r1, [pc, #640]	@ (800a584 <__gethex+0x2b0>)
 800a304:	2201      	movs	r2, #1
 800a306:	4648      	mov	r0, r9
 800a308:	f7ff ff1e 	bl	800a148 <strncmp>
 800a30c:	4607      	mov	r7, r0
 800a30e:	2800      	cmp	r0, #0
 800a310:	d167      	bne.n	800a3e2 <__gethex+0x10e>
 800a312:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a316:	4626      	mov	r6, r4
 800a318:	f7ff ffc6 	bl	800a2a8 <__hexdig_fun>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d062      	beq.n	800a3e6 <__gethex+0x112>
 800a320:	4623      	mov	r3, r4
 800a322:	7818      	ldrb	r0, [r3, #0]
 800a324:	2830      	cmp	r0, #48	@ 0x30
 800a326:	4699      	mov	r9, r3
 800a328:	f103 0301 	add.w	r3, r3, #1
 800a32c:	d0f9      	beq.n	800a322 <__gethex+0x4e>
 800a32e:	f7ff ffbb 	bl	800a2a8 <__hexdig_fun>
 800a332:	fab0 f580 	clz	r5, r0
 800a336:	096d      	lsrs	r5, r5, #5
 800a338:	f04f 0b01 	mov.w	fp, #1
 800a33c:	464a      	mov	r2, r9
 800a33e:	4616      	mov	r6, r2
 800a340:	3201      	adds	r2, #1
 800a342:	7830      	ldrb	r0, [r6, #0]
 800a344:	f7ff ffb0 	bl	800a2a8 <__hexdig_fun>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d1f8      	bne.n	800a33e <__gethex+0x6a>
 800a34c:	498d      	ldr	r1, [pc, #564]	@ (800a584 <__gethex+0x2b0>)
 800a34e:	2201      	movs	r2, #1
 800a350:	4630      	mov	r0, r6
 800a352:	f7ff fef9 	bl	800a148 <strncmp>
 800a356:	2800      	cmp	r0, #0
 800a358:	d13f      	bne.n	800a3da <__gethex+0x106>
 800a35a:	b944      	cbnz	r4, 800a36e <__gethex+0x9a>
 800a35c:	1c74      	adds	r4, r6, #1
 800a35e:	4622      	mov	r2, r4
 800a360:	4616      	mov	r6, r2
 800a362:	3201      	adds	r2, #1
 800a364:	7830      	ldrb	r0, [r6, #0]
 800a366:	f7ff ff9f 	bl	800a2a8 <__hexdig_fun>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d1f8      	bne.n	800a360 <__gethex+0x8c>
 800a36e:	1ba4      	subs	r4, r4, r6
 800a370:	00a7      	lsls	r7, r4, #2
 800a372:	7833      	ldrb	r3, [r6, #0]
 800a374:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a378:	2b50      	cmp	r3, #80	@ 0x50
 800a37a:	d13e      	bne.n	800a3fa <__gethex+0x126>
 800a37c:	7873      	ldrb	r3, [r6, #1]
 800a37e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a380:	d033      	beq.n	800a3ea <__gethex+0x116>
 800a382:	2b2d      	cmp	r3, #45	@ 0x2d
 800a384:	d034      	beq.n	800a3f0 <__gethex+0x11c>
 800a386:	1c71      	adds	r1, r6, #1
 800a388:	2400      	movs	r4, #0
 800a38a:	7808      	ldrb	r0, [r1, #0]
 800a38c:	f7ff ff8c 	bl	800a2a8 <__hexdig_fun>
 800a390:	1e43      	subs	r3, r0, #1
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b18      	cmp	r3, #24
 800a396:	d830      	bhi.n	800a3fa <__gethex+0x126>
 800a398:	f1a0 0210 	sub.w	r2, r0, #16
 800a39c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a3a0:	f7ff ff82 	bl	800a2a8 <__hexdig_fun>
 800a3a4:	f100 3cff 	add.w	ip, r0, #4294967295
 800a3a8:	fa5f fc8c 	uxtb.w	ip, ip
 800a3ac:	f1bc 0f18 	cmp.w	ip, #24
 800a3b0:	f04f 030a 	mov.w	r3, #10
 800a3b4:	d91e      	bls.n	800a3f4 <__gethex+0x120>
 800a3b6:	b104      	cbz	r4, 800a3ba <__gethex+0xe6>
 800a3b8:	4252      	negs	r2, r2
 800a3ba:	4417      	add	r7, r2
 800a3bc:	f8ca 1000 	str.w	r1, [sl]
 800a3c0:	b1ed      	cbz	r5, 800a3fe <__gethex+0x12a>
 800a3c2:	f1bb 0f00 	cmp.w	fp, #0
 800a3c6:	bf0c      	ite	eq
 800a3c8:	2506      	moveq	r5, #6
 800a3ca:	2500      	movne	r5, #0
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	b005      	add	sp, #20
 800a3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d4:	2500      	movs	r5, #0
 800a3d6:	462c      	mov	r4, r5
 800a3d8:	e7b0      	b.n	800a33c <__gethex+0x68>
 800a3da:	2c00      	cmp	r4, #0
 800a3dc:	d1c7      	bne.n	800a36e <__gethex+0x9a>
 800a3de:	4627      	mov	r7, r4
 800a3e0:	e7c7      	b.n	800a372 <__gethex+0x9e>
 800a3e2:	464e      	mov	r6, r9
 800a3e4:	462f      	mov	r7, r5
 800a3e6:	2501      	movs	r5, #1
 800a3e8:	e7c3      	b.n	800a372 <__gethex+0x9e>
 800a3ea:	2400      	movs	r4, #0
 800a3ec:	1cb1      	adds	r1, r6, #2
 800a3ee:	e7cc      	b.n	800a38a <__gethex+0xb6>
 800a3f0:	2401      	movs	r4, #1
 800a3f2:	e7fb      	b.n	800a3ec <__gethex+0x118>
 800a3f4:	fb03 0002 	mla	r0, r3, r2, r0
 800a3f8:	e7ce      	b.n	800a398 <__gethex+0xc4>
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	e7de      	b.n	800a3bc <__gethex+0xe8>
 800a3fe:	eba6 0309 	sub.w	r3, r6, r9
 800a402:	3b01      	subs	r3, #1
 800a404:	4629      	mov	r1, r5
 800a406:	2b07      	cmp	r3, #7
 800a408:	dc0a      	bgt.n	800a420 <__gethex+0x14c>
 800a40a:	9801      	ldr	r0, [sp, #4]
 800a40c:	f7fe f948 	bl	80086a0 <_Balloc>
 800a410:	4604      	mov	r4, r0
 800a412:	b940      	cbnz	r0, 800a426 <__gethex+0x152>
 800a414:	4b5c      	ldr	r3, [pc, #368]	@ (800a588 <__gethex+0x2b4>)
 800a416:	4602      	mov	r2, r0
 800a418:	21e4      	movs	r1, #228	@ 0xe4
 800a41a:	485c      	ldr	r0, [pc, #368]	@ (800a58c <__gethex+0x2b8>)
 800a41c:	f7ff fec0 	bl	800a1a0 <__assert_func>
 800a420:	3101      	adds	r1, #1
 800a422:	105b      	asrs	r3, r3, #1
 800a424:	e7ef      	b.n	800a406 <__gethex+0x132>
 800a426:	f100 0a14 	add.w	sl, r0, #20
 800a42a:	2300      	movs	r3, #0
 800a42c:	4655      	mov	r5, sl
 800a42e:	469b      	mov	fp, r3
 800a430:	45b1      	cmp	r9, r6
 800a432:	d337      	bcc.n	800a4a4 <__gethex+0x1d0>
 800a434:	f845 bb04 	str.w	fp, [r5], #4
 800a438:	eba5 050a 	sub.w	r5, r5, sl
 800a43c:	10ad      	asrs	r5, r5, #2
 800a43e:	6125      	str	r5, [r4, #16]
 800a440:	4658      	mov	r0, fp
 800a442:	f7fe fa1f 	bl	8008884 <__hi0bits>
 800a446:	016d      	lsls	r5, r5, #5
 800a448:	f8d8 6000 	ldr.w	r6, [r8]
 800a44c:	1a2d      	subs	r5, r5, r0
 800a44e:	42b5      	cmp	r5, r6
 800a450:	dd54      	ble.n	800a4fc <__gethex+0x228>
 800a452:	1bad      	subs	r5, r5, r6
 800a454:	4629      	mov	r1, r5
 800a456:	4620      	mov	r0, r4
 800a458:	f7fe fdb3 	bl	8008fc2 <__any_on>
 800a45c:	4681      	mov	r9, r0
 800a45e:	b178      	cbz	r0, 800a480 <__gethex+0x1ac>
 800a460:	1e6b      	subs	r3, r5, #1
 800a462:	1159      	asrs	r1, r3, #5
 800a464:	f003 021f 	and.w	r2, r3, #31
 800a468:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a46c:	f04f 0901 	mov.w	r9, #1
 800a470:	fa09 f202 	lsl.w	r2, r9, r2
 800a474:	420a      	tst	r2, r1
 800a476:	d003      	beq.n	800a480 <__gethex+0x1ac>
 800a478:	454b      	cmp	r3, r9
 800a47a:	dc36      	bgt.n	800a4ea <__gethex+0x216>
 800a47c:	f04f 0902 	mov.w	r9, #2
 800a480:	4629      	mov	r1, r5
 800a482:	4620      	mov	r0, r4
 800a484:	f7ff febe 	bl	800a204 <rshift>
 800a488:	442f      	add	r7, r5
 800a48a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a48e:	42bb      	cmp	r3, r7
 800a490:	da42      	bge.n	800a518 <__gethex+0x244>
 800a492:	9801      	ldr	r0, [sp, #4]
 800a494:	4621      	mov	r1, r4
 800a496:	f7fe f943 	bl	8008720 <_Bfree>
 800a49a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a49c:	2300      	movs	r3, #0
 800a49e:	6013      	str	r3, [r2, #0]
 800a4a0:	25a3      	movs	r5, #163	@ 0xa3
 800a4a2:	e793      	b.n	800a3cc <__gethex+0xf8>
 800a4a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a4a8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a4aa:	d012      	beq.n	800a4d2 <__gethex+0x1fe>
 800a4ac:	2b20      	cmp	r3, #32
 800a4ae:	d104      	bne.n	800a4ba <__gethex+0x1e6>
 800a4b0:	f845 bb04 	str.w	fp, [r5], #4
 800a4b4:	f04f 0b00 	mov.w	fp, #0
 800a4b8:	465b      	mov	r3, fp
 800a4ba:	7830      	ldrb	r0, [r6, #0]
 800a4bc:	9303      	str	r3, [sp, #12]
 800a4be:	f7ff fef3 	bl	800a2a8 <__hexdig_fun>
 800a4c2:	9b03      	ldr	r3, [sp, #12]
 800a4c4:	f000 000f 	and.w	r0, r0, #15
 800a4c8:	4098      	lsls	r0, r3
 800a4ca:	ea4b 0b00 	orr.w	fp, fp, r0
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	e7ae      	b.n	800a430 <__gethex+0x15c>
 800a4d2:	45b1      	cmp	r9, r6
 800a4d4:	d8ea      	bhi.n	800a4ac <__gethex+0x1d8>
 800a4d6:	492b      	ldr	r1, [pc, #172]	@ (800a584 <__gethex+0x2b0>)
 800a4d8:	9303      	str	r3, [sp, #12]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	4630      	mov	r0, r6
 800a4de:	f7ff fe33 	bl	800a148 <strncmp>
 800a4e2:	9b03      	ldr	r3, [sp, #12]
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d1e1      	bne.n	800a4ac <__gethex+0x1d8>
 800a4e8:	e7a2      	b.n	800a430 <__gethex+0x15c>
 800a4ea:	1ea9      	subs	r1, r5, #2
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f7fe fd68 	bl	8008fc2 <__any_on>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d0c2      	beq.n	800a47c <__gethex+0x1a8>
 800a4f6:	f04f 0903 	mov.w	r9, #3
 800a4fa:	e7c1      	b.n	800a480 <__gethex+0x1ac>
 800a4fc:	da09      	bge.n	800a512 <__gethex+0x23e>
 800a4fe:	1b75      	subs	r5, r6, r5
 800a500:	4621      	mov	r1, r4
 800a502:	9801      	ldr	r0, [sp, #4]
 800a504:	462a      	mov	r2, r5
 800a506:	f7fe fb23 	bl	8008b50 <__lshift>
 800a50a:	1b7f      	subs	r7, r7, r5
 800a50c:	4604      	mov	r4, r0
 800a50e:	f100 0a14 	add.w	sl, r0, #20
 800a512:	f04f 0900 	mov.w	r9, #0
 800a516:	e7b8      	b.n	800a48a <__gethex+0x1b6>
 800a518:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a51c:	42bd      	cmp	r5, r7
 800a51e:	dd6f      	ble.n	800a600 <__gethex+0x32c>
 800a520:	1bed      	subs	r5, r5, r7
 800a522:	42ae      	cmp	r6, r5
 800a524:	dc34      	bgt.n	800a590 <__gethex+0x2bc>
 800a526:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d022      	beq.n	800a574 <__gethex+0x2a0>
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d024      	beq.n	800a57c <__gethex+0x2a8>
 800a532:	2b01      	cmp	r3, #1
 800a534:	d115      	bne.n	800a562 <__gethex+0x28e>
 800a536:	42ae      	cmp	r6, r5
 800a538:	d113      	bne.n	800a562 <__gethex+0x28e>
 800a53a:	2e01      	cmp	r6, #1
 800a53c:	d10b      	bne.n	800a556 <__gethex+0x282>
 800a53e:	9a02      	ldr	r2, [sp, #8]
 800a540:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	2301      	movs	r3, #1
 800a548:	6123      	str	r3, [r4, #16]
 800a54a:	f8ca 3000 	str.w	r3, [sl]
 800a54e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a550:	2562      	movs	r5, #98	@ 0x62
 800a552:	601c      	str	r4, [r3, #0]
 800a554:	e73a      	b.n	800a3cc <__gethex+0xf8>
 800a556:	1e71      	subs	r1, r6, #1
 800a558:	4620      	mov	r0, r4
 800a55a:	f7fe fd32 	bl	8008fc2 <__any_on>
 800a55e:	2800      	cmp	r0, #0
 800a560:	d1ed      	bne.n	800a53e <__gethex+0x26a>
 800a562:	9801      	ldr	r0, [sp, #4]
 800a564:	4621      	mov	r1, r4
 800a566:	f7fe f8db 	bl	8008720 <_Bfree>
 800a56a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a56c:	2300      	movs	r3, #0
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	2550      	movs	r5, #80	@ 0x50
 800a572:	e72b      	b.n	800a3cc <__gethex+0xf8>
 800a574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1f3      	bne.n	800a562 <__gethex+0x28e>
 800a57a:	e7e0      	b.n	800a53e <__gethex+0x26a>
 800a57c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1dd      	bne.n	800a53e <__gethex+0x26a>
 800a582:	e7ee      	b.n	800a562 <__gethex+0x28e>
 800a584:	0800b170 	.word	0x0800b170
 800a588:	0800b005 	.word	0x0800b005
 800a58c:	0800b31e 	.word	0x0800b31e
 800a590:	1e6f      	subs	r7, r5, #1
 800a592:	f1b9 0f00 	cmp.w	r9, #0
 800a596:	d130      	bne.n	800a5fa <__gethex+0x326>
 800a598:	b127      	cbz	r7, 800a5a4 <__gethex+0x2d0>
 800a59a:	4639      	mov	r1, r7
 800a59c:	4620      	mov	r0, r4
 800a59e:	f7fe fd10 	bl	8008fc2 <__any_on>
 800a5a2:	4681      	mov	r9, r0
 800a5a4:	117a      	asrs	r2, r7, #5
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a5ac:	f007 071f 	and.w	r7, r7, #31
 800a5b0:	40bb      	lsls	r3, r7
 800a5b2:	4213      	tst	r3, r2
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	bf18      	it	ne
 800a5ba:	f049 0902 	orrne.w	r9, r9, #2
 800a5be:	f7ff fe21 	bl	800a204 <rshift>
 800a5c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a5c6:	1b76      	subs	r6, r6, r5
 800a5c8:	2502      	movs	r5, #2
 800a5ca:	f1b9 0f00 	cmp.w	r9, #0
 800a5ce:	d047      	beq.n	800a660 <__gethex+0x38c>
 800a5d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d015      	beq.n	800a604 <__gethex+0x330>
 800a5d8:	2b03      	cmp	r3, #3
 800a5da:	d017      	beq.n	800a60c <__gethex+0x338>
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d109      	bne.n	800a5f4 <__gethex+0x320>
 800a5e0:	f019 0f02 	tst.w	r9, #2
 800a5e4:	d006      	beq.n	800a5f4 <__gethex+0x320>
 800a5e6:	f8da 3000 	ldr.w	r3, [sl]
 800a5ea:	ea49 0903 	orr.w	r9, r9, r3
 800a5ee:	f019 0f01 	tst.w	r9, #1
 800a5f2:	d10e      	bne.n	800a612 <__gethex+0x33e>
 800a5f4:	f045 0510 	orr.w	r5, r5, #16
 800a5f8:	e032      	b.n	800a660 <__gethex+0x38c>
 800a5fa:	f04f 0901 	mov.w	r9, #1
 800a5fe:	e7d1      	b.n	800a5a4 <__gethex+0x2d0>
 800a600:	2501      	movs	r5, #1
 800a602:	e7e2      	b.n	800a5ca <__gethex+0x2f6>
 800a604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a606:	f1c3 0301 	rsb	r3, r3, #1
 800a60a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a60c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d0f0      	beq.n	800a5f4 <__gethex+0x320>
 800a612:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a616:	f104 0314 	add.w	r3, r4, #20
 800a61a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a61e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a622:	f04f 0c00 	mov.w	ip, #0
 800a626:	4618      	mov	r0, r3
 800a628:	f853 2b04 	ldr.w	r2, [r3], #4
 800a62c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a630:	d01b      	beq.n	800a66a <__gethex+0x396>
 800a632:	3201      	adds	r2, #1
 800a634:	6002      	str	r2, [r0, #0]
 800a636:	2d02      	cmp	r5, #2
 800a638:	f104 0314 	add.w	r3, r4, #20
 800a63c:	d13c      	bne.n	800a6b8 <__gethex+0x3e4>
 800a63e:	f8d8 2000 	ldr.w	r2, [r8]
 800a642:	3a01      	subs	r2, #1
 800a644:	42b2      	cmp	r2, r6
 800a646:	d109      	bne.n	800a65c <__gethex+0x388>
 800a648:	1171      	asrs	r1, r6, #5
 800a64a:	2201      	movs	r2, #1
 800a64c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a650:	f006 061f 	and.w	r6, r6, #31
 800a654:	fa02 f606 	lsl.w	r6, r2, r6
 800a658:	421e      	tst	r6, r3
 800a65a:	d13a      	bne.n	800a6d2 <__gethex+0x3fe>
 800a65c:	f045 0520 	orr.w	r5, r5, #32
 800a660:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a662:	601c      	str	r4, [r3, #0]
 800a664:	9b02      	ldr	r3, [sp, #8]
 800a666:	601f      	str	r7, [r3, #0]
 800a668:	e6b0      	b.n	800a3cc <__gethex+0xf8>
 800a66a:	4299      	cmp	r1, r3
 800a66c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a670:	d8d9      	bhi.n	800a626 <__gethex+0x352>
 800a672:	68a3      	ldr	r3, [r4, #8]
 800a674:	459b      	cmp	fp, r3
 800a676:	db17      	blt.n	800a6a8 <__gethex+0x3d4>
 800a678:	6861      	ldr	r1, [r4, #4]
 800a67a:	9801      	ldr	r0, [sp, #4]
 800a67c:	3101      	adds	r1, #1
 800a67e:	f7fe f80f 	bl	80086a0 <_Balloc>
 800a682:	4681      	mov	r9, r0
 800a684:	b918      	cbnz	r0, 800a68e <__gethex+0x3ba>
 800a686:	4b1a      	ldr	r3, [pc, #104]	@ (800a6f0 <__gethex+0x41c>)
 800a688:	4602      	mov	r2, r0
 800a68a:	2184      	movs	r1, #132	@ 0x84
 800a68c:	e6c5      	b.n	800a41a <__gethex+0x146>
 800a68e:	6922      	ldr	r2, [r4, #16]
 800a690:	3202      	adds	r2, #2
 800a692:	f104 010c 	add.w	r1, r4, #12
 800a696:	0092      	lsls	r2, r2, #2
 800a698:	300c      	adds	r0, #12
 800a69a:	f7fd f89e 	bl	80077da <memcpy>
 800a69e:	4621      	mov	r1, r4
 800a6a0:	9801      	ldr	r0, [sp, #4]
 800a6a2:	f7fe f83d 	bl	8008720 <_Bfree>
 800a6a6:	464c      	mov	r4, r9
 800a6a8:	6923      	ldr	r3, [r4, #16]
 800a6aa:	1c5a      	adds	r2, r3, #1
 800a6ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6b0:	6122      	str	r2, [r4, #16]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	615a      	str	r2, [r3, #20]
 800a6b6:	e7be      	b.n	800a636 <__gethex+0x362>
 800a6b8:	6922      	ldr	r2, [r4, #16]
 800a6ba:	455a      	cmp	r2, fp
 800a6bc:	dd0b      	ble.n	800a6d6 <__gethex+0x402>
 800a6be:	2101      	movs	r1, #1
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f7ff fd9f 	bl	800a204 <rshift>
 800a6c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6ca:	3701      	adds	r7, #1
 800a6cc:	42bb      	cmp	r3, r7
 800a6ce:	f6ff aee0 	blt.w	800a492 <__gethex+0x1be>
 800a6d2:	2501      	movs	r5, #1
 800a6d4:	e7c2      	b.n	800a65c <__gethex+0x388>
 800a6d6:	f016 061f 	ands.w	r6, r6, #31
 800a6da:	d0fa      	beq.n	800a6d2 <__gethex+0x3fe>
 800a6dc:	4453      	add	r3, sl
 800a6de:	f1c6 0620 	rsb	r6, r6, #32
 800a6e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a6e6:	f7fe f8cd 	bl	8008884 <__hi0bits>
 800a6ea:	42b0      	cmp	r0, r6
 800a6ec:	dbe7      	blt.n	800a6be <__gethex+0x3ea>
 800a6ee:	e7f0      	b.n	800a6d2 <__gethex+0x3fe>
 800a6f0:	0800b005 	.word	0x0800b005

0800a6f4 <L_shift>:
 800a6f4:	f1c2 0208 	rsb	r2, r2, #8
 800a6f8:	0092      	lsls	r2, r2, #2
 800a6fa:	b570      	push	{r4, r5, r6, lr}
 800a6fc:	f1c2 0620 	rsb	r6, r2, #32
 800a700:	6843      	ldr	r3, [r0, #4]
 800a702:	6804      	ldr	r4, [r0, #0]
 800a704:	fa03 f506 	lsl.w	r5, r3, r6
 800a708:	432c      	orrs	r4, r5
 800a70a:	40d3      	lsrs	r3, r2
 800a70c:	6004      	str	r4, [r0, #0]
 800a70e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a712:	4288      	cmp	r0, r1
 800a714:	d3f4      	bcc.n	800a700 <L_shift+0xc>
 800a716:	bd70      	pop	{r4, r5, r6, pc}

0800a718 <__match>:
 800a718:	b530      	push	{r4, r5, lr}
 800a71a:	6803      	ldr	r3, [r0, #0]
 800a71c:	3301      	adds	r3, #1
 800a71e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a722:	b914      	cbnz	r4, 800a72a <__match+0x12>
 800a724:	6003      	str	r3, [r0, #0]
 800a726:	2001      	movs	r0, #1
 800a728:	bd30      	pop	{r4, r5, pc}
 800a72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a72e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a732:	2d19      	cmp	r5, #25
 800a734:	bf98      	it	ls
 800a736:	3220      	addls	r2, #32
 800a738:	42a2      	cmp	r2, r4
 800a73a:	d0f0      	beq.n	800a71e <__match+0x6>
 800a73c:	2000      	movs	r0, #0
 800a73e:	e7f3      	b.n	800a728 <__match+0x10>

0800a740 <__hexnan>:
 800a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	680b      	ldr	r3, [r1, #0]
 800a746:	6801      	ldr	r1, [r0, #0]
 800a748:	115e      	asrs	r6, r3, #5
 800a74a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a74e:	f013 031f 	ands.w	r3, r3, #31
 800a752:	b087      	sub	sp, #28
 800a754:	bf18      	it	ne
 800a756:	3604      	addne	r6, #4
 800a758:	2500      	movs	r5, #0
 800a75a:	1f37      	subs	r7, r6, #4
 800a75c:	4682      	mov	sl, r0
 800a75e:	4690      	mov	r8, r2
 800a760:	9301      	str	r3, [sp, #4]
 800a762:	f846 5c04 	str.w	r5, [r6, #-4]
 800a766:	46b9      	mov	r9, r7
 800a768:	463c      	mov	r4, r7
 800a76a:	9502      	str	r5, [sp, #8]
 800a76c:	46ab      	mov	fp, r5
 800a76e:	784a      	ldrb	r2, [r1, #1]
 800a770:	1c4b      	adds	r3, r1, #1
 800a772:	9303      	str	r3, [sp, #12]
 800a774:	b342      	cbz	r2, 800a7c8 <__hexnan+0x88>
 800a776:	4610      	mov	r0, r2
 800a778:	9105      	str	r1, [sp, #20]
 800a77a:	9204      	str	r2, [sp, #16]
 800a77c:	f7ff fd94 	bl	800a2a8 <__hexdig_fun>
 800a780:	2800      	cmp	r0, #0
 800a782:	d151      	bne.n	800a828 <__hexnan+0xe8>
 800a784:	9a04      	ldr	r2, [sp, #16]
 800a786:	9905      	ldr	r1, [sp, #20]
 800a788:	2a20      	cmp	r2, #32
 800a78a:	d818      	bhi.n	800a7be <__hexnan+0x7e>
 800a78c:	9b02      	ldr	r3, [sp, #8]
 800a78e:	459b      	cmp	fp, r3
 800a790:	dd13      	ble.n	800a7ba <__hexnan+0x7a>
 800a792:	454c      	cmp	r4, r9
 800a794:	d206      	bcs.n	800a7a4 <__hexnan+0x64>
 800a796:	2d07      	cmp	r5, #7
 800a798:	dc04      	bgt.n	800a7a4 <__hexnan+0x64>
 800a79a:	462a      	mov	r2, r5
 800a79c:	4649      	mov	r1, r9
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f7ff ffa8 	bl	800a6f4 <L_shift>
 800a7a4:	4544      	cmp	r4, r8
 800a7a6:	d952      	bls.n	800a84e <__hexnan+0x10e>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f1a4 0904 	sub.w	r9, r4, #4
 800a7ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7b2:	f8cd b008 	str.w	fp, [sp, #8]
 800a7b6:	464c      	mov	r4, r9
 800a7b8:	461d      	mov	r5, r3
 800a7ba:	9903      	ldr	r1, [sp, #12]
 800a7bc:	e7d7      	b.n	800a76e <__hexnan+0x2e>
 800a7be:	2a29      	cmp	r2, #41	@ 0x29
 800a7c0:	d157      	bne.n	800a872 <__hexnan+0x132>
 800a7c2:	3102      	adds	r1, #2
 800a7c4:	f8ca 1000 	str.w	r1, [sl]
 800a7c8:	f1bb 0f00 	cmp.w	fp, #0
 800a7cc:	d051      	beq.n	800a872 <__hexnan+0x132>
 800a7ce:	454c      	cmp	r4, r9
 800a7d0:	d206      	bcs.n	800a7e0 <__hexnan+0xa0>
 800a7d2:	2d07      	cmp	r5, #7
 800a7d4:	dc04      	bgt.n	800a7e0 <__hexnan+0xa0>
 800a7d6:	462a      	mov	r2, r5
 800a7d8:	4649      	mov	r1, r9
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f7ff ff8a 	bl	800a6f4 <L_shift>
 800a7e0:	4544      	cmp	r4, r8
 800a7e2:	d936      	bls.n	800a852 <__hexnan+0x112>
 800a7e4:	f1a8 0204 	sub.w	r2, r8, #4
 800a7e8:	4623      	mov	r3, r4
 800a7ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800a7ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800a7f2:	429f      	cmp	r7, r3
 800a7f4:	d2f9      	bcs.n	800a7ea <__hexnan+0xaa>
 800a7f6:	1b3b      	subs	r3, r7, r4
 800a7f8:	f023 0303 	bic.w	r3, r3, #3
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	3401      	adds	r4, #1
 800a800:	3e03      	subs	r6, #3
 800a802:	42b4      	cmp	r4, r6
 800a804:	bf88      	it	hi
 800a806:	2304      	movhi	r3, #4
 800a808:	4443      	add	r3, r8
 800a80a:	2200      	movs	r2, #0
 800a80c:	f843 2b04 	str.w	r2, [r3], #4
 800a810:	429f      	cmp	r7, r3
 800a812:	d2fb      	bcs.n	800a80c <__hexnan+0xcc>
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	b91b      	cbnz	r3, 800a820 <__hexnan+0xe0>
 800a818:	4547      	cmp	r7, r8
 800a81a:	d128      	bne.n	800a86e <__hexnan+0x12e>
 800a81c:	2301      	movs	r3, #1
 800a81e:	603b      	str	r3, [r7, #0]
 800a820:	2005      	movs	r0, #5
 800a822:	b007      	add	sp, #28
 800a824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a828:	3501      	adds	r5, #1
 800a82a:	2d08      	cmp	r5, #8
 800a82c:	f10b 0b01 	add.w	fp, fp, #1
 800a830:	dd06      	ble.n	800a840 <__hexnan+0x100>
 800a832:	4544      	cmp	r4, r8
 800a834:	d9c1      	bls.n	800a7ba <__hexnan+0x7a>
 800a836:	2300      	movs	r3, #0
 800a838:	f844 3c04 	str.w	r3, [r4, #-4]
 800a83c:	2501      	movs	r5, #1
 800a83e:	3c04      	subs	r4, #4
 800a840:	6822      	ldr	r2, [r4, #0]
 800a842:	f000 000f 	and.w	r0, r0, #15
 800a846:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a84a:	6020      	str	r0, [r4, #0]
 800a84c:	e7b5      	b.n	800a7ba <__hexnan+0x7a>
 800a84e:	2508      	movs	r5, #8
 800a850:	e7b3      	b.n	800a7ba <__hexnan+0x7a>
 800a852:	9b01      	ldr	r3, [sp, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d0dd      	beq.n	800a814 <__hexnan+0xd4>
 800a858:	f1c3 0320 	rsb	r3, r3, #32
 800a85c:	f04f 32ff 	mov.w	r2, #4294967295
 800a860:	40da      	lsrs	r2, r3
 800a862:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a866:	4013      	ands	r3, r2
 800a868:	f846 3c04 	str.w	r3, [r6, #-4]
 800a86c:	e7d2      	b.n	800a814 <__hexnan+0xd4>
 800a86e:	3f04      	subs	r7, #4
 800a870:	e7d0      	b.n	800a814 <__hexnan+0xd4>
 800a872:	2004      	movs	r0, #4
 800a874:	e7d5      	b.n	800a822 <__hexnan+0xe2>

0800a876 <__ascii_mbtowc>:
 800a876:	b082      	sub	sp, #8
 800a878:	b901      	cbnz	r1, 800a87c <__ascii_mbtowc+0x6>
 800a87a:	a901      	add	r1, sp, #4
 800a87c:	b142      	cbz	r2, 800a890 <__ascii_mbtowc+0x1a>
 800a87e:	b14b      	cbz	r3, 800a894 <__ascii_mbtowc+0x1e>
 800a880:	7813      	ldrb	r3, [r2, #0]
 800a882:	600b      	str	r3, [r1, #0]
 800a884:	7812      	ldrb	r2, [r2, #0]
 800a886:	1e10      	subs	r0, r2, #0
 800a888:	bf18      	it	ne
 800a88a:	2001      	movne	r0, #1
 800a88c:	b002      	add	sp, #8
 800a88e:	4770      	bx	lr
 800a890:	4610      	mov	r0, r2
 800a892:	e7fb      	b.n	800a88c <__ascii_mbtowc+0x16>
 800a894:	f06f 0001 	mvn.w	r0, #1
 800a898:	e7f8      	b.n	800a88c <__ascii_mbtowc+0x16>

0800a89a <_realloc_r>:
 800a89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89e:	4680      	mov	r8, r0
 800a8a0:	4615      	mov	r5, r2
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	b921      	cbnz	r1, 800a8b0 <_realloc_r+0x16>
 800a8a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8aa:	4611      	mov	r1, r2
 800a8ac:	f7fd be6c 	b.w	8008588 <_malloc_r>
 800a8b0:	b92a      	cbnz	r2, 800a8be <_realloc_r+0x24>
 800a8b2:	f7fd fdf5 	bl	80084a0 <_free_r>
 800a8b6:	2400      	movs	r4, #0
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8be:	f000 f840 	bl	800a942 <_malloc_usable_size_r>
 800a8c2:	4285      	cmp	r5, r0
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	d802      	bhi.n	800a8ce <_realloc_r+0x34>
 800a8c8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8cc:	d8f4      	bhi.n	800a8b8 <_realloc_r+0x1e>
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	f7fd fe59 	bl	8008588 <_malloc_r>
 800a8d6:	4607      	mov	r7, r0
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d0ec      	beq.n	800a8b6 <_realloc_r+0x1c>
 800a8dc:	42b5      	cmp	r5, r6
 800a8de:	462a      	mov	r2, r5
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	bf28      	it	cs
 800a8e4:	4632      	movcs	r2, r6
 800a8e6:	f7fc ff78 	bl	80077da <memcpy>
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	4640      	mov	r0, r8
 800a8ee:	f7fd fdd7 	bl	80084a0 <_free_r>
 800a8f2:	463c      	mov	r4, r7
 800a8f4:	e7e0      	b.n	800a8b8 <_realloc_r+0x1e>

0800a8f6 <__ascii_wctomb>:
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	b141      	cbz	r1, 800a90e <__ascii_wctomb+0x18>
 800a8fc:	2aff      	cmp	r2, #255	@ 0xff
 800a8fe:	d904      	bls.n	800a90a <__ascii_wctomb+0x14>
 800a900:	228a      	movs	r2, #138	@ 0x8a
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	f04f 30ff 	mov.w	r0, #4294967295
 800a908:	4770      	bx	lr
 800a90a:	700a      	strb	r2, [r1, #0]
 800a90c:	2001      	movs	r0, #1
 800a90e:	4770      	bx	lr

0800a910 <fiprintf>:
 800a910:	b40e      	push	{r1, r2, r3}
 800a912:	b503      	push	{r0, r1, lr}
 800a914:	4601      	mov	r1, r0
 800a916:	ab03      	add	r3, sp, #12
 800a918:	4805      	ldr	r0, [pc, #20]	@ (800a930 <fiprintf+0x20>)
 800a91a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a91e:	6800      	ldr	r0, [r0, #0]
 800a920:	9301      	str	r3, [sp, #4]
 800a922:	f000 f83f 	bl	800a9a4 <_vfiprintf_r>
 800a926:	b002      	add	sp, #8
 800a928:	f85d eb04 	ldr.w	lr, [sp], #4
 800a92c:	b003      	add	sp, #12
 800a92e:	4770      	bx	lr
 800a930:	2000001c 	.word	0x2000001c

0800a934 <abort>:
 800a934:	b508      	push	{r3, lr}
 800a936:	2006      	movs	r0, #6
 800a938:	f000 fa08 	bl	800ad4c <raise>
 800a93c:	2001      	movs	r0, #1
 800a93e:	f7f6 ff49 	bl	80017d4 <_exit>

0800a942 <_malloc_usable_size_r>:
 800a942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a946:	1f18      	subs	r0, r3, #4
 800a948:	2b00      	cmp	r3, #0
 800a94a:	bfbc      	itt	lt
 800a94c:	580b      	ldrlt	r3, [r1, r0]
 800a94e:	18c0      	addlt	r0, r0, r3
 800a950:	4770      	bx	lr

0800a952 <__sfputc_r>:
 800a952:	6893      	ldr	r3, [r2, #8]
 800a954:	3b01      	subs	r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	b410      	push	{r4}
 800a95a:	6093      	str	r3, [r2, #8]
 800a95c:	da08      	bge.n	800a970 <__sfputc_r+0x1e>
 800a95e:	6994      	ldr	r4, [r2, #24]
 800a960:	42a3      	cmp	r3, r4
 800a962:	db01      	blt.n	800a968 <__sfputc_r+0x16>
 800a964:	290a      	cmp	r1, #10
 800a966:	d103      	bne.n	800a970 <__sfputc_r+0x1e>
 800a968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a96c:	f000 b932 	b.w	800abd4 <__swbuf_r>
 800a970:	6813      	ldr	r3, [r2, #0]
 800a972:	1c58      	adds	r0, r3, #1
 800a974:	6010      	str	r0, [r2, #0]
 800a976:	7019      	strb	r1, [r3, #0]
 800a978:	4608      	mov	r0, r1
 800a97a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <__sfputs_r>:
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	4606      	mov	r6, r0
 800a984:	460f      	mov	r7, r1
 800a986:	4614      	mov	r4, r2
 800a988:	18d5      	adds	r5, r2, r3
 800a98a:	42ac      	cmp	r4, r5
 800a98c:	d101      	bne.n	800a992 <__sfputs_r+0x12>
 800a98e:	2000      	movs	r0, #0
 800a990:	e007      	b.n	800a9a2 <__sfputs_r+0x22>
 800a992:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a996:	463a      	mov	r2, r7
 800a998:	4630      	mov	r0, r6
 800a99a:	f7ff ffda 	bl	800a952 <__sfputc_r>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	d1f3      	bne.n	800a98a <__sfputs_r+0xa>
 800a9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9a4 <_vfiprintf_r>:
 800a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a8:	460d      	mov	r5, r1
 800a9aa:	b09d      	sub	sp, #116	@ 0x74
 800a9ac:	4614      	mov	r4, r2
 800a9ae:	4698      	mov	r8, r3
 800a9b0:	4606      	mov	r6, r0
 800a9b2:	b118      	cbz	r0, 800a9bc <_vfiprintf_r+0x18>
 800a9b4:	6a03      	ldr	r3, [r0, #32]
 800a9b6:	b90b      	cbnz	r3, 800a9bc <_vfiprintf_r+0x18>
 800a9b8:	f7fc fdf6 	bl	80075a8 <__sinit>
 800a9bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9be:	07d9      	lsls	r1, r3, #31
 800a9c0:	d405      	bmi.n	800a9ce <_vfiprintf_r+0x2a>
 800a9c2:	89ab      	ldrh	r3, [r5, #12]
 800a9c4:	059a      	lsls	r2, r3, #22
 800a9c6:	d402      	bmi.n	800a9ce <_vfiprintf_r+0x2a>
 800a9c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9ca:	f7fc ff04 	bl	80077d6 <__retarget_lock_acquire_recursive>
 800a9ce:	89ab      	ldrh	r3, [r5, #12]
 800a9d0:	071b      	lsls	r3, r3, #28
 800a9d2:	d501      	bpl.n	800a9d8 <_vfiprintf_r+0x34>
 800a9d4:	692b      	ldr	r3, [r5, #16]
 800a9d6:	b99b      	cbnz	r3, 800aa00 <_vfiprintf_r+0x5c>
 800a9d8:	4629      	mov	r1, r5
 800a9da:	4630      	mov	r0, r6
 800a9dc:	f000 f938 	bl	800ac50 <__swsetup_r>
 800a9e0:	b170      	cbz	r0, 800aa00 <_vfiprintf_r+0x5c>
 800a9e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9e4:	07dc      	lsls	r4, r3, #31
 800a9e6:	d504      	bpl.n	800a9f2 <_vfiprintf_r+0x4e>
 800a9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ec:	b01d      	add	sp, #116	@ 0x74
 800a9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f2:	89ab      	ldrh	r3, [r5, #12]
 800a9f4:	0598      	lsls	r0, r3, #22
 800a9f6:	d4f7      	bmi.n	800a9e8 <_vfiprintf_r+0x44>
 800a9f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9fa:	f7fc feed 	bl	80077d8 <__retarget_lock_release_recursive>
 800a9fe:	e7f3      	b.n	800a9e8 <_vfiprintf_r+0x44>
 800aa00:	2300      	movs	r3, #0
 800aa02:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa04:	2320      	movs	r3, #32
 800aa06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa0e:	2330      	movs	r3, #48	@ 0x30
 800aa10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abc0 <_vfiprintf_r+0x21c>
 800aa14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa18:	f04f 0901 	mov.w	r9, #1
 800aa1c:	4623      	mov	r3, r4
 800aa1e:	469a      	mov	sl, r3
 800aa20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa24:	b10a      	cbz	r2, 800aa2a <_vfiprintf_r+0x86>
 800aa26:	2a25      	cmp	r2, #37	@ 0x25
 800aa28:	d1f9      	bne.n	800aa1e <_vfiprintf_r+0x7a>
 800aa2a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa2e:	d00b      	beq.n	800aa48 <_vfiprintf_r+0xa4>
 800aa30:	465b      	mov	r3, fp
 800aa32:	4622      	mov	r2, r4
 800aa34:	4629      	mov	r1, r5
 800aa36:	4630      	mov	r0, r6
 800aa38:	f7ff ffa2 	bl	800a980 <__sfputs_r>
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	f000 80a7 	beq.w	800ab90 <_vfiprintf_r+0x1ec>
 800aa42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa44:	445a      	add	r2, fp
 800aa46:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa48:	f89a 3000 	ldrb.w	r3, [sl]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 809f 	beq.w	800ab90 <_vfiprintf_r+0x1ec>
 800aa52:	2300      	movs	r3, #0
 800aa54:	f04f 32ff 	mov.w	r2, #4294967295
 800aa58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa5c:	f10a 0a01 	add.w	sl, sl, #1
 800aa60:	9304      	str	r3, [sp, #16]
 800aa62:	9307      	str	r3, [sp, #28]
 800aa64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa68:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa6a:	4654      	mov	r4, sl
 800aa6c:	2205      	movs	r2, #5
 800aa6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa72:	4853      	ldr	r0, [pc, #332]	@ (800abc0 <_vfiprintf_r+0x21c>)
 800aa74:	f7f5 fbb4 	bl	80001e0 <memchr>
 800aa78:	9a04      	ldr	r2, [sp, #16]
 800aa7a:	b9d8      	cbnz	r0, 800aab4 <_vfiprintf_r+0x110>
 800aa7c:	06d1      	lsls	r1, r2, #27
 800aa7e:	bf44      	itt	mi
 800aa80:	2320      	movmi	r3, #32
 800aa82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa86:	0713      	lsls	r3, r2, #28
 800aa88:	bf44      	itt	mi
 800aa8a:	232b      	movmi	r3, #43	@ 0x2b
 800aa8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa90:	f89a 3000 	ldrb.w	r3, [sl]
 800aa94:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa96:	d015      	beq.n	800aac4 <_vfiprintf_r+0x120>
 800aa98:	9a07      	ldr	r2, [sp, #28]
 800aa9a:	4654      	mov	r4, sl
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	f04f 0c0a 	mov.w	ip, #10
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaa8:	3b30      	subs	r3, #48	@ 0x30
 800aaaa:	2b09      	cmp	r3, #9
 800aaac:	d94b      	bls.n	800ab46 <_vfiprintf_r+0x1a2>
 800aaae:	b1b0      	cbz	r0, 800aade <_vfiprintf_r+0x13a>
 800aab0:	9207      	str	r2, [sp, #28]
 800aab2:	e014      	b.n	800aade <_vfiprintf_r+0x13a>
 800aab4:	eba0 0308 	sub.w	r3, r0, r8
 800aab8:	fa09 f303 	lsl.w	r3, r9, r3
 800aabc:	4313      	orrs	r3, r2
 800aabe:	9304      	str	r3, [sp, #16]
 800aac0:	46a2      	mov	sl, r4
 800aac2:	e7d2      	b.n	800aa6a <_vfiprintf_r+0xc6>
 800aac4:	9b03      	ldr	r3, [sp, #12]
 800aac6:	1d19      	adds	r1, r3, #4
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	9103      	str	r1, [sp, #12]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	bfbb      	ittet	lt
 800aad0:	425b      	neglt	r3, r3
 800aad2:	f042 0202 	orrlt.w	r2, r2, #2
 800aad6:	9307      	strge	r3, [sp, #28]
 800aad8:	9307      	strlt	r3, [sp, #28]
 800aada:	bfb8      	it	lt
 800aadc:	9204      	strlt	r2, [sp, #16]
 800aade:	7823      	ldrb	r3, [r4, #0]
 800aae0:	2b2e      	cmp	r3, #46	@ 0x2e
 800aae2:	d10a      	bne.n	800aafa <_vfiprintf_r+0x156>
 800aae4:	7863      	ldrb	r3, [r4, #1]
 800aae6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aae8:	d132      	bne.n	800ab50 <_vfiprintf_r+0x1ac>
 800aaea:	9b03      	ldr	r3, [sp, #12]
 800aaec:	1d1a      	adds	r2, r3, #4
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	9203      	str	r2, [sp, #12]
 800aaf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aaf6:	3402      	adds	r4, #2
 800aaf8:	9305      	str	r3, [sp, #20]
 800aafa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abd0 <_vfiprintf_r+0x22c>
 800aafe:	7821      	ldrb	r1, [r4, #0]
 800ab00:	2203      	movs	r2, #3
 800ab02:	4650      	mov	r0, sl
 800ab04:	f7f5 fb6c 	bl	80001e0 <memchr>
 800ab08:	b138      	cbz	r0, 800ab1a <_vfiprintf_r+0x176>
 800ab0a:	9b04      	ldr	r3, [sp, #16]
 800ab0c:	eba0 000a 	sub.w	r0, r0, sl
 800ab10:	2240      	movs	r2, #64	@ 0x40
 800ab12:	4082      	lsls	r2, r0
 800ab14:	4313      	orrs	r3, r2
 800ab16:	3401      	adds	r4, #1
 800ab18:	9304      	str	r3, [sp, #16]
 800ab1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab1e:	4829      	ldr	r0, [pc, #164]	@ (800abc4 <_vfiprintf_r+0x220>)
 800ab20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab24:	2206      	movs	r2, #6
 800ab26:	f7f5 fb5b 	bl	80001e0 <memchr>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d03f      	beq.n	800abae <_vfiprintf_r+0x20a>
 800ab2e:	4b26      	ldr	r3, [pc, #152]	@ (800abc8 <_vfiprintf_r+0x224>)
 800ab30:	bb1b      	cbnz	r3, 800ab7a <_vfiprintf_r+0x1d6>
 800ab32:	9b03      	ldr	r3, [sp, #12]
 800ab34:	3307      	adds	r3, #7
 800ab36:	f023 0307 	bic.w	r3, r3, #7
 800ab3a:	3308      	adds	r3, #8
 800ab3c:	9303      	str	r3, [sp, #12]
 800ab3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab40:	443b      	add	r3, r7
 800ab42:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab44:	e76a      	b.n	800aa1c <_vfiprintf_r+0x78>
 800ab46:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	2001      	movs	r0, #1
 800ab4e:	e7a8      	b.n	800aaa2 <_vfiprintf_r+0xfe>
 800ab50:	2300      	movs	r3, #0
 800ab52:	3401      	adds	r4, #1
 800ab54:	9305      	str	r3, [sp, #20]
 800ab56:	4619      	mov	r1, r3
 800ab58:	f04f 0c0a 	mov.w	ip, #10
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab62:	3a30      	subs	r2, #48	@ 0x30
 800ab64:	2a09      	cmp	r2, #9
 800ab66:	d903      	bls.n	800ab70 <_vfiprintf_r+0x1cc>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d0c6      	beq.n	800aafa <_vfiprintf_r+0x156>
 800ab6c:	9105      	str	r1, [sp, #20]
 800ab6e:	e7c4      	b.n	800aafa <_vfiprintf_r+0x156>
 800ab70:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab74:	4604      	mov	r4, r0
 800ab76:	2301      	movs	r3, #1
 800ab78:	e7f0      	b.n	800ab5c <_vfiprintf_r+0x1b8>
 800ab7a:	ab03      	add	r3, sp, #12
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	462a      	mov	r2, r5
 800ab80:	4b12      	ldr	r3, [pc, #72]	@ (800abcc <_vfiprintf_r+0x228>)
 800ab82:	a904      	add	r1, sp, #16
 800ab84:	4630      	mov	r0, r6
 800ab86:	f7fb feb7 	bl	80068f8 <_printf_float>
 800ab8a:	4607      	mov	r7, r0
 800ab8c:	1c78      	adds	r0, r7, #1
 800ab8e:	d1d6      	bne.n	800ab3e <_vfiprintf_r+0x19a>
 800ab90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab92:	07d9      	lsls	r1, r3, #31
 800ab94:	d405      	bmi.n	800aba2 <_vfiprintf_r+0x1fe>
 800ab96:	89ab      	ldrh	r3, [r5, #12]
 800ab98:	059a      	lsls	r2, r3, #22
 800ab9a:	d402      	bmi.n	800aba2 <_vfiprintf_r+0x1fe>
 800ab9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab9e:	f7fc fe1b 	bl	80077d8 <__retarget_lock_release_recursive>
 800aba2:	89ab      	ldrh	r3, [r5, #12]
 800aba4:	065b      	lsls	r3, r3, #25
 800aba6:	f53f af1f 	bmi.w	800a9e8 <_vfiprintf_r+0x44>
 800abaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abac:	e71e      	b.n	800a9ec <_vfiprintf_r+0x48>
 800abae:	ab03      	add	r3, sp, #12
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	462a      	mov	r2, r5
 800abb4:	4b05      	ldr	r3, [pc, #20]	@ (800abcc <_vfiprintf_r+0x228>)
 800abb6:	a904      	add	r1, sp, #16
 800abb8:	4630      	mov	r0, r6
 800abba:	f7fc f935 	bl	8006e28 <_printf_i>
 800abbe:	e7e4      	b.n	800ab8a <_vfiprintf_r+0x1e6>
 800abc0:	0800b2c9 	.word	0x0800b2c9
 800abc4:	0800b2d3 	.word	0x0800b2d3
 800abc8:	080068f9 	.word	0x080068f9
 800abcc:	0800a981 	.word	0x0800a981
 800abd0:	0800b2cf 	.word	0x0800b2cf

0800abd4 <__swbuf_r>:
 800abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd6:	460e      	mov	r6, r1
 800abd8:	4614      	mov	r4, r2
 800abda:	4605      	mov	r5, r0
 800abdc:	b118      	cbz	r0, 800abe6 <__swbuf_r+0x12>
 800abde:	6a03      	ldr	r3, [r0, #32]
 800abe0:	b90b      	cbnz	r3, 800abe6 <__swbuf_r+0x12>
 800abe2:	f7fc fce1 	bl	80075a8 <__sinit>
 800abe6:	69a3      	ldr	r3, [r4, #24]
 800abe8:	60a3      	str	r3, [r4, #8]
 800abea:	89a3      	ldrh	r3, [r4, #12]
 800abec:	071a      	lsls	r2, r3, #28
 800abee:	d501      	bpl.n	800abf4 <__swbuf_r+0x20>
 800abf0:	6923      	ldr	r3, [r4, #16]
 800abf2:	b943      	cbnz	r3, 800ac06 <__swbuf_r+0x32>
 800abf4:	4621      	mov	r1, r4
 800abf6:	4628      	mov	r0, r5
 800abf8:	f000 f82a 	bl	800ac50 <__swsetup_r>
 800abfc:	b118      	cbz	r0, 800ac06 <__swbuf_r+0x32>
 800abfe:	f04f 37ff 	mov.w	r7, #4294967295
 800ac02:	4638      	mov	r0, r7
 800ac04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	6922      	ldr	r2, [r4, #16]
 800ac0a:	1a98      	subs	r0, r3, r2
 800ac0c:	6963      	ldr	r3, [r4, #20]
 800ac0e:	b2f6      	uxtb	r6, r6
 800ac10:	4283      	cmp	r3, r0
 800ac12:	4637      	mov	r7, r6
 800ac14:	dc05      	bgt.n	800ac22 <__swbuf_r+0x4e>
 800ac16:	4621      	mov	r1, r4
 800ac18:	4628      	mov	r0, r5
 800ac1a:	f7ff fa53 	bl	800a0c4 <_fflush_r>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d1ed      	bne.n	800abfe <__swbuf_r+0x2a>
 800ac22:	68a3      	ldr	r3, [r4, #8]
 800ac24:	3b01      	subs	r3, #1
 800ac26:	60a3      	str	r3, [r4, #8]
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	6022      	str	r2, [r4, #0]
 800ac2e:	701e      	strb	r6, [r3, #0]
 800ac30:	6962      	ldr	r2, [r4, #20]
 800ac32:	1c43      	adds	r3, r0, #1
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d004      	beq.n	800ac42 <__swbuf_r+0x6e>
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	07db      	lsls	r3, r3, #31
 800ac3c:	d5e1      	bpl.n	800ac02 <__swbuf_r+0x2e>
 800ac3e:	2e0a      	cmp	r6, #10
 800ac40:	d1df      	bne.n	800ac02 <__swbuf_r+0x2e>
 800ac42:	4621      	mov	r1, r4
 800ac44:	4628      	mov	r0, r5
 800ac46:	f7ff fa3d 	bl	800a0c4 <_fflush_r>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d0d9      	beq.n	800ac02 <__swbuf_r+0x2e>
 800ac4e:	e7d6      	b.n	800abfe <__swbuf_r+0x2a>

0800ac50 <__swsetup_r>:
 800ac50:	b538      	push	{r3, r4, r5, lr}
 800ac52:	4b29      	ldr	r3, [pc, #164]	@ (800acf8 <__swsetup_r+0xa8>)
 800ac54:	4605      	mov	r5, r0
 800ac56:	6818      	ldr	r0, [r3, #0]
 800ac58:	460c      	mov	r4, r1
 800ac5a:	b118      	cbz	r0, 800ac64 <__swsetup_r+0x14>
 800ac5c:	6a03      	ldr	r3, [r0, #32]
 800ac5e:	b90b      	cbnz	r3, 800ac64 <__swsetup_r+0x14>
 800ac60:	f7fc fca2 	bl	80075a8 <__sinit>
 800ac64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac68:	0719      	lsls	r1, r3, #28
 800ac6a:	d422      	bmi.n	800acb2 <__swsetup_r+0x62>
 800ac6c:	06da      	lsls	r2, r3, #27
 800ac6e:	d407      	bmi.n	800ac80 <__swsetup_r+0x30>
 800ac70:	2209      	movs	r2, #9
 800ac72:	602a      	str	r2, [r5, #0]
 800ac74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac78:	81a3      	strh	r3, [r4, #12]
 800ac7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7e:	e033      	b.n	800ace8 <__swsetup_r+0x98>
 800ac80:	0758      	lsls	r0, r3, #29
 800ac82:	d512      	bpl.n	800acaa <__swsetup_r+0x5a>
 800ac84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac86:	b141      	cbz	r1, 800ac9a <__swsetup_r+0x4a>
 800ac88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac8c:	4299      	cmp	r1, r3
 800ac8e:	d002      	beq.n	800ac96 <__swsetup_r+0x46>
 800ac90:	4628      	mov	r0, r5
 800ac92:	f7fd fc05 	bl	80084a0 <_free_r>
 800ac96:	2300      	movs	r3, #0
 800ac98:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aca0:	81a3      	strh	r3, [r4, #12]
 800aca2:	2300      	movs	r3, #0
 800aca4:	6063      	str	r3, [r4, #4]
 800aca6:	6923      	ldr	r3, [r4, #16]
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	89a3      	ldrh	r3, [r4, #12]
 800acac:	f043 0308 	orr.w	r3, r3, #8
 800acb0:	81a3      	strh	r3, [r4, #12]
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	b94b      	cbnz	r3, 800acca <__swsetup_r+0x7a>
 800acb6:	89a3      	ldrh	r3, [r4, #12]
 800acb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800acbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acc0:	d003      	beq.n	800acca <__swsetup_r+0x7a>
 800acc2:	4621      	mov	r1, r4
 800acc4:	4628      	mov	r0, r5
 800acc6:	f000 f883 	bl	800add0 <__smakebuf_r>
 800acca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acce:	f013 0201 	ands.w	r2, r3, #1
 800acd2:	d00a      	beq.n	800acea <__swsetup_r+0x9a>
 800acd4:	2200      	movs	r2, #0
 800acd6:	60a2      	str	r2, [r4, #8]
 800acd8:	6962      	ldr	r2, [r4, #20]
 800acda:	4252      	negs	r2, r2
 800acdc:	61a2      	str	r2, [r4, #24]
 800acde:	6922      	ldr	r2, [r4, #16]
 800ace0:	b942      	cbnz	r2, 800acf4 <__swsetup_r+0xa4>
 800ace2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ace6:	d1c5      	bne.n	800ac74 <__swsetup_r+0x24>
 800ace8:	bd38      	pop	{r3, r4, r5, pc}
 800acea:	0799      	lsls	r1, r3, #30
 800acec:	bf58      	it	pl
 800acee:	6962      	ldrpl	r2, [r4, #20]
 800acf0:	60a2      	str	r2, [r4, #8]
 800acf2:	e7f4      	b.n	800acde <__swsetup_r+0x8e>
 800acf4:	2000      	movs	r0, #0
 800acf6:	e7f7      	b.n	800ace8 <__swsetup_r+0x98>
 800acf8:	2000001c 	.word	0x2000001c

0800acfc <_raise_r>:
 800acfc:	291f      	cmp	r1, #31
 800acfe:	b538      	push	{r3, r4, r5, lr}
 800ad00:	4605      	mov	r5, r0
 800ad02:	460c      	mov	r4, r1
 800ad04:	d904      	bls.n	800ad10 <_raise_r+0x14>
 800ad06:	2316      	movs	r3, #22
 800ad08:	6003      	str	r3, [r0, #0]
 800ad0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad12:	b112      	cbz	r2, 800ad1a <_raise_r+0x1e>
 800ad14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad18:	b94b      	cbnz	r3, 800ad2e <_raise_r+0x32>
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	f000 f830 	bl	800ad80 <_getpid_r>
 800ad20:	4622      	mov	r2, r4
 800ad22:	4601      	mov	r1, r0
 800ad24:	4628      	mov	r0, r5
 800ad26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad2a:	f000 b817 	b.w	800ad5c <_kill_r>
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d00a      	beq.n	800ad48 <_raise_r+0x4c>
 800ad32:	1c59      	adds	r1, r3, #1
 800ad34:	d103      	bne.n	800ad3e <_raise_r+0x42>
 800ad36:	2316      	movs	r3, #22
 800ad38:	6003      	str	r3, [r0, #0]
 800ad3a:	2001      	movs	r0, #1
 800ad3c:	e7e7      	b.n	800ad0e <_raise_r+0x12>
 800ad3e:	2100      	movs	r1, #0
 800ad40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad44:	4620      	mov	r0, r4
 800ad46:	4798      	blx	r3
 800ad48:	2000      	movs	r0, #0
 800ad4a:	e7e0      	b.n	800ad0e <_raise_r+0x12>

0800ad4c <raise>:
 800ad4c:	4b02      	ldr	r3, [pc, #8]	@ (800ad58 <raise+0xc>)
 800ad4e:	4601      	mov	r1, r0
 800ad50:	6818      	ldr	r0, [r3, #0]
 800ad52:	f7ff bfd3 	b.w	800acfc <_raise_r>
 800ad56:	bf00      	nop
 800ad58:	2000001c 	.word	0x2000001c

0800ad5c <_kill_r>:
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	4d07      	ldr	r5, [pc, #28]	@ (800ad7c <_kill_r+0x20>)
 800ad60:	2300      	movs	r3, #0
 800ad62:	4604      	mov	r4, r0
 800ad64:	4608      	mov	r0, r1
 800ad66:	4611      	mov	r1, r2
 800ad68:	602b      	str	r3, [r5, #0]
 800ad6a:	f7f6 fd23 	bl	80017b4 <_kill>
 800ad6e:	1c43      	adds	r3, r0, #1
 800ad70:	d102      	bne.n	800ad78 <_kill_r+0x1c>
 800ad72:	682b      	ldr	r3, [r5, #0]
 800ad74:	b103      	cbz	r3, 800ad78 <_kill_r+0x1c>
 800ad76:	6023      	str	r3, [r4, #0]
 800ad78:	bd38      	pop	{r3, r4, r5, pc}
 800ad7a:	bf00      	nop
 800ad7c:	20004e14 	.word	0x20004e14

0800ad80 <_getpid_r>:
 800ad80:	f7f6 bd10 	b.w	80017a4 <_getpid>

0800ad84 <__swhatbuf_r>:
 800ad84:	b570      	push	{r4, r5, r6, lr}
 800ad86:	460c      	mov	r4, r1
 800ad88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad8c:	2900      	cmp	r1, #0
 800ad8e:	b096      	sub	sp, #88	@ 0x58
 800ad90:	4615      	mov	r5, r2
 800ad92:	461e      	mov	r6, r3
 800ad94:	da0d      	bge.n	800adb2 <__swhatbuf_r+0x2e>
 800ad96:	89a3      	ldrh	r3, [r4, #12]
 800ad98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad9c:	f04f 0100 	mov.w	r1, #0
 800ada0:	bf14      	ite	ne
 800ada2:	2340      	movne	r3, #64	@ 0x40
 800ada4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ada8:	2000      	movs	r0, #0
 800adaa:	6031      	str	r1, [r6, #0]
 800adac:	602b      	str	r3, [r5, #0]
 800adae:	b016      	add	sp, #88	@ 0x58
 800adb0:	bd70      	pop	{r4, r5, r6, pc}
 800adb2:	466a      	mov	r2, sp
 800adb4:	f000 f848 	bl	800ae48 <_fstat_r>
 800adb8:	2800      	cmp	r0, #0
 800adba:	dbec      	blt.n	800ad96 <__swhatbuf_r+0x12>
 800adbc:	9901      	ldr	r1, [sp, #4]
 800adbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800adc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800adc6:	4259      	negs	r1, r3
 800adc8:	4159      	adcs	r1, r3
 800adca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adce:	e7eb      	b.n	800ada8 <__swhatbuf_r+0x24>

0800add0 <__smakebuf_r>:
 800add0:	898b      	ldrh	r3, [r1, #12]
 800add2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800add4:	079d      	lsls	r5, r3, #30
 800add6:	4606      	mov	r6, r0
 800add8:	460c      	mov	r4, r1
 800adda:	d507      	bpl.n	800adec <__smakebuf_r+0x1c>
 800addc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	6123      	str	r3, [r4, #16]
 800ade4:	2301      	movs	r3, #1
 800ade6:	6163      	str	r3, [r4, #20]
 800ade8:	b003      	add	sp, #12
 800adea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adec:	ab01      	add	r3, sp, #4
 800adee:	466a      	mov	r2, sp
 800adf0:	f7ff ffc8 	bl	800ad84 <__swhatbuf_r>
 800adf4:	9f00      	ldr	r7, [sp, #0]
 800adf6:	4605      	mov	r5, r0
 800adf8:	4639      	mov	r1, r7
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7fd fbc4 	bl	8008588 <_malloc_r>
 800ae00:	b948      	cbnz	r0, 800ae16 <__smakebuf_r+0x46>
 800ae02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae06:	059a      	lsls	r2, r3, #22
 800ae08:	d4ee      	bmi.n	800ade8 <__smakebuf_r+0x18>
 800ae0a:	f023 0303 	bic.w	r3, r3, #3
 800ae0e:	f043 0302 	orr.w	r3, r3, #2
 800ae12:	81a3      	strh	r3, [r4, #12]
 800ae14:	e7e2      	b.n	800addc <__smakebuf_r+0xc>
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	6020      	str	r0, [r4, #0]
 800ae1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	9b01      	ldr	r3, [sp, #4]
 800ae22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae26:	b15b      	cbz	r3, 800ae40 <__smakebuf_r+0x70>
 800ae28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f000 f81d 	bl	800ae6c <_isatty_r>
 800ae32:	b128      	cbz	r0, 800ae40 <__smakebuf_r+0x70>
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	f023 0303 	bic.w	r3, r3, #3
 800ae3a:	f043 0301 	orr.w	r3, r3, #1
 800ae3e:	81a3      	strh	r3, [r4, #12]
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	431d      	orrs	r5, r3
 800ae44:	81a5      	strh	r5, [r4, #12]
 800ae46:	e7cf      	b.n	800ade8 <__smakebuf_r+0x18>

0800ae48 <_fstat_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4d07      	ldr	r5, [pc, #28]	@ (800ae68 <_fstat_r+0x20>)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4604      	mov	r4, r0
 800ae50:	4608      	mov	r0, r1
 800ae52:	4611      	mov	r1, r2
 800ae54:	602b      	str	r3, [r5, #0]
 800ae56:	f7f6 fd0d 	bl	8001874 <_fstat>
 800ae5a:	1c43      	adds	r3, r0, #1
 800ae5c:	d102      	bne.n	800ae64 <_fstat_r+0x1c>
 800ae5e:	682b      	ldr	r3, [r5, #0]
 800ae60:	b103      	cbz	r3, 800ae64 <_fstat_r+0x1c>
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	bd38      	pop	{r3, r4, r5, pc}
 800ae66:	bf00      	nop
 800ae68:	20004e14 	.word	0x20004e14

0800ae6c <_isatty_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4d06      	ldr	r5, [pc, #24]	@ (800ae88 <_isatty_r+0x1c>)
 800ae70:	2300      	movs	r3, #0
 800ae72:	4604      	mov	r4, r0
 800ae74:	4608      	mov	r0, r1
 800ae76:	602b      	str	r3, [r5, #0]
 800ae78:	f7f6 fd0c 	bl	8001894 <_isatty>
 800ae7c:	1c43      	adds	r3, r0, #1
 800ae7e:	d102      	bne.n	800ae86 <_isatty_r+0x1a>
 800ae80:	682b      	ldr	r3, [r5, #0]
 800ae82:	b103      	cbz	r3, 800ae86 <_isatty_r+0x1a>
 800ae84:	6023      	str	r3, [r4, #0]
 800ae86:	bd38      	pop	{r3, r4, r5, pc}
 800ae88:	20004e14 	.word	0x20004e14

0800ae8c <_init>:
 800ae8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8e:	bf00      	nop
 800ae90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae92:	bc08      	pop	{r3}
 800ae94:	469e      	mov	lr, r3
 800ae96:	4770      	bx	lr

0800ae98 <_fini>:
 800ae98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9a:	bf00      	nop
 800ae9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae9e:	bc08      	pop	{r3}
 800aea0:	469e      	mov	lr, r3
 800aea2:	4770      	bx	lr
